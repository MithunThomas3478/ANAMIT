<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= product.productName %> - Details</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.min.css">
    <style>
     /* Base styles and imports */
@import url('https://fonts.cdnjs.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

:root {
    --primary-color: #ff5722;
    --secondary-color: #ff8a65;
    --accent-color: #ff9800;
}

body {
    font-family: 'Poppins', sans-serif;
    background: #f8f9fa;
}

/* Product container styles - renamed from 'container' to avoid conflicts */
.product-details-container {
    background: white;
    border-radius: 20px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.05);
    padding: 40px;
    margin-top: 20px;
}

/* Image section styles */
.zoom-container {
    position: relative;
    overflow: hidden;
    cursor: zoom-in;
    border-radius: 16px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    height: 500px;
    background: white;
}

.zoom-container.zoomed {
    cursor: zoom-out;
}

.zoom-container img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    transform-origin: center;
    transition: transform 0.3s ease-out;
}

.zoom-container:hover img {
    transform: scale(2);
}

.zoom-container.active img {
    transition: transform 0.1s ease-out;
}

/* Thumbnail styles */
.thumbnail {
    cursor: pointer;
    transition: all 0.3s ease;
    border-radius: 12px;
    opacity: 0.7;
    height: 100px;
    object-fit: cover;
    background: white;
}

.thumbnail:hover {
    opacity: 1;
    transform: translateY(-3px);
}

.thumbnail.active {
    border: 3px solid var(--primary-color);
    opacity: 1;
}

/* Product title styles */
.product-title {
    font-size: 1.7rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    position: relative;
    color: #333;
    padding: 10px;
}

.product-title::after {
    content: '';
    position: absolute;
    bottom: -10px;
    left: 0;
    width: 60px;
    height: 3px;
    background: var(--primary-color);
}

/* Price section styles */
.price-details {
    margin-bottom: 1.5rem;
    background: white;
}

.price-wrapper {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
}

.price-tag {
    font-size: 2.5rem;
    color: var(--primary-color);
    font-weight: 700;
}

.original-price {
    font-size: 1.5rem;
    text-decoration: line-through;
    color: #999;
}

.discount-badge {
    background: #28a745;
    color: white;
    padding: 0.4rem 1rem;
    border-radius: 20px;
    font-size: 1rem;
    font-weight: 500;
}

/* Offer section styles */
.offer-info {
    margin-top: 1rem;
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
}

.offer-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 500;
}

.category-offer {
    background-color: #e3f2fd;
    color: #1976d2;
}

.product-offer {
    background-color: #fbe9e7;
    color: #d84315;
}

.offer-name {
    color: #666;
    font-size: 0.9rem;
    font-style: italic;
}

/* Color selection styles */
.color-option {
    width: 35px;
    height: 35px;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    border: 2px solid #ddd;
}

.color-option:hover {
    transform: scale(1.2);
}

.color-option.active {
    border: 2px solid var(--primary-color);
}

.color-option.active::after {
    content: '';
    position: absolute;
    inset: -4px;
    border: 2px solid var(--primary-color);
    border-radius: 50%;
    animation: pulse 1.5s infinite;
}

@keyframes pulse {
    0% { transform: scale(1); opacity: 1; }
    50% { transform: scale(1.2); opacity: 0.5; }
    100% { transform: scale(1); opacity: 1; }
}

/* Size selection styles */
.size-option {
    border: 2px solid #e9ecef;
    color: #2d3436;
    font-weight: 500;
    padding: 8px 20px;
    transition: all 0.3s ease;
    border-radius: 8px;
    min-width: 60px;
    text-align: center;
    background: white;
}

.size-option:not(.disabled):hover {
    background: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
    transform: translateY(-2px);
}

.size-option.active {
    background: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
}

.size-option.disabled {
    opacity: 0.5;
    cursor: not-allowed;
    background: #f8f9fa;
}

/* Button styles */
.btn-custom {
    padding: 15px 30px;
    font-weight: 600;
    border-radius: 30px;
    text-transform: uppercase;
    letter-spacing: 1px;
    transition: all 0.3s ease;
}

.action-buttons {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
}

.btn-custom.add-to-cart {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
}

.btn-custom.wishlist-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    background-color: white;
    border: 2px solid var(--primary-color);
    color: var(--primary-color);
}

.btn-custom.wishlist-btn:hover {
    background-color: var(--primary-color);
    color: white;
}

.btn-custom.wishlist-btn.wishlisted {
    background-color: var(--primary-color);
    color: white;
}

/* Stock status styles */
.stock-status {
    display: inline-block;
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 0.9rem;
    font-weight: 500;
    margin-top: 10px;
}

.in-stock {
    background: #e8f5e9;
    color: #2e7d32;
}

.low-stock {
    background: #fff3e0;
    color: #f57c00;
}

.out-of-stock {
    background: #ffebee;
    color: #c62828;
}

/* Product details section */
.product-details {
    margin-top: 30px;
    padding: 20px;
    border-radius: 15px;
    background: #f8f9fa;
}

.product-details h6 {
    color: #2d3436;
    font-weight: 600;
    margin-bottom: 15px;
}

.product-details p {
    color: #636e72;
    line-height: 1.6;
}

/* Similar products section */
.similar-product-card {
    background: white;
    border: none;
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.3s ease;
    height: 100%;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.similar-product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 20px rgba(255, 87, 34, 0.15);
}

.product-image-wrapper {
    position: relative;
    padding-top: 133%;
    overflow: hidden;
}

.product-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
}
.product-card {
    background: white;
    border: none;
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.3s ease;
    height: 100%;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    position: relative;
}

.product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 20px rgba(255, 87, 34, 0.15);
}
.product-card .wishlist-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 50%;
    width: 35px;
    height: 35px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 2;
    transition: all 0.3s ease;
    border: none;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.product-card .wishlist-btn i {
    color: var(--primary-color);
    font-size: 1.2rem;
    transition: all 0.3s ease;
}

.product-card .wishlist-btn.wishlisted {
    background-color: var(--primary-color);
}

.product-card .wishlist-btn.wishlisted i {
    color: white;
}

.product-card .wishlist-btn:hover {
    transform: scale(1.1);
    background-color: var(--primary-color);
}

.product-card .wishlist-btn:hover i {
    color: white;
}

/* Responsive styles */
@media (max-width: 576px) {
    .product-details-container {
        padding: 15px;
        margin-top: 10px;
    }

    .zoom-container {
        height: 300px;
    }

    .product-title {
        font-size: 1.8rem;
    }

    .price-tag {
        font-size: 2rem;
    }

    .action-buttons {
        flex-direction: column;
    }

    .similar-product-card {
        margin-bottom: 15px;
    }

    .thumbnail {
        height: 60px;
    }
}

@media (min-width: 577px) and (max-width: 768px) {
    .product-details-container {
        padding: 25px;
    }

    .zoom-container {
        height: 400px;
    }

    .product-title {
        font-size: 2rem;
    }
}

@media (min-width: 769px) and (max-width: 992px) {
    .zoom-container {
        height: 450px;
    }
}

/* Touch device optimizations */
@media (hover: none) {
    .zoom-container:hover img {
        transform: none;
    }

    .product-card:hover {
        transform: none;
    }

    .size-option:not(.disabled):hover {
        transform: none;
    }
}
    </style>
</head>
<body>
    <%- include('../partials/user/header')%>
    
    <div class="container product-details-container">
        <div class="row">
            <!-- Product Images Section -->
            <div class="col-md-6 mb-4">
                <div class="zoom-container">
                    <% if (product.productOffer > 0) { %>
                        <span class="product-badge"><%= product.productOffer %>% OFF!</span>
                    <% } %>
                    <img src="<%= product.variants[0].productImage[0] %>" 
                         id="mainImage" 
                         alt="<%= product.productName %>">
                </div>
                <div class="row mt-3">
                    <% product.variants[0].productImage.forEach((image, index) => { %>
                        <div class="col-3">
                            <img src="<%= image %>" 
                                 class="img-fluid thumbnail <%= index === 0 ? 'active' : '' %>" 
                                 onclick="changeImage(this)" 
                                 alt="Product view <%= index + 1 %>">
                        </div>
                    <% }); %>
                </div>
            </div>

            <!-- Product Details Section -->
            <div class="col-md-6">
                <h1 class="product-title"><%= product.productName %></h1>
                
                <!-- Price Section -->
                <div class="mb-4" id="priceSection">
                    <% 
                        const variant = product.variants[0];
                        const colorVariant = variant.colorVariant[0];
                        const originalPrice = colorVariant.originalPrice;
                        const finalPrice = product.hasOffer ? 
                            colorVariant.discountedPrice : originalPrice;
                    %>
                    
                    <div class="price-details">
                        <% if (product.hasOffer) { %>
                            <div class="price-wrapper">
                                <span class="price-tag">₹<%= finalPrice.toFixed(2) %></span>
                                <span class="original-price">₹<%= originalPrice.toFixed(2) %></span>
                                <span class="discount-badge">
                                    <%= product.offerPercentage %>% OFF
                                </span>
                            </div>
                            <div class="offer-info">
                                <% if (product.offerType === 'category') { %>
                                    <span class="offer-badge category-offer">
                                        <i class="fas fa-tag"></i> Category Offer
                                    </span>
                                <% } else { %>
                                    <span class="offer-badge product-offer">
                                        <i class="fas fa-fire"></i> Special Offer
                                    </span>
                                <% } %>
                                <% if (product.offerName) { %>
                                    <span class="offer-name"><%= product.offerName %></span>
                                <% } %>
                            </div>
                        <% } else { %>
                            <span class="price-tag">₹<%= originalPrice.toFixed(2) %></span>
                        <% } %>
                    </div>

                <!-- Stock Status -->
                <div class="stock-status in-stock" id="stockStatus">
                    In Stock
                </div>

                <!-- Color Selection -->
                <div class="mb-4">
                    <h6>Select Color</h6>
                    <div class="d-flex gap-2">
                        <% product.variants.forEach((variant, index) => { %>
                            <div class="color-option <%= index === 0 ? 'active' : '' %>"
                                 style="background-color: <%= variant.colorValue %>;"
                                 onclick="selectColor(this, '<%= variant.colorName %>', <%= index %>)"
                                 data-color-name="<%= variant.colorName %>"
                                 title="<%= variant.colorName %>">
                            </div>
                        <% }); %>
                    </div>
                    <small class="text-muted">Selected: <span id="selectedColorName"><%= product.variants[0].colorName %></span></small>
                </div>

                <!-- Size Selection -->
                <div class="mb-4">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6>Select Size</h6>
                        <span class="size-guide" onclick="showSizeGuide()">Size Guide</span>
                    </div>
                    <div class="d-flex gap-2 size-options">
                        <% product.variants[0].colorVariant.forEach(cv => { %>
                            <div class="size-option <%= cv.stock === 0 ? 'disabled' : '' %>"
                                 onclick="<%= cv.stock > 0 ? `selectSize(this, '${cv.size}')` : '' %>"
                                 data-size="<%= cv.size %>">
                                <%= cv.size %>
                                <% if (cv.stock === 0) { %>
                                    <div><small>Out of Stock</small></div>
                                <% } %>
                            </div>
                        <% }); %>
                    </div>
                    <small class="text-danger d-none" id="sizeError">Please select a size</small>
                </div>

                <!-- Action Buttons -->
                <div class="action-buttons">
                    <button class="btn btn-custom add-to-cart btn-warning" id="cartButton" onclick="addToCart()">
                        Add to Cart
                    </button>
                    <button class="btn btn-custom wishlist-btn <%= product.isInWishlist ? 'wishlisted' : '' %>" 
                        onclick="toggleWishlist('<%= product._id %>')"
                        data-wishlist-id="<%= product._id %>">
                    <i class="<%= product.isInWishlist ? 'fa-solid' : 'fa-regular' %> fa-heart"></i>
                    <span class="wishlist-text">
                        <%= product.isInWishlist ? 'Wishlisted' : 'Wishlist' %>
                    </span>
                </button>
                </div>

                <!-- Product Details -->
                <div class="product-details">
                    <h6>Product Description</h6>
                    <p><%= product.description %></p>
                    
                    
                </div>
            </div>
        </div>

    
       <!-- Similar Products Section -->
<div class="mt-5">
    <h2 class="mb-4">Similar Products</h2>
    <div class="row">
        <% similarProducts.forEach(similarProduct => { %>
            <div class="col-6 col-md-4 col-lg-3 mb-4">
                <div class="product-card">
                    <div class="product-image-wrapper">
                        <!-- Wishlist Button -->
                        <button class="wishlist-btn <%= similarProduct.isInWishlist ? 'wishlisted' : '' %>" 
                                onclick="toggleWishlist('<%= similarProduct._id %>')"
                                data-wishlist-id="<%= similarProduct._id %>"
                                title="<%= similarProduct.isInWishlist ? 'Remove from Wishlist' : 'Add to Wishlist' %>">
                            <i class="<%= similarProduct.isInWishlist ? 'fa-solid' : 'fa-regular' %> fa-heart"></i>
                        </button>
                        
                        <!-- Product Image Link -->
                        <a href="/productDetails/<%= similarProduct._id %>">
                            <img src="<%= similarProduct.variants[0].productImage[0] %>" 
                                 class="product-image" 
                                 alt="<%= similarProduct.productName %>">
                        </a>
                    </div>
                    
                    <!-- Product Info -->
                    <div class="product-info">
                        <a href="/productDetails/<%= similarProduct._id %>" class="text-decoration-none">
                            <h3 class="product-title"><%= similarProduct.productName %></h3>
                        </a>
                        
                        <!-- Price Section -->
                        <div class="price-container">
                            <% if (similarProduct.hasOffer) { %>
                                <span class="current-price">₹<%= similarProduct.discountedPrice.toFixed(2) %></span>
                                <span class="original-price">₹<%= similarProduct.originalPrice.toFixed(2) %></span>
                                <span class="discount-badge">
                                    <%= similarProduct.offerPercentage %>% OFF
                                </span>
                            <% } else { %>
                                <span class="current-price">₹<%= similarProduct.originalPrice.toFixed(2) %></span>
                            <% } %>
                        </div>

                        <!-- View Details Button -->
                        <a href="/productDetails/<%= similarProduct._id %>" class="btn btn-warning mt-3 w-100">
                            View Details
                        </a>
                    </div>
                </div>
            </div>
        <% }); %>
    </div>
</div>
    </div>

    <%- include('../partials/user/footer')%>
    
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.all.min.js"></script>
    <script>
        const productData = <%- JSON.stringify(product) %>;
        let localCartVariants = <%- JSON.stringify(cartVariants) %>;
        let currentVariant = 0;
        let selectedSize = null;

        function showToast(message, type = 'info') {
            Swal.fire({
                text: message,
                icon: type,
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer)
                    toast.addEventListener('mouseleave', Swal.resumeTimer)
                }
            });
        }

        function updatePrices(variantIndex, size = null) {
            const variant = productData.variants[variantIndex];
            let sizeVariant;
            
            if (size) {
                sizeVariant = variant.colorVariant.find(cv => cv.size === size);
            } else {
                sizeVariant = variant.colorVariant[0];
            }

            if (sizeVariant) {
                const basePrice = sizeVariant.price;
                const discountedPrice = productData.productOffer ? 
                    basePrice * (1 - productData.productOffer/100) : basePrice;

                // Update price display
                const currentPriceElement = document.getElementById('currentPrice');
                const originalPriceElement = document.getElementById('originalPrice');
                
                if (currentPriceElement) {
                    currentPriceElement.textContent = `₹${discountedPrice.toFixed(2)}`;
                }
                
                if (originalPriceElement) {
                    originalPriceElement.textContent = `₹${basePrice}`;
                }

                // Update stock status
                updateStockStatus(sizeVariant.stock);
            }
        }

        function updateStockStatus(stock) {
    const statusElement = document.getElementById('stockStatus');
    const cartButton = document.getElementById('cartButton');
    statusElement.className = 'stock-status';
    
    if (stock === 0) {
        statusElement.textContent = 'Out of Stock';
        statusElement.classList.add('out-of-stock');
        cartButton.disabled = true;
        cartButton.textContent = 'Out of Stock';
        cartButton.classList.remove('btn-warning');
        cartButton.classList.add('btn-secondary');
    } else if (stock <= 5) {
        statusElement.textContent = `Low Stock (${stock} left)`;
        statusElement.classList.add('low-stock');
        cartButton.disabled = false;
        updateCartButton();
    } else {
        statusElement.textContent = 'In Stock';
        statusElement.classList.add('in-stock');
        cartButton.disabled = false;
        updateCartButton();
    }
}

        function changeImage(element) {
            document.getElementById('mainImage').src = element.src;
            document.querySelectorAll('.thumbnail').forEach(thumb => 
                thumb.classList.remove('active'));
            element.classList.add('active');
        }

        function selectColor(element, colorName, variantIndex) {
            currentVariant = variantIndex;
            document.querySelectorAll('.color-option')
                .forEach(opt => opt.classList.remove('active'));
            element.classList.add('active');
            document.getElementById('selectedColorName').textContent = colorName;

            const variant = productData.variants[variantIndex];
            document.getElementById('mainImage').src = variant.productImage[0];
            
            // Update thumbnails
            const thumbnailContainer = document.querySelector('.row.mt-3');
            thumbnailContainer.innerHTML = variant.productImage.map((image, index) => `
                <div class="col-3">
                    <img src="${image}" 
                         class="img-fluid thumbnail ${index === 0 ? 'active' : ''}" 
                         onclick="changeImage(this)" 
                         alt="Product view ${index + 1}">
                </div>
            `).join('');
            
            updateSizeOptions(variant);
            updatePrices(variantIndex, selectedSize);
            selectedSize = null;
            updateCartButton();
        }

        function selectSize(element, size) {
    if (element.classList.contains('disabled')) {
        showToast('This size is out of stock', 'warning');
        return;
    }
    
    selectedSize = size;
    document.querySelectorAll('.size-option').forEach(btn => 
        btn.classList.remove('active'));
    element.classList.add('active');
    document.getElementById('sizeError').classList.add('d-none');
    
    const variant = productData.variants[currentVariant];
    const sizeVariant = variant.colorVariant.find(cv => cv.size === size);
    
    if (sizeVariant && sizeVariant.stock === 0) {
        updateStockStatus(0);
    } else {
        updateStockStatus(sizeVariant ? sizeVariant.stock : 0);
    }
    
    updatePrices(currentVariant, size);
    updateCartButton();
}

function updateSizeOptions(variant) {
    const sizeOptionsContainer = document.querySelector('.size-options');
    sizeOptionsContainer.innerHTML = variant.colorVariant.map(cv => {
        const isOutOfStock = cv.stock === 0;
        const buttonClass = `size-option ${isOutOfStock ? 'disabled' : ''}`;
        const clickHandler = !isOutOfStock ? `onclick="selectSize(this, '${cv.size}')"` : '';
        
        return `
            <div class="${buttonClass}" 
                 ${clickHandler}
                 data-size="${cv.size}">
                ${cv.size}
                ${isOutOfStock ? '<div><small>Out of Stock</small></div>' : ''}
                ${!isOutOfStock ? `<div><small>(${cv.stock} available)</small></div>` : ''}
            </div>
        `;
    }).join('');
}

        function updateCartButton() {
            const variant = productData.variants[currentVariant];
            const isInCart = localCartVariants.some(v => 
                v.colorName === variant.colorName && 
                v.size === selectedSize
            );
            
            const cartButton = document.getElementById('cartButton');
            if (!cartButton) return;
            
            if (isInCart) {
                cartButton.textContent = 'Go to Cart';
                cartButton.classList.remove('btn-warning');
                cartButton.classList.add('btn-success');
                cartButton.onclick = () => window.location.href = '/cart';
            } else {
                cartButton.textContent = 'Add to Cart';
                cartButton.classList.remove('btn-success');
                cartButton.classList.add('btn-warning');
                cartButton.onclick = addToCart;
            }
        }

        async function addToCart() {
    try {
        if (!selectedSize) {
            document.getElementById('sizeError').classList.remove('d-none');
            showToast('Please select a size first', 'warning');
            return;
        }

        const variant = productData.variants[currentVariant];
        const sizeVariant = variant.colorVariant.find(cv => cv.size === selectedSize);

        if (!sizeVariant || sizeVariant.stock < 1) {
            showToast('Selected size is out of stock', 'error');
            return;
        }

        const basePrice = sizeVariant.price;
        const discountedPrice = productData.productOffer ? 
            basePrice * (1 - productData.productOffer/100) : basePrice;

        const response = await fetch('/addToCart', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                productId: productData._id,
                colorName: variant.colorName,
                size: selectedSize,
                quantity: 1,
                price: discountedPrice
            })
        });

        const data = await response.json();

        if (data.success) {
            localCartVariants.push({
                colorName: variant.colorName,
                size: selectedSize,
                quantity: 1
            });
            
            // Update stock display
            sizeVariant.stock -= 1;
            updateStockStatus(sizeVariant.stock);
            updateCartButton();
            
            showToast('Added to Cart!', 'success');

            if (data.cartCount && document.getElementById('cartCount')) {
                document.getElementById('cartCount').textContent = data.cartCount;
            }
        } else {
            throw new Error(data.message || 'Failed to add to cart');
        }
    } catch (error) {
        console.error('Add to cart error:', error);
        showToast(error.message || 'Error adding to cart', 'error');
    }
}

async function toggleWishlist(productId) {
    try {
        const response = await fetch('/toggleWishlist', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // Update all wishlist buttons for this product
            const allWishlistBtns = document.querySelectorAll(`[data-wishlist-id="${productId}"]`);
            
            allWishlistBtns.forEach(wishlistBtn => {
                // Check if this is a similar product button or main product button
                const isSimilarProduct = wishlistBtn.classList.contains('wishlist-btn');
                const icon = wishlistBtn.querySelector('i');
                
                if (data.isInWishlist) {
                    icon.classList.remove('fa-regular');
                    icon.classList.add('fa-solid');
                    wishlistBtn.classList.add('wishlisted');
                    
                    // Handle main product button
                    if (!isSimilarProduct) {
                        const textSpan = wishlistBtn.querySelector('.wishlist-text');
                        if (textSpan) {
                            textSpan.textContent = 'Wishlisted';
                        }
                    }
                } else {
                    icon.classList.remove('fa-solid');
                    icon.classList.add('fa-regular');
                    wishlistBtn.classList.remove('wishlisted');
                    
                    // Handle main product button
                    if (!isSimilarProduct) {
                        const textSpan = wishlistBtn.querySelector('.wishlist-text');
                        if (textSpan) {
                            textSpan.textContent = 'Wishlist';
                        }
                    }
                }
            });
            
            // Show appropriate toast message
            showToast(
                data.isInWishlist ? 'Added to wishlist!' : 'Removed from wishlist!',
                data.isInWishlist ? 'success' : 'info'
            );
            
            // Update wishlist count in header if it exists
            if (data.wishlistCount !== undefined && document.getElementById('wishlistCount')) {
                document.getElementById('wishlistCount').textContent = data.wishlistCount;
            }
        } else {
            if (response.status === 401) {
                Swal.fire({
                    title: 'Login Required',
                    text: 'Please login to add items to your wishlist',
                    icon: 'info',
                    showCancelButton: true,
                    confirmButtonText: 'Login',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/login';
                    }
                });
            } else {
                throw new Error(data.message || 'Failed to update wishlist');
            }
        }
    } catch (error) {
        console.error('Wishlist error:', error);
        showToast('Something went wrong. Please try again.', 'error');
    }
}

// Additional CSS for better button styling
const styleSheet = document.createElement('style');
styleSheet.textContent = `
    /* Main product wishlist button */
    .btn-custom.wishlist-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        background-color: white;
        border: 2px solid var(--primary-color);
        color: var(--primary-color);
        transition: all 0.3s ease;
        padding: 15px 30px;
        border-radius: 30px;
    }

    .btn-custom.wishlist-btn:hover,
    .btn-custom.wishlist-btn.wishlisted {
        background-color: var(--primary-color);
        color: white;
    }

    /* Similar products wishlist button */
    .similar-product-card .wishlist-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 50%;
        width: 35px;
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        z-index: 2;
        transition: all 0.3s ease;
        border: none;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .similar-product-card .wishlist-btn i {
        color: var(--primary-color);
        font-size: 1.2rem;
    }

    .similar-product-card .wishlist-btn.wishlisted {
        background-color: var(--primary-color);
    }

    .similar-product-card .wishlist-btn.wishlisted i {
        color: white;
    }

    .similar-product-card .wishlist-btn:hover {
        transform: scale(1.1);
    }
`;
document.head.appendChild(styleSheet);


        function showSizeGuide() {
            Swal.fire({
                title: 'Size Guide',
                html: `
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Size</th>
                                    <th>Chest (in)</th>
                                    <th>Waist (in)</th>
                                    <th>Hip (in)</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>XS</td>
                                    <td>32-34</td>
                                    <td>26-28</td>
                                    <td>34-36</td>
                                </tr>
                                <tr>
                                    <td>S</td>
                                    <td>34-36</td>
                                    <td>28-30</td>
                                    <td>36-38</td>
                                </tr>
                                <tr>
                                    <td>M</td>
                                    <td>36-38</td>
                                    <td>30-32</td>
                                    <td>38-40</td>
                                </tr>
                                <tr>
                                    <td>L</td>
                                    <td>38-40</td>
                                    <td>32-34</td>
                                    <td>40-42</td>
                                </tr>
                                <tr>
                                    <td>XL</td>
                                    <td>40-42</td>
                                    <td>34-36</td>
                                    <td>42-44</td>
                                </tr>
                                <tr>
                                    <td>XXL</td>
                                    <td>42-44</td>
                                    <td>36-38</td>
                                    <td>44-46</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                `,
                width: '600px',
                showCloseButton: true,
                showConfirmButton: false
            });
        }

        function initializeZoom() {
            const mainContainer = document.querySelector('.main-image-container');
            const mainImage = document.getElementById('mainImage');
            const zoomLens = document.querySelector('.zoom-lens');
            let isZoomed = false;
            let currentScale = 1;
            const maxScale = 4;

            function updateZoom(e) {
                if (!isZoomed) return;

                const rect = mainContainer.getBoundingClientRect();
                const x = (e.clientX - rect.left) / rect.width;
                const y = (e.clientY - rect.top) / rect.height;

                mainImage.style.transformOrigin = `${x * 100}% ${y * 100}%`;
                mainImage.style.transform = `scale(${currentScale})`;
            }

            function handleZoomClick(e) {
                isZoomed = !isZoomed;
                mainContainer.style.cursor = isZoomed ? 'zoom-out' : 'zoom-in';

                if (isZoomed) {
                    currentScale = 2;
                    updateZoom(e);
                } else {
                    currentScale = 1;
                    mainImage.style.transform = 'scale(1)';
                }
            }

            function handleMouseWheel(e) {
                if (!isZoomed) return;
                
                e.preventDefault();
                const delta = Math.sign(-e.deltaY) * 0.5;
                const newScale = Math.min(Math.max(1, currentScale + delta), maxScale);
                
                if (newScale !== currentScale) {
                    currentScale = newScale;
                    updateZoom(e);
                }
            }

            if (mainContainer && mainImage) {
                mainContainer.addEventListener('click', handleZoomClick);
                mainContainer.addEventListener('mousemove', updateZoom);
                mainContainer.addEventListener('wheel', handleMouseWheel, { passive: false });
                
                mainContainer.addEventListener('mouseleave', () => {
                    if (isZoomed) {
                        mainImage.style.transformOrigin = 'center center';
                    }
                });
            }
        }
        // Initialize the page
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize price
            updatePrices(currentVariant);
            
            // Initialize stock status
            const initialVariant = productData.variants[0].colorVariant[0];
            updateStockStatus(initialVariant.stock);
            
            // Check if there's a pre-selected color and size in cart
            if (localCartVariants.length > 0) {
                const firstCartItem = localCartVariants[0];
                
                // Find and select the color
                const colorOption = document.querySelector(
                    `.color-option[data-color-name="${firstCartItem.colorName}"]`
                );
                if (colorOption) {
                    const index = Array.from(
                        document.querySelectorAll('.color-option')
                    ).indexOf(colorOption);
                    selectColor(colorOption, firstCartItem.colorName, index);
                }
                
                // Find and select the size
                setTimeout(() => {
                    const sizeOption = document.querySelector(
                        `.size-option[data-size="${firstCartItem.size}"]`
                    );
                    if (sizeOption && !sizeOption.classList.contains('disabled')) {
                        selectSize(sizeOption, firstCartItem.size);
                    }
                }, 100);
            }

            // Initialize zoom effect
            initializeZoom();
        });
    </script>
</body>
</html>