<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.7.32/sweetalert2.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.7.32/sweetalert2.min.js"></script>
    <title>Forgot Password - OTP Verification</title>
    
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
            font-size: 24px;
        }

        .description {
            text-align: center;
            color: #666;
            margin-bottom: 30px;
            font-size: 14px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            color: #333;
            font-size: 14px;
        }

        input {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        input:focus {
            outline: none;
            border-color: #4A90E2;
            box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.2);
        }

        .otp-inputs {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-bottom: 20px;
        }

        .otp-inputs input {
            width: 50px;
            height: 50px;
            text-align: center;
            font-size: 24px;
            padding: 0;
        }

        button {
            width: 100%;
            padding: 12px;
            background-color: #4A90E2;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            transition: background-color 0.3s ease;
        }

        button:hover {
            background-color: #357ABD;
        }

        button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        #emailForm, #otpForm, #newPasswordForm {
            display: none;
        }

        #emailForm.active, #otpForm.active, #newPasswordForm.active {
            display: block;
        }

        .resend-otp {
            text-align: center;
            margin-top: 15px;
        }

        .resend-otp button {
            background: none;
            border: none;
            color: #4A90E2;
            cursor: pointer;
            padding: 5px;
            font-size: 14px;
            width: auto;
        }

        .resend-otp button:disabled {
            color: #666;
            cursor: not-allowed;
        }

        #countdown {
            color: #666;
            font-size: 14px;
        }

        .back-to-login {
            text-align: center;
            margin-top: 20px;
        }

        .back-to-login a {
            color: #4A90E2;
            text-decoration: none;
            font-size: 14px;
        }

        .back-to-login a:hover {
            text-decoration: underline;
        }

        /* New styles for password validation and visibility */
        .password-wrapper {
            position: relative;
        }

        .toggle-password {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            border: none;
            background: none;
            cursor: pointer;
            padding: 5px;
            color: #666;
            width: auto;
        }

        .password-requirements {
            margin-top: 8px;
            font-size: 12px;
            color: #666;
        }

        .requirement {
            margin-bottom: 4px;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .requirement.valid {
            color: #28a745;
        }

        .requirement.invalid {
            color: #dc3545;
        }

        .requirement.valid::before {
            content: '‚úì';
            color: #28a745;
        }

        .requirement.invalid::before {
            content: '√ó';
            color: #dc3545;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Email Form -->
        <div id="emailForm" class="active">
            <h1>Forgot Password</h1>
            <p class="description">Enter your email address to receive an OTP</p>
            
            <form onsubmit="return handleEmailSubmit(event)">
                <div class="form-group">
                    <label for="email">Email Address</label>
                    <input 
                        type="email" 
                        id="email" 
                        required 
                        placeholder="Enter your email"
                    >
                </div>
                <button type="submit" id="emailSubmitBtn">Send OTP</button>
            </form>
            <div class="back-to-login">
                <a href="/login">Back to Login</a>
            </div>
        </div>

        <!-- OTP Verification Form -->
        <div id="otpForm">
            <h1>Enter OTP</h1>
            <p class="description">Enter the 6-digit code sent to your email</p>
            
            <form onsubmit="return handleOtpSubmit(event)">
                <div class="otp-inputs">
                    <input type="text" maxlength="1" onkeyup="moveToNext(this, 0)" required>
                    <input type="text" maxlength="1" onkeyup="moveToNext(this, 1)" required>
                    <input type="text" maxlength="1" onkeyup="moveToNext(this, 2)" required>
                    <input type="text" maxlength="1" onkeyup="moveToNext(this, 3)" required>
                    <input type="text" maxlength="1" onkeyup="moveToNext(this, 4)" required>
                    <input type="text" maxlength="1" onkeyup="moveToNext(this, 5)" required>
                </div>
                <button type="submit" id="otpSubmitBtn">Verify OTP</button>
                <div class="resend-otp">
                    <span id="countdown"></span>
                    <button type="button" id="resendBtn" onclick="resendOTP()" disabled>Resend OTP</button>
                </div>
            </form>
        </div>

        <!-- New Password Form -->
        <div id="newPasswordForm">
            <h1>Set New Password</h1>
            <p class="description">Create a new password for your account</p>
            
            <form onsubmit="return handlePasswordSubmit(event)">
                <div class="form-group">
                    <label for="newPassword">New Password</label>
                    <div class="password-wrapper">
                        <input 
                            type="password" 
                            id="newPassword" 
                            required 
                            minlength="8"
                            placeholder="Enter new password"
                            oninput="validatePassword(this.value)"
                        >
                        <button type="button" class="toggle-password" onclick="togglePassword('newPassword', this)">
                            üëÅÔ∏è
                        </button>
                    </div>
                    <div class="password-requirements">
                        <div class="requirement" id="length">Minimum 8 characters</div>
                        <div class="requirement" id="uppercase">At least one uppercase letter</div>
                        <div class="requirement" id="lowercase">At least one lowercase letter</div>
                        <div class="requirement" id="number">At least one number</div>
                        <div class="requirement" id="special">At least one special character</div>
                    </div>
                </div>
                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <div class="password-wrapper">
                        <input 
                            type="password" 
                            id="confirmPassword" 
                            required 
                            placeholder="Confirm new password"
                            oninput="validatePasswordMatch()"
                        >
                        <button type="button" class="toggle-password" onclick="togglePassword('confirmPassword', this)">
                            üëÅÔ∏è
                        </button>
                    </div>
                    <div class="password-requirements">
                        <div class="requirement" id="match">Passwords match</div>
                    </div>
                </div>
                <button type="submit" id="passwordSubmitBtn">Reset Password</button>
            </form>
        </div>
    </div>

    <script>
        let userEmail = '';
        let resendTimer = 30;
        let timerInterval;

        function showForm(formId) {
            document.getElementById('emailForm').classList.remove('active');
            document.getElementById('otpForm').classList.remove('active');
            document.getElementById('newPasswordForm').classList.remove('active');
            document.getElementById(formId).classList.add('active');
        }

        async function handleEmailSubmit(event) {
            event.preventDefault();
            const email = document.getElementById('email').value;

            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Email',
                    text: 'Please enter a valid email address',
                    confirmButtonColor: '#4A90E2'
                });
                return false;
            }

            try {
                Swal.fire({
                    title: 'Sending OTP',
                    text: 'Please wait...',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                const response = await fetch('/forgot-password', {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ email })
                });

                const data = await response.json();

                if (data.success) {
                    userEmail = email;
                    await Swal.fire({
                        icon: 'success',
                        title: 'OTP Sent!',
                        text: 'Please check your email for the OTP',
                        confirmButtonColor: '#4A90E2'
                    });
                    showForm('otpForm');
                    startResendTimer();
                } else {
                    throw new Error(data.message || 'Failed to send OTP');
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Something went wrong. Please try again.',
                    confirmButtonColor: '#4A90E2'
                });
            }
        }

        async function handleOtpSubmit(event) {
            event.preventDefault();
            const otpInputs = document.querySelectorAll('.otp-inputs input');
            const otp = Array.from(otpInputs).map(input => input.value).join('');

            if (otp.length !== 6) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid OTP',
                    text: 'Please enter a valid 6-digit OTP',
                    confirmButtonColor: '#4A90E2'
                });
                return false;
            }

            try {
                Swal.fire({
                    title: 'Verifying OTP',
                    text: 'Please wait...',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                const response = await fetch('/verify-forgot-password-otp', {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ email: userEmail, otp })
                });

                const data = await response.json();

                if (data.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'OTP Verified!',
                        text: 'Please set your new password',
                        confirmButtonColor: '#4A90E2'
                    });
                    showForm('newPasswordForm');
                } else {
                    throw new Error(data.message || 'Invalid OTP');
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Something went wrong. Please try again.',
                    confirmButtonColor: '#4A90E2'
                });
            }
        }

        function validatePassword(password) {
            const requirements = {
                length: password.length >= 8,
                uppercase: /[A-Z]/.test(password),
                lowercase: /[a-z]/.test(password),
                number: /[0-9]/.test(password),
                special: /[!@#$%^&*(),.?":{}|<>]/.test(password)
            };

            for (const [requirement, isValid] of Object.entries(requirements)) {
                const element = document.getElementById(requirement);
                element.classList.toggle('valid', isValid);
                element.classList.toggle('invalid', !isValid);
            }

            return Object.values(requirements).every(Boolean);
        }

        function validatePasswordMatch() {
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            const matchElement = document.getElementById('match');
            const isValid = newPassword === confirmPassword && confirmPassword !== '';
            matchElement.classList.toggle('valid', isValid);
            matchElement.classList.toggle('invalid', !isValid);
            return isValid;
        }

        function togglePassword(inputId, button) {
            const input = document.getElementById(inputId);
            const type = input.type === 'password' ? 'text' : 'password';
            input.type = type;
            button.textContent = type === 'password' ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è';
        }

        async function handlePasswordSubmit(event) {
    event.preventDefault();
    const newPassword = document.getElementById('newPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;

    if (!validatePassword(newPassword)) {
        Swal.fire({
            icon: 'error',
            title: 'Invalid Password',
            text: 'Please meet all password requirements',
            confirmButtonColor: '#4A90E2'
        });
        return false;
    }

    if (!validatePasswordMatch()) {
        Swal.fire({
            icon: 'error',
            title: 'Password Mismatch',
            text: 'Passwords do not match',
            confirmButtonColor: '#4A90E2'
        });
        return false;
    }
    

    try {
        Swal.fire({
            title: 'Resetting Password',
            text: 'Please wait...',
            allowOutsideClick: false,
            showConfirmButton: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        const response = await fetch('/reset-password', {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ 
                email: userEmail,
                newPassword, 
                confirmPassword 
            })
        });

        const data = await response.json();

        if (data.success) {
            await Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Password reset successfully!',
                confirmButtonColor: '#4A90E2'
            });
            window.location.href = '/login';
        } else {
            throw new Error(data.message || 'Failed to reset password');
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Something went wrong. Please try again.',
            confirmButtonColor: '#4A90E2'
        });
    }
}

        function moveToNext(input, index) {
            input.value = input.value.replace(/[^0-9]/g, '');
            
            const inputs = document.querySelectorAll('.otp-inputs input');
            
            if (input.value && index < inputs.length - 1) {
                inputs[index + 1].focus();
            }
            
            if (!input.value && index > 0) {
                inputs[index - 1].focus();
            }
        }

        function startResendTimer() {
            const resendBtn = document.getElementById('resendBtn');
            const countdown = document.getElementById('countdown');
            resendTimer = 30;
            resendBtn.disabled = true;
            
            clearInterval(timerInterval);
            timerInterval = setInterval(() => {
                resendTimer--;
                countdown.textContent = `Resend OTP in ${resendTimer}s`;
                
                if (resendTimer <= 0) {
                    clearInterval(timerInterval);
                    countdown.textContent = '';
                    resendBtn.disabled = false;
                }
            }, 1000);
        }

        async function resendOTP() {
            try {
                Swal.fire({
                    title: 'Resending OTP',
                    text: 'Please wait...',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                const response = await fetch('/resend-forgot-password-otp', {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ email: userEmail })
                });

                const data = await response.json();

                if (data.success) {
                    // Clear existing OTP inputs
                    document.querySelectorAll('.otp-inputs input').forEach(input => input.value = '');
                    
                    await Swal.fire({
                        icon: 'success',
                        title: 'OTP Resent!',
                        text: 'Please check your email for the new OTP',
                        confirmButtonColor: '#4A90E2'
                    });
                    
                    startResendTimer();
                } else {
                    throw new Error(data.message || 'Failed to resend OTP');
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Something went wrong. Please try again.',
                    confirmButtonColor: '#4A90E2'
                });
            }
        }

        // Handle backspace key in OTP inputs
        document.querySelectorAll('.otp-inputs input').forEach((input, index) => {
            input.addEventListener('keydown', (e) => {
                if (e.key === 'Backspace' && !input.value && index > 0) {
                    const inputs = document.querySelectorAll('.otp-inputs input');
                    inputs[index - 1].focus();
                }
            });
        });

        // Handle paste event for OTP
        document.querySelector('.otp-inputs').addEventListener('paste', (e) => {
            e.preventDefault();
            const paste = (e.clipboardData || window.clipboardData).getData('text');
            const inputs = document.querySelectorAll('.otp-inputs input');
            
            if (/^\d{6}$/.test(paste)) {
                inputs.forEach((input, i) => {
                    input.value = paste[i] || '';
                });
            }
        });

        // Clear all forms on page load
        window.addEventListener('load', () => {
            document.getElementById('email').value = '';
            document.querySelectorAll('.otp-inputs input').forEach(input => input.value = '');
            document.getElementById('newPassword').value = '';
            document.getElementById('confirmPassword').value = '';
            showForm('emailForm');
        });

    </script>
</body>
</html>