<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details - <%= order.orderNumber %></title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #1a73e8;
            --secondary-color: #6c757d;
            --success-color: #28a745;
            --warning-color: #ffc107;
            --danger-color: #dc3545;
            --light-gray: #f8f9fa;
            --border-color: #eee;
            --text-primary: #333;
            --text-secondary: #666;
            --shadow: 0 2px 10px rgba(0,0,0,0.1);
            --border-radius: 12px;
            --spacing-sm: 0.5rem;
            --spacing-md: 1rem;
            --spacing-lg: 2rem;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        }

        body {
            background-color: #f5f5f5;
            color: var(--text-primary);
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 3rem auto;
            padding: 0 var(--spacing-lg);
        }

        .card {
            background: white;
            border-radius: var(--border-radius);
            padding: var(--spacing-lg);
            margin-bottom: var(--spacing-lg);
            box-shadow: var(--shadow);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.15);
        }

        .order-header {
            position: relative;
        }

        .order-title {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--spacing-lg);
            padding-bottom: var(--spacing-md);
            border-bottom: 1px solid var(--border-color);
        }

        .order-id {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--primary-color);
        }

        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: var(--spacing-md);
            margin-bottom: var(--spacing-lg);
        }

        .status-box {
            background: var(--light-gray);
            padding: var(--spacing-lg);
            border-radius: var(--border-radius);
            text-align: center;
        }

        .status-label {
            font-size: 0.9rem;
            color: var(--text-secondary);
            margin-bottom: var(--spacing-sm);
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-value {
            font-size: 1.1rem;
            font-weight: 600;
        }

        .status-value.pending { color: var(--warning-color); }
        .status-value.confirmed { color: var(--success-color); }
        .status-value.cancelled { color: var(--danger-color); }

        .product-list {
            margin: var(--spacing-lg) 0;
        }

        .product-item {
            display: grid;
            grid-template-columns: 120px 2fr 1fr;
            gap: var(--spacing-lg);
            padding: var(--spacing-lg);
            border-bottom: 1px solid var(--border-color);
            transition: background-color 0.2s ease;
        }

        .product-image {
            width: 120px;
            height: 120px;
            object-fit: cover;
            border-radius: 8px;
            box-shadow: var(--shadow);
        }

        .product-info {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-sm);
        }

        .product-name {
            font-weight: 600;
            color: var(--text-primary);
            font-size: 1.1rem;
        }

        .product-meta {
            font-size: 0.9rem;
            color: var(--text-secondary);
        }

        .product-price {
            text-align: right;
            font-weight: 600;
            font-size: 1.1rem;
        }

        .product-actions {
            margin-top: var(--spacing-md);
            display: flex;
            gap: var(--spacing-sm);
        }

        .status-badge {
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius);
            font-size: 0.9rem;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .status-badge.cancelled {
            background-color: var(--danger-color);
            color: white;
        }

        .status-badge.returned {
            background-color: var(--warning-color);
            color: var(--text-primary);
        }

        .price-details {
            background: var(--light-gray);
            padding: var(--spacing-lg);
            border-radius: var(--border-radius);
            margin-top: var(--spacing-lg);
        }

        .price-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: var(--spacing-sm);
            padding: var(--spacing-sm) 0;
        }

        .price-row.total {
            font-weight: 600;
            color: var(--primary-color);
            font-size: 1.2rem;
            border-top: 2px solid var(--border-color);
            padding-top: var(--spacing-md);
            margin-top: var(--spacing-md);
        }

        .address-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: var(--spacing-lg);
            margin-top: var(--spacing-lg);
        }

        .timeline {
            margin-top: var(--spacing-lg);
            padding-left: var(--spacing-lg);
        }

        .timeline-item {
            position: relative;
            padding: var(--spacing-md) 0;
            padding-left: var(--spacing-lg);
            border-left: 2px solid var(--border-color);
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            border: none;
            font-weight: 500;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.2s ease;
            text-decoration: none;
        }

        .btn-sm {
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
        }

        .btn-danger {
            background-color: var(--danger-color);
            color: white;
        }

        .btn-warning {
            background-color: var(--warning-color);
            color: var(--text-primary);
        }

        .modal-content {
            border-radius: var(--border-radius);
        }

        @media (max-width: 768px) {
            .container {
                padding: 0 var(--spacing-md);
            }

            .product-item {
                grid-template-columns: 80px 1fr;
            }

            .product-image {
                width: 80px;
                height: 80px;
            }

            .product-price {
                grid-column: 1 / -1;
                text-align: left;
                margin-top: var(--spacing-sm);
            }
        }
    </style>
</head>
<body>
    <%- include('../partials/user/header') %>
    
    <div class="container">
        <div class="card order-header">
            <div class="order-title">
                <div class="order-id">
                    <i class="fas fa-shopping-bag"></i>
                    Order #<%= order.orderNumber %>
                </div>
                <div class="order-date">
                    <i class="far fa-calendar-alt"></i>
                    <%= new Date(order.createdAt).toLocaleString() %>
                </div>
            </div>

            <div class="status-grid">
                <div class="status-box">
                    <div class="status-label">Order Status</div>
                    <div class="status-value <%= order.orderStatus %>">
                        <%= order.orderStatus.charAt(0).toUpperCase() + order.orderStatus.slice(1) %>
                    </div>
                </div>
                <div class="status-box">
                    <div class="status-label">Payment Method</div>
                    <div class="status-value">
                        <%= {
                            'cod': 'Cash on Delivery',
                            'razorpay': 'Online Payment',
                            'wallet': 'Wallet'
                        }[order.paymentMethod] %>
                    </div>
                </div>
                <div class="status-box">
                    <div class="status-label">Payment Status</div>
                    <div class="status-value <%= order.paymentStatus %>">
                        <%= order.paymentStatus.charAt(0).toUpperCase() + order.paymentStatus.slice(1) %>
                    </div>
                </div>
            </div>
        </div>

        <div class="card">
            <h2>Products Ordered</h2>
           <!-- Replace the product item section with this corrected version -->
           <div class="product-list">
            <% order.items.forEach(item => { %>
                <div class="product-item">
                    <img src="<%= item.productImage %>" alt="<%= item.productName %>" class="product-image">
                    <div class="product-info">
                        <div class="product-name"><%= item.productName %></div>
                        <div class="product-meta">
                            Size: <%= item.selectedSize %> | 
                            Color: <%= item.selectedColor.colorName %>
                        </div>
                        <div class="product-meta">
                            Quantity: <%= item.quantity %> × ₹<%= item.price.toFixed(2) %>
                        </div>
                        
                        <!-- Item Status Display -->
                        <% if (item.status === 'cancelled') { %>
                            <div class="status-badge cancelled">
                                <i class="fas fa-times-circle"></i> Cancelled
                                <% if (item.cancellationDetails?.reason) { %>
                                    - <%= item.cancellationDetails.reason %>
                                <% } %>
                            </div>
                        <% } else if (item.status === 'returned') { %>
                            <div class="status-badge returned">
                                <i class="fas fa-undo"></i> Returned
                                <% if (item.returnDetails?.reason) { %>
                                    - <%= item.returnDetails.reason %>
                                <% } %>
                            </div>
                        <% } else { %>
                            <div class="product-actions">
                                <% if (itemHelpers.canBeCancelled(item)) { %>
                                    <button type="button" 
                                        onclick="showCancelItemModal('<%= order.orderId %>', '<%= item._id %>')"
                                        class="btn btn-sm btn-danger">
                                        <i class="fas fa-times"></i> Cancel Item
                                    </button>
                                <% } %>
                                <% if (itemHelpers.canBeReturned(item)) { %>
                                    <button type="button"
                                        onclick="showReturnItemModal('<%= order.orderId %>', '<%= item._id %>')"
                                        class="btn btn-sm btn-warning">
                                        <i class="fas fa-undo"></i> Return Item
                                    </button>
                                <% } %>
                            </div>
                        <% } %>
                    </div>
                    <div class="product-price">
                        ₹<%= item.itemTotal.toFixed(2) %>
                        <% if (item.appliedProductOffer || item.appliedCategoryOffer) { %>
                            <div class="original-price">₹<%= (item.price * item.quantity).toFixed(2) %></div>
                        <% } %>
                    </div>
                </div>
            <% }); %>
        </div>

            <div class="price-details">
                <div class="price-row">
                    <span>Subtotal</span>
                    <span>₹<%= order.totalAmount.toFixed(2) %></span>
                </div>
                <% if (order.totalDiscount > 0) { %>
                    <div class="price-row">
                        <span>Discount</span>
                        <span>-₹<%= order.totalDiscount.toFixed(2) %></span>
                    </div>
                <% } %>
                <div class="price-row">
                    <span>Shipping</span>
                    <span>₹<%= order.shippingFee.toFixed(2) %></span>
                </div>
                <% if (order.walletDetails?.debitedAmount > 0) { %>
                    <div class="price-row">
                        <span>Paid from Wallet</span>
                        <span>₹<%= order.walletDetails.debitedAmount.toFixed(2) %></span>
                    </div>
                <% } %>
                <div class="price-row total">
                    <span>Total</span>
                    <span>₹<%= order.finalAmount.toFixed(2) %></span>
                </div>
            </div>
        </div>

        <div class="card">
            <h2>Shipping Information</h2>
            <div class="address-grid">
                <div class="status-box">
                    <div class="status-label">Delivery Address</div>
                    <div>
                        <%= order.shippingAddress.fullName %><br>
                        <%= order.shippingAddress.streetAddress %><br>
                        <%= order.shippingAddress.city %>, <%= order.shippingAddress.state %><br>
                        <%= order.shippingAddress.pincode %><br>
                        Phone: <%= order.shippingAddress.phoneNumber %>
                    </div>
                </div><% if (order.trackingDetails && order.trackingDetails.trackingNumber) { %>
                    <div class="status-box">
                        <div class="status-label">Tracking Information</div>
                        <div>
                            <strong>Courier:</strong> <%= order.trackingDetails.courier %><br>
                            <strong>Tracking Number:</strong> <%= order.trackingDetails.trackingNumber %><br>
                            <% if (order.trackingDetails.trackingUrl) { %>
                                <a href="<%= order.trackingDetails.trackingUrl %>" 
                                   target="_blank" 
                                   class="btn btn-primary mt-3">
                                    <i class="fas fa-external-link-alt"></i> Track Package
                                </a>
                            <% } %>
                        </div>
                    </div>
                <% } %>
            </div>

            <% if (order.statusHistory && order.statusHistory.length > 0) { %>
                <div class="mt-5">
                    <h3>Order Timeline</h3>
                    <div class="timeline">
                        <% order.statusHistory.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
                            .forEach(status => { %>
                            <div class="timeline-item">
                                <div class="text-secondary">
                                    <i class="far fa-clock"></i>
                                    <%= new Date(status.timestamp).toLocaleString() %>
                                </div>
                                <div class="fw-bold">
                                    <%= status.status.charAt(0).toUpperCase() + status.status.slice(1) %>
                                </div>
                                <% if (status.comment) { %>
                                    <div><%= status.comment %></div>
                                <% } %>
                            </div>
                        <% }); %>
                    </div>
                </div>
            <% } %>
        </div>

        <!-- Cancellation Modal -->
        <div class="modal fade" id="cancelItemModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Cancel Item</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <form id="cancelItemForm" method="POST">
                        <div class="modal-body">
                            <div class="mb-3">
                                <label for="cancelReason" class="form-label">Reason for Cancellation</label>
                                <select class="form-select" id="cancelReason" name="reason" required>
                                    <option value="">Select a reason</option>
                                    <option value="Changed mind">Changed my mind</option>
                                    <option value="Found better price">Found better price elsewhere</option>
                                    <option value="Ordered wrong item">Ordered wrong item</option>
                                    <option value="Delivery time too long">Delivery time too long</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div id="otherReasonDiv" class="mb-3" style="display: none;">
                                <label for="otherReason" class="form-label">Specify Other Reason</label>
                                <textarea class="form-control" id="otherReason" name="otherReason" rows="3"></textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-danger">Confirm Cancellation</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Return Modal -->
        <div class="modal fade" id="returnItemModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Return Item</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <form id="returnItemForm" method="POST">
                        <div class="modal-body">
                            <div class="mb-3">
                                <label for="returnReason" class="form-label">Reason for Return</label>
                                <select class="form-select" id="returnReason" name="reason" required>
                                    <option value="">Select a reason</option>
                                    <option value="Wrong size">Wrong size</option>
                                    <option value="Wrong color">Wrong color</option>
                                    <option value="Damaged product">Damaged product</option>
                                    <option value="Quality issues">Quality issues</option>
                                    <option value="Product different from description">Product different from description</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div id="returnOtherReasonDiv" class="mb-3" style="display: none;">
                                <label for="returnOtherReason" class="form-label">Specify Other Reason</label>
                                <textarea class="form-control" id="returnOtherReason" name="returnOtherReason" rows="3"></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="returnCondition" class="form-label">Product Condition</label>
                                <select class="form-select" id="returnCondition" name="condition" required>
                                    <option value="">Select condition</option>
                                    <option value="unopened">Unopened</option>
                                    <option value="opened_unused">Opened but unused</option>
                                    <option value="used">Used</option>
                                    <option value="damaged">Damaged</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="returnComments" class="form-label">Additional Comments</label>
                                <textarea class="form-control" id="returnComments" name="comments" rows="3"></textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-warning">Submit Return Request</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <%- include('../partials/user/footer') %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Handle showing/hiding other reason fields
        document.getElementById('cancelReason').addEventListener('change', function() {
            const otherReasonDiv = document.getElementById('otherReasonDiv');
            otherReasonDiv.style.display = this.value === 'Other' ? 'block' : 'none';
        });

        document.getElementById('returnReason').addEventListener('change', function() {
            const otherReasonDiv = document.getElementById('returnOtherReasonDiv');
            otherReasonDiv.style.display = this.value === 'Other' ? 'block' : 'none';
        });

        // Modal handlers
        function showCancelItemModal(orderId, itemId) {
            const modal = document.getElementById('cancelItemModal');
            const form = document.getElementById('cancelItemForm');
            form.action = `/orders/${orderId}/items/${itemId}/cancel`;
            const bsModal = new bootstrap.Modal(modal);
            bsModal.show();
        }

        function showReturnItemModal(orderId, itemId) {
            const modal = document.getElementById('returnItemModal');
            const form = document.getElementById('returnItemForm');
            form.action = `/orders/${orderId}/items/${itemId}/return`;
            const bsModal = new bootstrap.Modal(modal);
            bsModal.show();
        }

        // Form submission handlers
        document.getElementById('cancelItemForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const reason = formData.get('reason');
    const otherReason = formData.get('otherReason');
    
    if (!reason) {
        alert('Please select a reason for cancellation');
        return;
    }

    const finalReason = reason === 'Other' ? otherReason : reason;
    if (reason === 'Other' && !otherReason?.trim()) {
        alert('Please specify the reason for cancellation');
        return;
    }

    const confirmCancel = confirm(
        'Are you sure you want to cancel this item?\n\n' +
        'Reason: ' + finalReason + '\n\n' +
        'This action cannot be undone.'
    );

    if (!confirmCancel) {
        return;
    }

    try {
        const response = await fetch(this.action, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                reason: finalReason
            })
        });

        let data;
        try {
            data = await response.json();
        } catch (e) {
            console.error('Error parsing JSON response:', e);
            throw new Error('Invalid server response');
        }

        if (!response.ok) {
            throw new Error(data.message || 'Error cancelling item');
        }

        // Close the modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('cancelItemModal'));
        if (modal) {
            modal.hide();
        }
        
        // Show success message and reload
        alert(data.message || 'Item cancelled successfully');
        window.location.reload();

    } catch (error) {
        console.error('Error:', error);
        alert(error.message || 'Error processing your request');
    }
});

        document.getElementById('returnItemForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            if (!confirm('Are you sure you want to return this item?')) {
                return;
            }

            const formData = new FormData(this);
            const returnData = {
                reason: formData.get('reason') === 'Other' ? 
                    formData.get('returnOtherReason') : 
                    formData.get('reason'),
                condition: formData.get('condition'),
                comments: formData.get('comments')
            };

            try {
                const response = await fetch(this.action, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(returnData)
                });

                if (response.ok) {
                    window.location.reload();
                } else {
                    const data = await response.json();
                    alert(data.message || 'Error processing return request');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error processing your request');
            }
        });
    </script>
</body>
</html>