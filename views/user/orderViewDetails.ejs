<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details - <%= order.orderNumber %></title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #1a73e8;
            --secondary-color: #6c757d;
            --success-color: #28a745;
            --warning-color: #ffc107;
            --danger-color: #dc3545;
            --light-gray: #f8f9fa;
            --border-color: #eee;
            --text-primary: #333;
            --text-secondary: #666;
            --shadow: 0 2px 10px rgba(0,0,0,0.1);
            --border-radius: 12px;
            --spacing-sm: 0.5rem;
            --spacing-md: 1rem;
            --spacing-lg: 2rem;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        }

        body {
            background-color: #f5f5f5;
            color: var(--text-primary);
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 3rem auto;
            padding: 0 var(--spacing-lg);
        }
        /* Payment Retry Styles */
.payment-retry-alert {
    background-color: #fff5f5;
    border: 1px solid #feb2b2;
    border-radius: var(--border-radius);
    padding: var(--spacing-lg);
    margin: var(--spacing-lg) 0;
    transition: all 0.3s ease;
}

.payment-retry-alert:hover {
    box-shadow: 0 4px 12px rgba(229, 62, 62, 0.1);
}

.payment-retry-content {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
}

.payment-retry-icon {
    color: #e53e3e;
    font-size: 1.5rem;
    flex-shrink: 0;
    margin-top: 0.25rem;
}

.payment-retry-message {
    flex-grow: 1;
}

.payment-retry-title {
    color: #c53030;
    font-size: 1.125rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.payment-retry-description {
    color: #742a2a;
    font-size: 0.938rem;
    margin-bottom: 1rem;
}

.payment-retry-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background-color: #e53e3e; /* Base red color */
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 6px;
    font-weight: 500;
    font-size: 1rem; /* Adjusted for better readability */
    transition: all 0.3s ease; /* Slightly longer transition for smoother effect */
    border: none;
    cursor: pointer;
    box-shadow: 0 2px 4px rgba(229, 62, 62, 0.2); /* Subtle shadow */
    text-transform: uppercase; /* Makes it stand out */
    letter-spacing: 0.5px; /* Slight spacing for elegance */
}

.payment-retry-button:hover {
    background-color: #c53030; /* Darker red on hover */
    transform: translateY(-2px); /* More pronounced lift */
    box-shadow: 0 4px 8px rgba(229, 62, 62, 0.3); /* Stronger shadow on hover */
}

.payment-retry-button:active {
    transform: translateY(0); /* Reset position */
    box-shadow: 0 1px 2px rgba(229, 62, 62, 0.2); /* Reduced shadow on click */
    background-color: #b02828; /* Even darker red when clicked */
}

/* Disabled State */
.payment-retry-button:disabled {
    background-color: #e57373; /* Lighter red */
    cursor: not-allowed;
    opacity: 0.7;
    transform: none;
    box-shadow: none;
}

/* Icon Styling */
.payment-retry-button i {
    font-size: 0.875rem;
    transition: transform 0.2s ease; /* Animate icon on hover */
}

.payment-retry-button:hover i {
    transform: rotate(90deg); /* Rotate the redo icon slightly on hover */
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .payment-retry-button {
        padding: 0.625rem 1rem; /* Slightly smaller padding */
        font-size: 0.938rem; /* Slightly smaller text */
        width: 100%; /* Full width on mobile */
        justify-content: center; /* Center content */
    }
}

/* Payment Status Badges */
.payment-status {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.875rem;
    font-weight: 500;
}

.payment-status-failed {
    background-color: #fff5f5;
    color: #e53e3e;
    border: 1px solid #feb2b2;
}

.payment-status-completed {
    background-color: #f0fff4;
    color: #38a169;
    border: 1px solid #9ae6b4;
}

.payment-status-pending {
    background-color: #fffaf0;
    color: #d69e2e;
    border: 1px solid #fbd38d;
}

/* Loading State */
.payment-retry-button.loading {
    position: relative;
    color: transparent;
}

.payment-retry-button.loading::after {
    content: "";
    position: absolute;
    width: 1rem;
    height: 1rem;
    border: 2px solid white;
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 0.8s linear infinite;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
}

@keyframes spin {
    to {
        transform: translate(-50%, -50%) rotate(360deg);
    }
}

/* Razorpay Modal Override Styles */
.razorpay-payment-button {
    display: none !important;
}

.razorpay-container {
    z-index: 1000 !important;
}

/* Responsive Styles */
@media (max-width: 768px) {
    .payment-retry-alert {
        padding: var(--spacing-md);
    }

    .payment-retry-content {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.75rem;
    }

    .payment-retry-icon {
        font-size: 1.25rem;
    }

    .payment-retry-title {
        font-size: 1rem;
    }

    .payment-retry-button {
        width: 100%;
        justify-content: center;
        padding: 0.625rem 1rem;
    }
}

/* Toast Notification Styles */
.payment-toast {
    position: fixed;
    top: 1rem;
    right: 1rem;
    padding: 1rem 1.5rem;
    border-radius: var(--border-radius);
    background: white;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    display: flex;
    align-items: center;
    gap: 0.75rem;
    z-index: 1000;
    animation: slideIn 0.3s ease forwards;
}

.payment-toast.success {
    border-left: 4px solid #38a169;
}

.payment-toast.error {
    border-left: 4px solid #e53e3e;
}

.payment-toast-icon {
    font-size: 1.25rem;
}

.payment-toast.success .payment-toast-icon {
    color: #38a169;
}

.payment-toast.error .payment-toast-icon {
    color: #e53e3e;
}

.payment-toast-content {
    flex-grow: 1;
}

.payment-toast-title {
    font-weight: 600;
    margin-bottom: 0.25rem;
}

.payment-toast-message {
    font-size: 0.875rem;
    color: var(--text-secondary);
}

@keyframes slideIn {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

/* Payment Modal Styles */
.payment-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.payment-modal.active {
    opacity: 1;
    visibility: visible;
}

.payment-modal-content {
    background: white;
    border-radius: var(--border-radius);
    padding: 2rem;
    width: 90%;
    max-width: 500px;
    transform: translateY(20px);
    transition: all 0.3s ease;
}

.payment-modal.active .payment-modal-content {
    transform: translateY(0);
}

.payment-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
}

.payment-modal-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
}

.payment-modal-close {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    font-size: 1.25rem;
    padding: 0.5rem;
    transition: color 0.2s ease;
}

.payment-modal-close:hover {
    color: var(--text-primary);
}

.payment-modal-body {
    margin-bottom: 1.5rem;
}

.payment-amount-section {
    background: var(--light-gray);
    padding: 1rem;
    border-radius: var(--border-radius);
    margin-bottom: 1rem;
}

.payment-amount-label {
    font-size: 0.875rem;
    color: var(--text-secondary);
    margin-bottom: 0.5rem;
}

.payment-amount-value {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--text-primary);
}

/* Summary Section */
.payment-summary {
    background: var(--light-gray);
    padding: var(--spacing-md);
    border-radius: var(--border-radius);
    margin: var(--spacing-md) 0;
}

.summary-row {
    display: flex;
    justify-content: space-between;
    padding: 0.5rem 0;
    border-bottom: 1px solid var(--border-color);
}

.summary-row:last-child {
    border-bottom: none;
}

.summary-label {
    color: var(--text-secondary);
    font-size: 0.875rem;
}

.summary-value {
    font-weight: 500;
}

/* Loading Spinner */
.loading-spinner {
    display: inline-block;
    width: 1.5rem;
    height: 1.5rem;
    border: 2px solid var(--border-color);
    border-radius: 50%;
    border-top-color: var(--primary-color);
    animation: spinner 0.8s linear infinite;
}

@keyframes spinner {
    to {
        transform: rotate(360deg);
    }
}
        .card {
            background: white;
            border-radius: var(--border-radius);
            padding: var(--spacing-lg);
            margin-bottom: var(--spacing-lg);
            box-shadow: var(--shadow);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: var(--spacing-lg);
            padding-bottom: var(--spacing-md);
            border-bottom: 1px solid var(--border-color);
        }

        .order-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--primary-color);
        }

        .order-meta {
            text-align: right;
            color: var(--text-secondary);
        }

        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: var(--spacing-md);
            margin-bottom: var(--spacing-lg);
        }

        .status-box {
            background: var(--light-gray);
            padding: var(--spacing-lg);
            border-radius: var(--border-radius);
            transition: transform 0.2s ease;
        }

        .status-box:hover {
            transform: translateY(-2px);
        }

        .status-label {
            font-size: 0.9rem;
            color: var(--text-secondary);
            margin-bottom: var(--spacing-sm);
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-value {
            font-size: 1.1rem;
            font-weight: 600;
        }

        .status-value.pending { color: var(--warning-color); }
        .status-value.confirmed { color: var(--success-color); }
        .status-value.cancelled { color: var(--danger-color); }
        .status-value.delivered { color: var(--success-color); }
        .status-value.processing { color: var(--primary-color); }

        .tracking-timeline {
            position: relative;
            margin: var(--spacing-lg) 0;
            padding-left: var(--spacing-lg);
        }

        .timeline-item {
            position: relative;
            padding: var(--spacing-md) 0;
            padding-left: var(--spacing-lg);
            border-left: 2px solid var(--border-color);
        }

        .timeline-item::before {
            content: '';
            position: absolute;
            left: -8px;
            top: 50%;
            width: 14px;
            height: 14px;
            background: white;
            border: 2px solid var(--primary-color);
            border-radius: 50%;
            transform: translateY(-50%);
        }

        .timeline-item.active::before {
            background: var(--primary-color);
        }

        .product-list {
            margin: var(--spacing-lg) 0;
        }

        .product-item {
            display: grid;
            grid-template-columns: 120px 2fr 1fr;
            gap: var(--spacing-lg);
            padding: var(--spacing-lg);
            border-bottom: 1px solid var(--border-color);
            transition: background-color 0.2s ease;
        }

        .product-item:hover {
            background-color: var(--light-gray);
        }

        .product-image {
            width: 120px;
            height: 120px;
            object-fit: cover;
            border-radius: 8px;
            box-shadow: var(--shadow);
        }

        .product-info {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-sm);
        }

        .product-name {
            font-weight: 600;
            color: var(--text-primary);
            font-size: 1.1rem;
        }

        .product-meta {
            font-size: 0.9rem;
            color: var(--text-secondary);
        }

        .product-price {
            text-align: right;
            font-weight: 600;
            font-size: 1.1rem;
        }

        .original-price {
            text-decoration: line-through;
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        .product-actions {
            display: flex;
            gap: var(--spacing-sm);
            margin-top: var(--spacing-md);
        }

        .status-badge {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius);
            font-size: 0.9rem;
            font-weight: 500;
        }
        .coupon-applied {
        background-color: rgba(40, 167, 69, 0.1);
        padding: 0.5rem 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
    }

    .coupon-code {
        font-weight: 600;
        color: var(--success-color);
    }
        .status-badge.pending {
            background-color: var(--warning-color);
            color: var(--text-primary);
        }

        .status-badge.cancelled {
            background-color: var(--danger-color);
            color: white;
        }

        .status-badge.returned {
            background-color: var(--secondary-color);
            color: white;
        }

        .return-eligibility-notice {
        font-size: 0.8rem;
        color: var(--warning-color);
        margin-top: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .return-eligibility-notice::before {
        content: '\f017';
        font-family: 'Font Awesome 5 Free';
        font-weight: 400;
    }

        .price-summary {
            background: var(--light-gray);
            padding: var(--spacing-lg);
            border-radius: var(--border-radius);
            margin-top: var(--spacing-lg);
        }

        .price-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: var(--spacing-sm);
            padding: var(--spacing-sm) 0;
        }

        .price-row.total {
            font-weight: 600;
            color: var(--primary-color);
            font-size: 1.2rem;
            border-top: 2px solid var(--border-color);
            padding-top: var(--spacing-md);
            margin-top: var(--spacing-md);
        }

        .shipping-info {
            margin-top: var(--spacing-lg);
        }

        .address-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: var(--spacing-lg);
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            border: none;
            font-weight: 500;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.2s ease;
        }

        .btn-sm {
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-danger {
            background-color: var(--danger-color);
            color: white;
        }

        .btn-warning {
            background-color: var(--warning-color);
            color: var(--text-primary);
        }

        .modal-content {
            border-radius: var(--border-radius);
        }

        .required:after {
            content: " *";
            color: var(--danger-color);
        }

        .return-policy-summary {
            background-color: var(--light-gray);
            padding: var(--spacing-md);
            border-radius: var(--border-radius);
            margin-top: var(--spacing-md);
        }

        .return-policy-summary ul {
            margin: 0.5rem 0 0 1.2rem;
            padding: 0;
        }

        .return-policy-summary li {
            font-size: 0.9rem;
            color: var(--text-secondary);
            margin-bottom: 0.3rem;
        }

        @media (max-width: 768px) {
            .container {
                padding: 0 var(--spacing-md);
            }

            .product-item {
                grid-template-columns: 80px 1fr;
            }

            .product-image {
                width: 80px;
                height: 80px;
            }

            .product-price {
                grid-column: 1 / -1;
                text-align: left;
                margin-top: var(--spacing-sm);
            }

            .status-grid {
                grid-template-columns: 1fr;
            }

            .product-actions {
                flex-direction: column;
            }

            .btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <%- include('../partials/user/header') %>
    
    <div class="container">
        <!-- Order Header -->
        <div class="card">
            <div class="order-header">
                <div>
                    <div class="order-title">
                        <i class="fas fa-shopping-bag"></i>
                        Order #<%= order.orderNumber %>
                    </div>
                    <div class="text-secondary mt-2">
                        <i class="far fa-calendar-alt"></i>
                        Ordered on <%= new Date(order.createdAt).toLocaleDateString('en-US', { 
                            year: 'numeric', 
                            month: 'long', 
                            day: 'numeric' 
                        }) %>
                    </div>
                </div>
                <div class="order-meta">
                    <div class="status-badge <%= order.orderStatus %>">
                        <%= order.orderStatus.charAt(0).toUpperCase() + order.orderStatus.slice(1) %>
                    </div>
                </div>
            </div>
            <% if (order.paymentStatus === 'failed' || order.orderStatus === 'payment_failed') { %>
                <div class="payment-retry-alert bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                    <div class="flex items-start">
                        <i class="fas fa-exclamation-circle text-red-500 text-xl mt-1"></i>
                        <div class="ml-3">
                            <h3 class="text-lg font-semibold text-red-700">Payment Failed</h3>
                            <p class="text-red-600 mt-1">Your payment was unsuccessful. You can retry the payment now.</p>
                            <button onclick="retryPayment('<%= order.orderId %>', <%= order.finalAmount %>)" 
                                class="payment-retry-button">
                                <i class="fas fa-redo mr-2"></i>
                                Retry Payment
                            </button>
                        </div>
                    </div>
                </div>
            <% } %>
            
            <!-- Order Status Grid -->
            <div class="status-grid">
                <div class="status-box">
                    <div class="status-label">Order Status</div>
                    <div class="status-value <%= order.orderStatus %>">
                        <%= order.orderStatus.charAt(0).toUpperCase() + order.orderStatus.slice(1) %>
                    </div>
                </div>
                <div class="status-box">
                    <div class="status-label">Payment Method</div>
                    <div class="status-value">
                        <%= {
                            'cod': 'Cash on Delivery',
                            'razorpay': 'Online Payment',
                            'wallet': 'Wallet'
                        }[order.paymentMethod] %>
                    </div>
                </div>
                <div class="status-box">
                    <div class="status-label">Payment Status</div>
                    <div class="status-value <%= order.paymentStatus %>">
                        <%= order.paymentStatus.charAt(0).toUpperCase() + order.paymentStatus.slice(1) %>
                    </div>
                </div>
                <% if (order.estimatedDelivery) { %>
                    <div class="status-box">
                        <div class="status-label">Estimated Delivery</div>
                        <div class="status-value">
                            <%= new Date(order.estimatedDelivery).toLocaleDateString() %>
                        </div>
                    </div>
                <% } %>
            </div>

            <!-- Tracking Details -->
            <% if (order.trackingDetails && order.trackingDetails.trackingNumber) { %>
                <div class="tracking-info mt-4">
                    <h5>Tracking Information</h5>
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <div><strong>Courier:</strong> <%= order.trackingDetails.courier %></div>
                            <div><strong>Tracking Number:</strong> <%= order.trackingDetails.trackingNumber %></div>
                        </div>
                        <% if (order.trackingDetails.trackingUrl) { %>
                            <a href="<%= order.trackingDetails.trackingUrl %>" 
                               target="_blank" 
                               class="btn btn-primary">
                                <i class="fas fa-external-link-alt"></i> Track Package
                            </a>
                        <% } %>
                    </div>
                </div>
            <% } %>

            <!-- Order Timeline -->
            <% if (order.statusHistory && order.statusHistory.length > 0) { %>
                <div class="tracking-timeline">
                    <% order.statusHistory.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
                        .forEach(status => { %>
                        <div class="timeline-item <%= status.status === order.orderStatus ? 'active' : '' %>">
                            <div class="text-secondary">
                                <i class="far fa-clock"></i>
                                <%= new Date(status.timestamp).toLocaleString() %></div>
                                <div class="fw-bold">
                                    <%= status.status.charAt(0).toUpperCase() + status.status.slice(1) %>
                                </div>
                                <% if (status.comment) { %>
                                    <div><%= status.comment %></div>
                                <% } %>
                            </div>
                        <% }); %>
                    </div>
                <% } %>
            </div>
    
            <!-- Products Card -->
            <div class="card">
                <h2>Products Ordered</h2>
                <div class="product-list">
                    <% order.items.forEach(item => { %>
                        <div class="product-item">
                            <img src="<%= item.productImage %>" alt="<%= item.productName %>" class="product-image">
 <!-- Inside product-item div -->
<div class="product-info">
    <div class="product-name"><%= item.productName %></div>
    <div class="product-meta">
        Size: <%= item.selectedSize %> | 
        Color: <%= item.selectedColor.colorName %>
    </div>
    <div class="product-meta">
        Quantity: <%= item.quantity %> × ₹<%= item.price.toFixed(2) %>
    </div>
    
    <!-- Item Status and Actions -->
    <% if (item.status === 'cancelled') { %>
        <div class="status-badge cancelled">
            <i class="fas fa-times-circle"></i> Cancelled
            <% if (item.cancellationDetails?.reason) { %>
                - <%= item.cancellationDetails.reason %>
            <% } %>
        </div>
    <% } else if (item.status === 'returned') { %>
        <div class="status-badge returned">
            <i class="fas fa-undo"></i> Returned
            <% if (item.returnDetails?.reason) { %>
                - <%= item.returnDetails.reason %>
            <% } %>
        </div>
    <% } else if (item.status === 'return_pending') { %>
        <div class="status-badge pending">
            <i class="fas fa-undo"></i> Return Pending
            <% if (item.returnDetails?.reason) { %>
                - <%= item.returnDetails.reason %>
            <% } %>
        </div>
    <% } else if (item.returnDetails && item.returnDetails.status === 'rejected') { %>
        <!-- Show return rejection message -->
        <div class="status-badge cancelled">
            <i class="fas fa-ban"></i> Return Rejected
            <% if (item.returnDetails.comments) { %>
                - <%= item.returnDetails.comments %>
            <% } %>
        </div>
    <% } else { %>
        <!-- Active item actions -->
   <!-- Complete fixed product-actions section -->
<div class="product-actions">
    <% 
        // Check if order was ever delivered from status history
        const wasEverDelivered = order.statusHistory.some(status => status.status === 'delivered');
        
        // These statuses should never show cancel button
        const nonCancellableStatuses = ['shipped', 'delivered', 'cancelled', 'returned', 'partially_returned'];
        
        // Order payment status check
        const isPaymentFailed = order.paymentStatus === 'failed' || order.orderStatus === 'payment_failed';
        
        // Only show cancel button if:
        // 1. Item is active
        // 2. Order was NEVER delivered
        // 3. Order status is not in the non-cancellable list
        // 4. Payment is not failed
        const canCancel = item.status === 'active' && 
                        !wasEverDelivered && 
                        !nonCancellableStatuses.includes(order.orderStatus) && 
                        !isPaymentFailed;
        
        // Find delivery timestamp for return eligibility
        const deliveryEntry = order.statusHistory
            .filter(status => status.status === 'delivered')
            .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))[0];
        
        const deliveryDate = deliveryEntry?.timestamp;
        const currentDate = new Date();
        const daysSinceDelivery = deliveryDate ? 
            Math.floor((currentDate - new Date(deliveryDate)) / (1000 * 60 * 60 * 24)) : null;
        const isWithinReturnWindow = daysSinceDelivery !== null && daysSinceDelivery <= 7;
        
        // Show return button if:
        // 1. Item is active
        // 2. Order was EVER delivered
        // 3. It's within return window
        const canReturn = item.status === 'active' && 
                        wasEverDelivered && 
                        isWithinReturnWindow;
    %>
    
    <% if (canCancel) { %>
        <button type="button" 
            onclick="showCancelItemModal('<%= order.orderId %>', '<%= item._id %>')"
            class="btn btn-sm btn-danger">
            <i class="fas fa-times"></i> Cancel Item
        </button>
    <% } %>
    
    <% if (canReturn) { %>
        <button type="button"
            onclick="showReturnItemModal('<%= order.orderId %>', '<%= item._id %>')"
            class="btn btn-sm btn-warning">
            <i class="fas fa-undo"></i> Return Item
        </button>
        <div class="return-eligibility-notice">
            Return eligible for <%= 7 - daysSinceDelivery %> more days
        </div>
    <% } %>
</div>
    <% } %>
</div>
                            <div class="product-price">
                                ₹<%= item.itemTotal.toFixed(2) %>
                                <% if (item.appliedProductOffer || item.appliedCategoryOffer) { %>
                                    <div class="original-price">₹<%= (item.price * item.quantity).toFixed(2) %></div>
                                <% } %>
                            </div>
                        </div>
                    <% }); %>
                </div>
    
                
    
            <!-- Shipping Information -->
            <div class="card">
                <h2>Shipping Information</h2>
                <div class="address-grid">
                    <div class="status-box">
                        <div class="status-label">Delivery Address</div>
                        <div>
                            <%= order.shippingAddress.fullName %><br>
                            <%= order.shippingAddress.streetAddress %><br>
                            <%= order.shippingAddress.city %>, <%= order.shippingAddress.state %><br>
                            <%= order.shippingAddress.pincode %><br>
                            Phone: <%= order.shippingAddress.phoneNumber %>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Price Summary -->
            <% 
            // Check if any items are cancelled or returned
            const isCancelledOrReturned = order.items.some(item => 
                item.status === 'cancelled' || item.status === 'returned'
            );
        %>
        
        <% if (!isCancelledOrReturned) { %>
            <div class="price-summary">
                <div class="price-row">
                    <span>Subtotal</span>
                    <span>₹<%= itemHelpers.formatCurrency(order.totalAmount) %></span>
                </div>
                
                <% if (order.totalDiscount && order.totalDiscount > 0) { %>
                    <div class="price-row">
                        <span>Discount</span>
                        <span>-₹<%= itemHelpers.formatCurrency(order.totalDiscount) %></span>
                    </div>
                <% } %>
                
                <div class="price-row">
                    <span>Shipping</span>
                    <span>₹<%= itemHelpers.formatCurrency(order.shippingFee) %></span>
                </div>
                
                <div class="price-row total">
                    <span>Total</span>
                    <span>₹<%= itemHelpers.formatCurrency(order.finalAmount) %></span>
                </div>
            </div>
        <% } %>
            <!-- Cancel Item Modal -->
            <div class="modal fade" id="cancelItemModal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Cancel Item</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <form id="cancelItemForm" method="POST">
                            <div class="modal-body">
                                <div class="mb-3">
                                    <label for="cancelReason" class="form-label required">Reason for Cancellation</label>
                                    <select class="form-select" id="cancelReason" name="reason" required>
                                        <option value="">Select a reason</option>
                                        <option value="Changed mind">Changed my mind</option>
                                        <option value="Found better price">Found better price elsewhere</option>
                                        <option value="Ordered wrong item">Ordered wrong item</option>
                                        <option value="Delivery time too long">Delivery time too long</option>
                                        <option value="Other">Other</option>
                                    </select>
                                </div>
                                <div id="otherReasonDiv" class="mb-3" style="display: none;">
                                    <label for="otherReason" class="form-label required">Specify Other Reason</label>
                                    <textarea class="form-control" id="otherReason" name="otherReason" rows="3"></textarea>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="submit" class="btn btn-danger">Confirm Cancellation</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
    
            <!-- Return Item Modal -->
            <div class="modal fade" id="returnItemModal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Return Item</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <form id="returnItemForm" method="POST">
                            <div class="modal-body">
                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle"></i>
                                    Returns are only eligible within 7 days of delivery. Please ensure the item is in good condition.
                                </div>
                                
                                <div class="mb-4">
                                    <label for="returnReason" class="form-label required">Reason for Return</label>
                                    <select class="form-select" id="returnReason" name="reason" required>
                                        <option value="">Select a reason</option>
                                        <option value="wrong_size">Size doesn't fit</option>
                                        <option value="wrong_color">Color not as expected</option>
                                        <option value="damaged_product">Product arrived damaged</option>
                                        <option value="quality_issues">Quality not as expected</option>
                                        <option value="defective_product">Product is defective</option>
                                        <option value="wrong_item">Received wrong item</option>
                                        <option value="not_as_described">Product different from description</option>
                                        <option value="other">Other reason</option>
                                    </select>
                                </div>
    
                                <div id="returnOtherReasonDiv" class="mb-4" style="display: none;">
                                    <label for="returnOtherReason" class="form-label required">Please specify the reason</label>
                                    <textarea class="form-control" id="returnOtherReason" name="otherReason" rows="3" 
                                        placeholder="Please provide details about your return reason"></textarea>
                                </div>
    
                                <div class="mb-4">
                                    <label for="returnCondition" class="form-label required">Product Condition</label>
                                    <select class="form-select" id="returnCondition" name="condition" required>
                                        <option value="">Select condition</option>
                                        <option value="unopened">Unopened in original packaging</option>
                                        <option value="opened_unused">Opened but unused with tags</option>
                                        <option value="used">Used multiple times</option>
                                        <option value="damaged">Damaged/Defective</option>
                                    </select>
                                </div>
    
                                <div class="mb-4">
                                    <label for="returnComments" class="form-label">Additional Details</label>
                                    <textarea class="form-control" id="returnComments" name="comments" rows="3"
                                        placeholder="Please provide any additional details that will help us process your return"></textarea>
                                </div>
    
                                <div class="return-policy-summary">
                                    <h6>Return Policy Highlights:</h6>
                                    <ul>
                                        <li>Items must be returned within 7 days of delivery</li>
                                        <li>Item should be unused and in original condition</li>
                                        <li>Original tags and packaging should be intact</li>
                                        <li>Refund will be processed to your wallet</li>
                                    </ul>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="submit" class="btn btn-warning">Submit Return Request</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    
        <%- include('../partials/user/footer') %>
    
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
        <script>
            // Handle showing/hiding other reason fields
            // Handle showing/hiding other reason fields
        document.getElementById('cancelReason').addEventListener('change', function() {
            const otherReasonDiv = document.getElementById('otherReasonDiv');
            otherReasonDiv.style.display = this.value === 'Other' ? 'block' : 'none';
        });

        document.getElementById('returnReason').addEventListener('change', function() {
            const otherReasonDiv = document.getElementById('returnOtherReasonDiv');
            otherReasonDiv.style.display = this.value === 'Other' ? 'block' : 'none';
        });

        // Modal handlers
        function showCancelItemModal(orderId, itemId) {
            const modal = document.getElementById('cancelItemModal');
            const form = document.getElementById('cancelItemForm');
            form.action = `/orders/${orderId}/items/${itemId}/cancel`;
            const bsModal = new bootstrap.Modal(modal);
            bsModal.show();
        }

        function showReturnItemModal(orderId, itemId) {
            const modal = document.getElementById('returnItemModal');
            const form = document.getElementById('returnItemForm');
            form.action = `/orders/${orderId}/items/${itemId}/return`;
            const bsModal = new bootstrap.Modal(modal);
            bsModal.show();
        }

        // Form submission handlers
        document.getElementById('cancelItemForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const reason = formData.get('reason');
            const otherReason = formData.get('otherReason');
            
            if (!reason) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Oops...',
                    text: 'Please select a reason for cancellation',
                });
                return;
            }

            const finalReason = reason === 'Other' ? otherReason : reason;
            if (reason === 'Other' && !otherReason?.trim()) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Oops...',
                    text: 'Please specify the reason for cancellation',
                });
                return;
            }

            const confirmResult = await Swal.fire({
                icon: 'warning',
                title: 'Are you sure?',
                html: `You want to cancel this item.<br><strong>Reason:</strong> ${finalReason}<br><br>This action cannot be undone.`,
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, cancel it!',
                cancelButtonText: 'No, keep it'
            });

            if (!confirmResult.isConfirmed) {
                return;
            }

            try {
                const response = await fetch(this.action, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        reason: finalReason
                    })
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.message || 'Error cancelling item');
                }

                // Close the modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('cancelItemModal'));
                if (modal) {
                    modal.hide();
                }
                
                // Show success message and reload
                Swal.fire({
                    icon: 'success',
                    title: 'Item Cancelled',
                    text: data.message || 'Item cancelled successfully',
                    didClose: () => {
                        window.location.reload();
                    }
                });

            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: error.message || 'Error processing your request'
                });
            }
        });

        document.getElementById('returnItemForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const returnData = {
        reason: formData.get('reason') === 'other' ? 
            formData.get('returnOtherReason') : 
            formData.get('reason'),
        condition: formData.get('condition'),
        comments: formData.get('comments')
    };

    try {
        const response = await fetch(this.action, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(returnData)
        });

        const result = await response.json();
        console.log('Full Server Response:', {
            status: response.status,
            ok: response.ok,
            result: result
        });

        if (response.ok) {
            const modalElement = document.getElementById('returnItemModal');
            const modalInstance = bootstrap.Modal.getInstance(modalElement);
            
            if (modalInstance) {
                modalInstance.hide();
            }
            Swal.fire({
                icon: 'success',
                title: 'Return Request Submitted',
                text: result.message || 'Your return request has been submitted successfully.'
            });
        } else {
            Swal.fire({
                icon: 'warning',
                title: 'Return Request Failed',
                html: `
                    <p>${result.message || 'Unable to submit return request'}</p>
                    ${result.details ? `<small>Details: ${JSON.stringify(result.details)}</small>` : ''}
                `
            });
        }
    } catch (error) {
        console.error('Fetch Error:', error);
        
        Swal.fire({
            icon: 'error',
            title: 'Network Error',
            text: 'Unable to submit return request. Please check your connection.'
        });
    }
});
        // Function to calculate return eligibility days
        function calculateReturnEligibilityDays(deliveryDate) {
            const deliveryTime = new Date(deliveryDate).getTime();
            const currentTime = new Date().getTime();
            const timeDiff = currentTime - deliveryTime;
            const daysDiff = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
            return Math.max(0, 7 - daysDiff); // 7 days return window
        }

        // Function to format currency
        function formatCurrency(amount) {
            return new Intl.NumberFormat('en-IN', {
                style: 'currency',
                currency: 'INR',
                minimumFractionDigits: 2
            }).format(amount);
        }

        // Function to format date
        function formatDate(date) {
            return new Date(date).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }

        // Function to show toast messages
        function showToast(message, type = 'success') {
            const toastContainer = document.createElement('div');
            toastContainer.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 1050;
                max-width: 350px;
            `;
            
            const toast = document.createElement('div');
            toast.className = `alert alert-${type} alert-dismissible fade show`;
            toast.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            toastContainer.appendChild(toast);
            document.body.appendChild(toastContainer);
            
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toastContainer.remove(), 150);
            }, 3000);
        }

        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        async function retryPayment(orderId, amount) {
    try {
        // Create Razorpay order
        const orderResponse = await fetch('/orders/payment/create-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ amount })
        });
        
        const orderData = await orderResponse.json();
        
        if (!orderData.success) {
            throw new Error(orderData.message || 'Failed to create payment order');
        }

        // Initialize Razorpay
        const options = {
            key: orderData.key,
            amount: orderData.amount,
            currency: "INR",
            name: "ANAMIT Fashion Store",
            description: "Order Payment Retry",
            order_id: orderData.orderId,
            handler: async function (response) {
                try {
                    // Verify payment with orderId in URL
                    const verifyResponse = await fetch(`/orders/payment/verify/${orderId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_signature: response.razorpay_signature
                        })
                    });

                    const verifyData = await verifyResponse.json();

                    if (verifyData.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Payment Successful!',
                            text: 'Your payment has been completed successfully.',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        throw new Error(verifyData.message);
                    }
                } catch (error) {
                    console.error('Payment verification error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Verification Failed',
                        text: error.message || 'Failed to verify payment'
                    });
                }
            },
            prefill: {
                name: "<%= order.shippingAddress.fullName %>",
                contact: "<%= order.shippingAddress.phoneNumber %>"
            },
            theme: {
                color: "#3399cc"
            }
        };

        const rzp = new Razorpay(options);
        rzp.open();

    } catch (error) {
        console.error('Payment creation error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to initiate payment'
        });
    }
}
    </script>
</body>
</html>