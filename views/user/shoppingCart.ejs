<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <style>
       :root {
    --primary-color: #3498db;
    --secondary-color: #2ecc71;
    --danger-color: #e74c3c;
    --text-color: #2c3e50;
    --border-color: #ecf0f1;
    --background-color: #f8f9fa;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: var(--text-color);
    line-height: 1.6;
    background-color: var(--background-color);
}

.container {
    width: min(95%, 1400px);
    margin: 2rem auto;
    padding: 0 1rem;
}

.cart-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding: 1rem 1.5rem;
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
}

.cart-title {
    font-size: clamp(1.5rem, 3vw, 2rem);
    font-weight: 700;
}

.cart-count {
    background-color: var(--primary-color);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 600;
}

.cart-items {
    display: grid;
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.cart-item {
    display: grid;
    grid-template-columns: auto 2fr repeat(3, 1fr) auto;
    align-items: center;
    gap: 1rem;
    padding: 1.5rem;
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    transition: transform 0.2s ease;
}

.cart-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.item-image {
    width: 120px;
    height: 120px;
    object-fit: cover;
    border-radius: 8px;
}

.item-details {
    padding: 0 1rem;
}

.item-name {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.item-variant {
    font-size: 0.9rem;
    color: #666;
}

.quantity-controls {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background-color: var(--background-color);
    padding: 0.5rem;
    border-radius: 8px;
}

.quantity-btn {
    background-color: white;
    border: 1px solid var(--border-color);
    width: 35px;
    height: 35px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1.2rem;
    transition: all 0.2s ease;
}

.quantity-btn:hover {
    background-color: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
}

.quantity-input {
    width: 60px;
    text-align: center;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    padding: 0.5rem;
    font-size: 1rem;
}

.price {
    font-size: 1.1rem;
    font-weight: 600;
}

.remove-btn {
    background-color: var(--danger-color);
    color: white;
    border: none;
    padding: 0.75rem 1rem;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-weight: 600;
}

.remove-btn:hover {
    background-color: #c0392b;
    transform: scale(1.05);
}

.cart-summary {
    background-color: white;
    border-radius: 10px;
    padding: 2rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    max-width: 500px;
    margin-left: auto;
}

.summary-row {
    display: flex;
    justify-content: space-between;
    padding: 1rem 0;
    font-size: 1.1rem;
}

.total-row {
    font-size: 1.3rem;
    font-weight: 700;
    border-top: 2px solid var(--border-color);
    margin-top: 1rem;
    padding-top: 1.5rem;
}

.checkout-btn {
    width: 100%;
    background-color: var(--secondary-color);
    color: white;
    border: none;
    padding: 1.25rem;
    border-radius: 8px;
    font-size: 1.1rem;
    font-weight: 700;
    cursor: pointer;
    margin-top: 1.5rem;
    transition: all 0.2s ease;
}

.checkout-btn:hover {
    background-color: #27ae60;
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(46, 204, 113, 0.3);
}

.empty-cart {
    text-align: center;
    padding: 4rem 2rem;
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
}

.empty-cart h2 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
}

.empty-cart p {
    color: #666;
    margin-bottom: 2rem;
}

.btn-shopping {
    background-color: #ff9f43;
    padding: 1rem 2rem;
    border: none;
    border-radius: 8px;
    color: white;
    font-weight: 700;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.2s ease;
}

.btn-shopping:hover {
    background-color: #ff8c1a;
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(255, 159, 67, 0.3);
}

/* Responsive Design */
@media (max-width: 1024px) {
    .cart-item {
        grid-template-columns: auto 2fr 1fr 1fr;
        gap: 1rem;
    }
    
    .price:nth-of-type(1) {
        display: none;
    }
}

@media (max-width: 768px) {
    .cart-item {
        grid-template-columns: 1fr;
        text-align: center;
    }

    .item-image {
        margin: 0 auto;
    }

    .quantity-controls {
        justify-content: center;
        margin: 1rem 0;
    }

    .remove-btn {
        width: 100%;
    }

    .cart-summary {
        margin: 2rem auto 0;
    }
}

@media (max-width: 480px) {
    .container {
        width: 100%;
        padding: 0.5rem;
    }

    .cart-header {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }
}
    </style>
</head>
<body>
    <%- include('../partials/user/header')%>
    <div class="container" style="padding-top: 150px;">
        <div class="cart-header">
            <h1 class="cart-title">Shopping Cart</h1>
            <span class="cart-count"><%= cart.items.length %> items</span>
        </div>

        <% if (cart.items.length > 0) { %>
            <div class="cart-items">
                <% cart.items.forEach(item => { %>
                    <div class="cart-item" data-item-id="<%= item.productId %>">
                        <img src="<%= item.product.variants.find(v => v.colorName === item.colorName).productImage[0] %>" 
                             alt="<%= item.product.productName %>" 
                             class="item-image">
                        
                        <div class="item-details">
                            <div class="item-name"><%= item.product.productName %></div>
                            <div class="item-variant">
                                Color: <%= item.colorName %> | Size: <%= item.size %>
                            </div>
                        </div>

                        <div class="quantity-controls">
                            <button class="quantity-btn decrease" onclick="updateQuantity('<%= item.productId %>', -1)">-</button>
                            <input type="number" class="quantity-input" value="<%= item.quantity %>" min="1" 
                                   onchange="updateQuantity('<%= item.productId %>', 0, this.value)">
                            <button class="quantity-btn increase" onclick="updateQuantity('<%= item.productId %>', 1)">+</button>
                        </div>

                        <div class="price">₹<%= item.price.toLocaleString('en-IN') %></div>
                        <div class="price">₹<%= item.total.toLocaleString('en-IN') %></div>

                        <button class="remove-btn" onclick="removeItem('<%= item.productId %>')">
                            Remove
                        </button>
                    </div>
                <% }); %>
            </div>

            <div class="cart-summary">
                <div class="summary-row">
                    <span>Subtotal</span>
                    <span>₹<%= cart.totalPrice.toLocaleString('en-IN') %></span>
                </div>
                <div class="summary-row">
                    <span>Shipping</span>
                    <span>₹128</span>
                </div>
                
                <div class="summary-row total-row">
                    <span>Total</span>
                    <span>₹<%= (cart.totalPrice + 128).toLocaleString('en-IN') %></span>
                </div>
                <button class="checkout-btn" onclick="proceedToCheckout()">
                    Proceed to Checkout
                </button>
            </div>
        <% } else { %>
            <div class="empty-cart">
                <h2>Your cart is empty</h2>
                <p>Looks like you haven't added any items to your cart yet.</p>
                <a href="/"><button class="btn-shopping">Continue Shopping</button></a>
            </div>
        <% } %>
    </div>
    <%- include('../partials/user/footer')%>
    <script>
        async function updateQuantity(productId, change, newValue = null) {
            const quantity = newValue !== null ? parseInt(newValue) : null;
            try {
                const response = await fetch(`/api/cart/update`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        productId,
                        quantity: quantity !== null ? quantity : change
                    })
                });

                if (!response.ok) throw new Error('Failed to update quantity');

                // Reload the page to reflect changes
                window.location.reload();
            } catch (error) {
                console.error('Error updating quantity:', error);
                alert('Failed to update quantity. Please try again.');
            }
        }

        async function removeItem(productId) {
            if (!confirm('Are you sure you want to remove this item?')) return;

            try {
                const response = await fetch(`/api/cart/remove`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ productId })
                });

                if (!response.ok) throw new Error('Failed to remove item');

                // Reload the page to reflect changes
                window.location.reload();
            } catch (error) {
                console.error('Error removing item:', error);
                alert('Failed to remove item. Please try again.');
            }
        }

        async function proceedToCheckout() {
            try {
                const response = await fetch('/api/checkout/initialize', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) throw new Error('Failed to initialize checkout');

                const { checkoutUrl } = await response.json();
                window.location.href = checkoutUrl;
            } catch (error) {
                console.error('Error proceeding to checkout:', error);
                alert('Failed to proceed to checkout. Please try again.');
            }
        }

        // Add event listeners for quantity input validation
        document.querySelectorAll('.quantity-input').forEach(input => {
            input.addEventListener('input', function() {
                const value = parseInt(this.value);
                if (isNaN(value) || value < 1) {
                    this.value = 1;
                }
            });
        });
    </script>
</body>
</html>