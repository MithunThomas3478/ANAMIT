<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #ff5722;
            --secondary-color: #f4511e;
            --accent-color: #ff9800;
            --success-color: #4caf50;
            --danger-color: #f44336;
            --warning-color: #ff9800;
            --text-color: #333;
            --light-text: #666;
            --border-color: #e0e0e0;
            --background-color: #f8f9fa;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        /* Cart Header */
        .cart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid var(--border-color);
        }

        .cart-title {
            font-size: 2rem;
            font-weight: 600;
            color: var(--text-color);
        }

        .cart-count {
            background-color: var(--primary-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 500;
        }

        /* Cart Layout */
        .cart-content {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 2rem;
            align-items: start;
        }

        /* Cart Items */
        .cart-items {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            overflow: hidden;
        }

        .cart-item {
            display: grid;
            grid-template-columns: auto 2fr 1fr 1fr auto;
            gap: 1.5rem;
            padding: 1.5rem;
            border-bottom: 1px solid var(--border-color);
            align-items: center;
        }

        .cart-item:last-child {
            border-bottom: none;
        }

        /* Product Image */
        .item-image {
            width: 120px;
            height: 120px;
            object-fit: cover;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        /* Product Details */
        .item-details h3 {
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
            color: var(--text-color);
        }

        .item-variant {
            font-size: 0.9rem;
            color: var(--light-text);
        }

        /* Price Section */
        .price-info {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .original-price {
            font-size: 0.9rem;
            color: var(--light-text);
            text-decoration: line-through;
        }

        .final-price {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--primary-color);
        }

        .offer-badges {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }

        .offer-badge {
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .product-offer {
            background-color: #fff3e0;
            color: #e65100;
        }

        .category-offer {
            background-color: #e3f2fd;
            color: #1565c0;
        }

        /* Quantity Controls */
        .quantity-controls {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            background: var(--background-color);
            padding: 0.5rem;
            border-radius: 8px;
        }

        .quantity-btn {
            width: 32px;
            height: 32px;
            border: none;
            border-radius: 6px;
            background: white;
            color: var(--text-color);
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .quantity-btn:hover {
            background: var(--primary-color);
            color: white;
        }

        .quantity-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .quantity-input {
            width: 50px;
            text-align: center;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            padding: 0.25rem;
            font-size: 0.9rem;
        }

        /* Remove Button */
        .remove-btn {
            background: transparent;
            border: none;
            color: var(--danger-color);
            cursor: pointer;
            font-size: 1.2rem;
            padding: 0.5rem;
            transition: all 0.2s ease;
        }

        .remove-btn:hover {
            transform: scale(1.1);
            color: #d32f2f;
        }

        /* Cart Summary */
        .cart-summary {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            position: sticky;
            top: 2rem;
        }

        .summary-header {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid var(--border-color);
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
            font-size: 0.95rem;
        }

        .summary-divider {
            height: 1px;
            background: var(--border-color);
            margin: 1rem 0;
        }

        .summary-total {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--primary-color);
        }

        .savings-message {
            color: var(--success-color);
            font-size: 0.9rem;
            margin-top: 0.5rem;
            text-align: center;
        }

        .checkout-btn {
            width: 100%;
            padding: 1rem;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            margin-top: 1.5rem;
        }

        .checkout-btn:hover {
            background: var(--secondary-color);
            transform: translateY(-2px);
        }

        .checkout-btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
        }

        /* Empty Cart */
        .empty-cart {
            text-align: center;
            padding: 4rem 2rem;
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }

        .empty-cart i {
            font-size: 3rem;
            color: var(--light-text);
            margin-bottom: 1rem;
        }

        .empty-cart h2 {
            font-size: 1.5rem;
            margin-bottom: 1rem;
        }

        .empty-cart p {
            color: var(--light-text);
            margin-bottom: 2rem;
        }

        .continue-shopping {
            display: inline-block;
            padding: 0.75rem 1.5rem;
            background: var(--primary-color);
            color: white;
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.2s ease;
        }

        .continue-shopping:hover {
            background: var(--secondary-color);
            transform: translateY(-2px);
        }

        /* Loading States */
        .loading {
            opacity: 0.7;
            pointer-events: none;
        }

        .loading-spinner {
            display: inline-block;
            width: 1rem;
            height: 1rem;
            border: 2px solid rgba(255,255,255,0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .cart-content {
                grid-template-columns: 1fr;
            }

            .cart-summary {
                position: static;
                order: -1;
            }
        }

        @media (max-width: 768px) {
            .cart-item {
                grid-template-columns: 1fr;
                text-align: center;
                gap: 1rem;
            }

            .item-image {
                margin: 0 auto;
            }

            .quantity-controls {
                justify-content: center;
            }

            .remove-btn {
                margin: 0 auto;
            }

            .cart-header {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }

            .container {
                padding: 1rem;
            }
        }

        /* Stock Warning */
        .stock-warning {
            color: var(--warning-color);
            font-size: 0.8rem;
            margin-top: 0.25rem;
        }
    </style>
</head>
<body>
    <%- include('../partials/user/header')%>

    <div class="container" style="padding-top: 100px;">
        <div class="cart-header">
            <h1 class="cart-title">Shopping Cart</h1>
            <span class="cart-count"><%= cart.items.length %> items</span>
        </div>

        <% if (cart.items.length > 0) { %>
            <div class="cart-content">
                <div class="cart-items">
                    <% cart.items.forEach(item => { %>
                        <div class="cart-item" 
                             data-item-id="<%= item.productId %>"
                             data-color="<%= item.colorName %>"
                             data-size="<%= item.size %>">
                            <!-- Product Image -->
                            <img src="<%= item.product.variants.find(v => v.colorName === item.colorName)?.productImage[0] %>" 
                                 alt="<%= item.product.productName %>" 
                                 class="item-image"
                                 onerror="this.src='/images/placeholder.jpg'">
                            
                            <!-- Product Details -->
                            <div class="item-details">
                                <h3><%= item.product.productName %></h3>
                                <div class="item-variant">
                                    <span>Color: <%= item.colorName %></span> | 
                                    <span>Size: <%= item.size %></span> |
                                    <span>Category: <%= item.product.category %></span>
                                </div>
                            </div>

                            <!-- Price Information -->
                            <div class="price-info">
                                <span class="original-price">₹<%= item.price.toLocaleString('en-IN') %></span>
                                <span class="final-price">₹<%= ((item.price * (1 - (item.appliedProductOffer + item.appliedCategoryOffer)/100)) * item.quantity).toLocaleString('en-IN') %></span>
                                
                                <% if (item.appliedProductOffer > 0 || item.appliedCategoryOffer > 0) { %>
                                    <div class="offer-badges">
                                        <% if (item.appliedProductOffer > 0) { %>
                                            <span class="offer-badge product-offer">
                                                <i class="fas fa-tag"></i>
                                                <%= item.appliedProductOffer %>% OFF
                                            </span>
                                        <% } %>
                                        <% if (item.appliedCategoryOffer > 0) { %>
                                            <span class="offer-badge category-offer">
                                                <i class="fas fa-percent"></i>
                                                <%= item.appliedCategoryOffer %>% Category OFF
                                            </span>
                                        <% } %>
                                    </div>
                                <% } %>

                                <% if (item.stockWarning) { %>
                                    <div class="stock-warning">
                                        <i class="fas fa-exclamation-triangle"></i>
                                        Only <%= item.stockWarning %> items left
                                    </div>
                                <% } %>
                            </div>

                            <!-- Quantity Controls -->
                            <div class="quantity-controls">
                                <button class="quantity-btn decrease" 
                                        onclick="updateQuantity('<%= item.productId %>', '<%= item.colorName %>', '<%= item.size %>', -1)"
                                        <%= item.quantity <= 1 ? 'disabled' : '' %>>
                                    <i class="fas fa-minus"></i>
                                </button>
                                <input type="number" class="quantity-input" 
                                       value="<%= item.quantity %>" 
                                       min="1" 
                                       max="5"
                                       onchange="updateQuantity('<%= item.productId %>', '<%= item.colorName %>', '<%= item.size %>', 0, this.value)">
                                <button class="quantity-btn increase" 
                                        onclick="updateQuantity('<%= item.productId %>', '<%= item.colorName %>', '<%= item.size %>', 1)"
                                        <%= item.quantity >= 5 ? 'disabled' : '' %>>
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>

                            <!-- Remove Button -->
                            <button class="remove-btn" 
                                    onclick="removeItem('<%= item.productId %>', '<%= item.colorName %>', '<%= item.size %>')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    <% }); %>
                </div>

                <div class="cart-summary">
                    <h2 class="summary-header">Order Summary</h2>
                    <div class="summary-section">
                        <div class="summary-row">
                            <span>Subtotal</span>
                            <span>₹<%= cart.totalAmount.toLocaleString('en-IN') %></span>
                        </div>
                        
                        <% if (cart.totalDiscount > 0) { %>
                            <div class="summary-row">
                                <span class="discount-text">Total Discount</span>
                                <span class="discount-text">-₹<%= cart.totalDiscount.toLocaleString('en-IN') %></span>
                            </div>
                        <% } %>
                        
                        <div class="summary-row">
                            <span>Shipping</span>
                            <span>₹128</span>
                        </div>

                        <div class="summary-divider"></div>
                        
                        <div class="summary-row total">
                            <span>Total Amount</span>
                            <span class="summary-total">₹<%= ((cart.totalAmount - cart.totalDiscount) + 128).toLocaleString('en-IN') %></span>
                        </div>

                        <% if (cart.totalDiscount > 0) { %>
                            <div class="savings-message">
                                You saved ₹<%= cart.totalDiscount.toLocaleString('en-IN') %> on this order!
                            </div>
                        <% } %>
                    </div>
                
                    <button class="checkout-btn" onclick="proceedToCheckout()">
                        Proceed to Checkout
                    </button>
                </div>
            </div>
        <% } else { %>
            <div class="empty-cart">
                <i class="fas fa-shopping-cart"></i>
                <h2>Your cart is empty</h2>
                <p>Looks like you haven't added any items to your cart yet.</p>
                <a href="/" class="continue-shopping">
                    <i class="fas fa-arrow-left"></i> Continue Shopping
                </a>
            </div>
        <% } %>
    </div>

    <%- include('../partials/user/footer')%>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        async function updateQuantity(productId, colorName, size, change, newValue = null) {
            try {
                const itemElement = document.querySelector(
                    `[data-item-id="${productId}"][data-color="${colorName}"][data-size="${size}"]`
                );
                const quantityInput = itemElement.querySelector('.quantity-input');
                const currentQuantity = parseInt(quantityInput.value);

                let finalQuantity;
                if (newValue !== null) {
                    finalQuantity = parseInt(newValue);
                } else {
                    finalQuantity = currentQuantity + change;
                }

                // Validate quantity
                if (finalQuantity < 1 || isNaN(finalQuantity)) {
                    finalQuantity = 1;
                    quantityInput.value = 1;
                    return;
                }
                if (finalQuantity > 5) {
                    await Swal.fire({
                        icon: 'warning',
                        title: 'Maximum Limit',
                        text: 'Maximum quantity allowed is 5 items',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000
                    });
                    quantityInput.value = currentQuantity;
                    return;
                }

                // Add loading state
                itemElement.classList.add('loading');
                
                const response = await fetch('/updateQuantity', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        productId,
                        colorName,
                        size,
                        quantity: finalQuantity
                    })
                });

                const result = await response.json();
                
                // Remove loading state
                itemElement.classList.remove('loading');

                if (!response.ok) {
                    throw new Error(result.message || 'Failed to update quantity');
                }
                
                if (result.success) {
                    updateCartUI(result.cart);
                    if (result.message) {
                        await Swal.fire({
                            icon: 'success',
                            text: result.message,
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
                } else {
                    quantityInput.value = currentQuantity;
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Error updating quantity:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to update quantity. Please try again.',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000
                });
            }
        }

        function updateCartUI(cartData) {
            // Update each cart item
            cartData.items.forEach(item => {
                const itemElement = document.querySelector(
                    `[data-item-id="${item.productId}"][data-color="${item.colorName}"][data-size="${item.size}"]`
                );
                if (itemElement) {
                    // Update quantity
                    const quantityInput = itemElement.querySelector('.quantity-input');
                    if (quantityInput) {
                        quantityInput.value = item.quantity;
                    }

                    // Update quantity buttons
                    const decreaseBtn = itemElement.querySelector('.quantity-btn.decrease');
                    const increaseBtn = itemElement.querySelector('.quantity-btn.increase');
                    if (decreaseBtn) decreaseBtn.disabled = item.quantity <= 1;
                    if (increaseBtn) increaseBtn.disabled = item.quantity >= 5;

                    // Update prices
                    const priceInfo = itemElement.querySelector('.price-info');
                    if (priceInfo) {
                        const originalPrice = item.price;
                        const finalPrice = item.price * (1 - (item.appliedProductOffer + item.appliedCategoryOffer)/100) * item.quantity;

                        const originalPriceElement = priceInfo.querySelector('.original-price');
                        const finalPriceElement = priceInfo.querySelector('.final-price');

                        if (originalPriceElement) {
                            originalPriceElement.textContent = `₹${originalPrice.toLocaleString('en-IN')}`;
                        }
                        if (finalPriceElement) {
                            finalPriceElement.textContent = `₹${finalPrice.toLocaleString('en-IN')}`;
                        }
                    }
                }
            });

            // Update cart summary
            const summaryElement = document.querySelector('.cart-summary');
            if (summaryElement) {
                // Update subtotal
                const subtotalElement = summaryElement.querySelector('.summary-row:first-child span:last-child');
                if (subtotalElement) {
                    subtotalElement.textContent = `₹${cartData.totalAmount.toLocaleString('en-IN')}`;
                }

                // Update discount
                const discountRow = summaryElement.querySelector('.discount-text')?.closest('.summary-row');
                if (discountRow && cartData.totalDiscount > 0) {
                    discountRow.querySelector('span:last-child').textContent = 
                        `-₹${cartData.totalDiscount.toLocaleString('en-IN')}`;
                }

                // Update total amount
                const totalElement = summaryElement.querySelector('.summary-total');
                if (totalElement) {
                    const finalTotal = (cartData.totalAmount - cartData.totalDiscount + 128);
                    totalElement.textContent = `₹${finalTotal.toLocaleString('en-IN')}`;
                }

                // Update savings message
                const savingsMessage = summaryElement.querySelector('.savings-message');
                if (savingsMessage && cartData.totalDiscount > 0) {
                    savingsMessage.textContent = 
                        `You saved ₹${cartData.totalDiscount.toLocaleString('en-IN')} on this order!`;
                }
            }

            // Update cart count in header
            const cartCount = document.querySelector('.cart-count');
            if (cartCount) {
                cartCount.textContent = `${cartData.items.length} items`;
            }
        }

        async function removeItem(productId, colorName, size) {
            try {
                const result = await Swal.fire({
                    title: 'Remove Item',
                    text: 'Are you sure you want to remove this item from your cart?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Yes, remove it',
                    cancelButtonText: 'Cancel'
                });

                if (!result.isConfirmed) return;

                const itemElement = document.querySelector(
                    `[data-item-id="${productId}"][data-color="${colorName}"][data-size="${size}"]`
                );
                
                // Add loading state
                if (itemElement) {
                    itemElement.classList.add('loading');
                }

                const response = await fetch('/removeProduct', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ productId, colorName, size })
                });

                const data = await response.json();
                
                // Remove loading state
                if (itemElement) {
                    itemElement.classList.remove('loading');
                }

                if (!response.ok || !data.success) {
                    throw new Error(data.message || 'Failed to remove item');
                }

                // Remove item from DOM
                if (itemElement) {
                    itemElement.remove();
                }

                // Update cart UI
                updateCartUI(data.cart);

                await Swal.fire({
                    icon: 'success',
                    title: 'Removed',
                    text: 'Item removed from cart successfully',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 2000
                });

                // Reload if cart is empty
                if (data.cart.items.length === 0) {
                    window.location.reload();
                }

            } catch (error) {
                console.error('Error removing item:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to remove item. Please try again.',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000
                });
            }
        }

        function proceedToCheckout() {
            window.location.href = '/checkout';
        }

        // Initialize quantity input validation
        document.addEventListener('DOMContentLoaded', () => {
            // Quantity input validation
            document.querySelectorAll('.quantity-input').forEach(input => {
                input.addEventListener('input', function() {
                    const value = parseInt(this.value);
                    if (isNaN(value) || value < 1) {
                        this.value = 1;
                    } else if (value > 5) {
                        this.value = 5;
                        Swal.fire({
                            icon: 'warning',
                            title: 'Maximum Limit',
                            text: 'Maximum quantity allowed is 5 items',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000
                        });
                    }
                });
            });

            // Check for auto-removed items notification
            if (typeof removedItems !== 'undefined' && removedItems.length > 0) {
                Swal.fire({
                    icon: 'info',
                    title: 'Cart Updated',
                    text: 'Some items were removed from your cart because they are no longer available.',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 5000
                });
            }
        });
    </script>
</body>
</html>