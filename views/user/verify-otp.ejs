<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTP Verification</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.7.32/sweetalert2.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.7.32/sweetalert2.min.css" rel="stylesheet">
    
    <style>
        html, body {
            height: 100%;
        }
        body {
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #f0f2f5;
            font-family: Arial, sans-serif;
        }
        .otp-card {
            max-width: 400px;
            width: 100%;
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
            background-color: #ffffff;
            margin: 0 auto;
        }
        .otp-input-group {
            display: flex;
            justify-content: space-between;
            gap: 0.5rem;
        }
        .otp-input {
            width: 3rem;
            height: 3rem;
            text-align: center;
            font-size: 1.5rem;
            border: 2px solid #ced4da;
            border-radius: 0.5rem;
        }
        .otp-input:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
            outline: none;
        }
        .btn-verify {
            background-color: #0d6efd;
            border-color: #0d6efd;
            padding: 0.75rem 0;
            font-size: 1.1rem;
        }
        .btn-verify:hover {
            background-color: #0b5ed7;
            border-color: #0a58ca;
        }
        .btn-verify:disabled {
            background-color: #6c757d;
            border-color: #6c757d;
            cursor: not-allowed;
        }
        .resend-link {
            color: #0d6efd;
            text-decoration: none;
        }
        .resend-link.disabled {
            color: #6c757d;
            pointer-events: none;
            cursor: not-allowed;
        }
        .resend-link:hover:not(.disabled) {
            text-decoration: underline;
        }
        .timer {
            font-size: 1.2rem;
            font-weight: bold;
            color: #dc3545;
            margin-top: 1rem;
        }
        @media (max-width: 575.98px) {
            .otp-card {
                padding: 1.5rem;
            }
            .otp-input {
                width: 2.5rem;
                height: 2.5rem;
                font-size: 1.25rem;
            }
        }
        @media (max-width: 320px) {
            .otp-input {
                width: 2rem;
                height: 2rem;
                font-size: 1rem;
            }
            .timer {
                font-size: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-sm-10 col-md-8 col-lg-6">
                <div class="otp-card">
                    <h2 class="text-center mb-4">OTP Verification</h2>
                    <p class="text-center mb-4">Enter the 6-digit code sent to your email</p>

                    <form id="otp-form">
                        <div class="otp-input-group mb-4">
                            <input type="text" inputmode="numeric" pattern="[0-9]*" class="form-control otp-input" maxlength="1" name="otp-1" aria-label="OTP digit 1" required>
                            <input type="text" inputmode="numeric" pattern="[0-9]*" class="form-control otp-input" maxlength="1" name="otp-2" aria-label="OTP digit 2" required>
                            <input type="text" inputmode="numeric" pattern="[0-9]*" class="form-control otp-input" maxlength="1" name="otp-3" aria-label="OTP digit 3" required>
                            <input type="text" inputmode="numeric" pattern="[0-9]*" class="form-control otp-input" maxlength="1" name="otp-4" aria-label="OTP digit 4" required>
                            <input type="text" inputmode="numeric" pattern="[0-9]*" class="form-control otp-input" maxlength="1" name="otp-5" aria-label="OTP digit 5" required>
                            <input type="text" inputmode="numeric" pattern="[0-9]*" class="form-control otp-input" maxlength="1" name="otp-6" aria-label="OTP digit 6" required>
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-verify" id="verifyBtn" disabled>Verify OTP</button>
                        </div>
                    </form>

                    <div class="text-center mt-3">
                        <p class="mb-2">
                            Didn't receive the code?
                            <a href="#" id="resend-otp" class="resend-link">Resend OTP</a>
                        </p>
                        <p id="timer" class="timer">OTP Expires in 01:00</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('otp-form');
            const inputs = form.querySelectorAll('.otp-input');
            const verifyBtn = document.getElementById('verifyBtn');
            const resendLink = document.getElementById('resend-otp');
            const timerElement = document.getElementById('timer');
            let resendTimeout;
            let timerInterval;

            // Function to handle input validation and navigation
            function handleInput(e) {
                // Allow only numbers
                const value = e.target.value.replace(/[^0-9]/g, '');
                e.target.value = value;

                if (value) {
                    const index = Array.from(inputs).indexOf(e.target);
                    if (index < inputs.length - 1) {
                        inputs[index + 1].focus();
                    }
                }

                // Enable/disable verify button based on all inputs being filled
                verifyBtn.disabled = !Array.from(inputs).every(input => input.value.length === 1);
            }

            // Function to handle backspace
            function handleBackspace(e) {
                if (e.key === 'Backspace' && !e.target.value) {
                    const index = Array.from(inputs).indexOf(e.target);
                    if (index > 0) {
                        inputs[index - 1].focus();
                        inputs[index - 1].value = '';
                    }
                }
            }

            // Function to start/restart timer
            function startTimer(duration = 60) {
                if (timerInterval) clearInterval(timerInterval);
                if (resendTimeout) clearTimeout(resendTimeout);

                resendLink.classList.add('disabled');

                let timeLeft = duration;
                timerInterval = setInterval(() => {
                    if (timeLeft <= 0) {
                        clearInterval(timerInterval);
                        timerElement.textContent = 'OTP Expired';
                        resendLink.classList.remove('disabled');
                        return;
                    }

                    const minutes = Math.floor(timeLeft / 60);
                    const seconds = timeLeft % 60;
                    timerElement.textContent = `OTP Expires in ${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
                    timeLeft--;
                }, 1000);

                resendTimeout = setTimeout(() => {
                    resendLink.classList.remove('disabled');
                }, duration * 1000);
            }

            // Add event listeners to inputs
            inputs.forEach(input => {
                input.addEventListener('input', handleInput);
                input.addEventListener('keydown', handleBackspace);
                input.addEventListener('paste', (e) => {
                    e.preventDefault();
                    const pastedData = e.clipboardData.getData('text').replace(/[^0-9]/g, '').slice(0, 6);
                    
                    if (pastedData) {
                        inputs.forEach((input, index) => {
                            input.value = pastedData[index] || '';
                        });
                        verifyBtn.disabled = !Array.from(inputs).every(input => input.value.length === 1);
                        if (pastedData.length === 6) {
                            inputs[5].focus();
                        }
                    }
                });
            });

            // Handle form submission
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                const otp = Array.from(inputs).map(input => input.value).join('');

                try {
                    const response = await fetch('/verify-otp', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ otp })
                    });

                    const result = await response.json();

                    if (result.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: result.message,
                            showConfirmButton: false,
                            timer: 1500
                        }).then(() => {
                            if (result.redirectUrl) {
                                window.location.href = result.redirectUrl;
                            }
                        });
                    } else {
                        throw new Error(result.message);
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Something went wrong. Please try again.',
                    });
                }
            });

            // Handle resend OTP
            let isResending = false;
            resendLink.addEventListener('click', async (e) => {
                e.preventDefault();
                
                if (resendLink.classList.contains('disabled') || isResending) {
                    return;
                }

                // Immediately disable resend link
                isResending = true;
                resendLink.classList.add('disabled');

                // Show immediate feedback
                const loadingSwal = Swal.fire({
                    title: 'Sending OTP...',
                    text: 'Please wait',
                    icon: 'info',
                    showConfirmButton: false,
                    allowOutsideClick: false,
                    timer: 800
                });

                try {
                    const response = await fetch('/resend-otp', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    const result = await response.json();

                    if (result.success) {
                        // Clear inputs
                        inputs.forEach(input => input.value = '');
                        verifyBtn.disabled = true;

                        // Start new timer (60 seconds)
                        startTimer(60);
                        
                        // Close loading alert if it's still open
                        loadingSwal.close();

                        // Show quick success message
                        Swal.fire({
                            icon: 'success',
                            title: 'OTP Sent!',
                            text: 'Check your email',
                            showConfirmButton: false,
                            timer: 1000,
                            position: 'top-end',
                            toast: true
                        });

                        // Keep resend link disabled for the full duration
                        setTimeout(() => {
                            isResending = false;
                        }, 60000); // 60 seconds
                    } else {
                        throw new Error(result.message);
                    }
                } catch (error) {
                    // Close loading alert if it's still open
                    loadingSwal.close();
                    
                    // Re-enable resend link on error
                    isResending = false;
                    resendLink.classList.remove('disabled');
                    
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Something went wrong. Please try again.',
                        timer: 1500,
                        position: 'top-end',
                        toast: true
                    });
                }
            });

            // Start initial timer
            startTimer();
        });
    </script>
</body>
</html>