<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout | <%= storeName %></title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        :root {
            --primary-color: #fc7b03;
            --primary-hover: #ff9000;
            --text-color: #333;
            --text-light: #666;
            --border-color: #e0e0e0;
            --bg-color: #f5f5f5;
            --shadow-sm: 0 2px 4px rgba(0,0,0,0.05);
            --shadow-md: 0 4px 6px rgba(0,0,0,0.1);
            --transition: all 0.3s ease;
        }

        body {
            background: var(--bg-color);
            color: var(--text-color);
            font-family: 'Inter', system-ui, -apple-system, sans-serif;
            line-height: 1.5;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            padding-top: 100px;
        }

        .checkout-grid {
            display: grid;
            grid-template-columns: 1fr 380px;
            gap: 2rem;
        }

        .card {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: var(--shadow-md);
            margin-bottom: 2rem;
        }

        h2 {
            margin: 0 0 1.5rem;
            font-size: 1.5rem;
            color: var(--text-color);
        }

        /* Cart Items */
        .checkout-item {
            display: grid;
            grid-template-columns: 120px 1fr auto;
            gap: 1.5rem;
            padding: 1.5rem;
            background: white;
            border-radius: 8px;
            box-shadow: var(--shadow-sm);
            margin-bottom: 1rem;
        }

        .item-image {
            width: 120px;
            height: 120px;
            object-fit: cover;
            border-radius: 8px;
        }

        .item-details h3 {
            margin: 0;
            font-size: 1.1rem;
        }

        .item-variant, .item-quantity {
            color: var(--text-light);
            font-size: 0.95rem;
            margin-top: 0.5rem;
        }

        /* Address Section */
        .address-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .address-card {
            border: 2px solid var(--border-color);
            border-radius: 12px;
            padding: 1.5rem;
            cursor: pointer;
            transition: var(--transition);
            background: white;
            position: relative;
        }

        .address-card:hover {
            border-color: var(--primary-color);
            transform: translateY(-2px);
        }

        .address-card.selected {
            border-color: var(--primary-color);
            background-color: rgba(252, 123, 3, 0.05);
        }

        .address-card.new {
            animation: slideIn 0.3s ease;
        }

        .address-name {
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--text-color);
        }

        .address-details {
            color: var(--text-light);
            font-size: 0.9rem;
            line-height: 1.5;
        }

        /* Address Form */
        .address-form-container {
            display: none;
            background: white;
            padding: 2rem;
            border-radius: 12px;
            margin-top: 1.5rem;
            box-shadow: var(--shadow-md);
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--text-color);
            font-weight: 500;
        }

        .form-group input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-size: 1rem;
            transition: var(--transition);
        }

        .form-group input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(252, 123, 3, 0.1);
        }

        /* Payment Methods */
        .payment-method {
            display: flex;
            align-items: center;
            gap: 1.5rem;
            padding: 1.5rem;
            border: 2px solid var(--border-color);
            border-radius: 12px;
            cursor: pointer;
            margin-bottom: 1rem;
            transition: var(--transition);
        }

        .payment-method:hover {
            border-color: var(--primary-hover);
            transform: translateY(-2px);
        }

        .payment-method.selected {
            border-color: var(--primary-color);
            background: rgba(252, 123, 3, 0.05);
        }

        .payment-icon {
            width: 48px;
            height: 48px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(252, 123, 3, 0.1);
            border-radius: 12px;
            font-size: 1.5rem;
            color: var(--primary-color);
        }

        /* Wallet Section */
        .wallet-balance {
            background: rgba(252, 123, 3, 0.1);
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .wallet-amount {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--primary-color);
        }

        .insufficient-balance {
            color: #dc3545;
            font-size: 0.9rem;
            padding: 0.5rem;
            background: rgba(220, 53, 69, 0.1);
            border-radius: 4px;
            margin-top: 0.5rem;
        }

        /* Order Summary */
        .summary-row {
            display: flex;
            justify-content: space-between;
            padding: 1rem 0;
            border-bottom: 1px solid var(--border-color);
        }

        .total-row {
            font-weight: 600;
            font-size: 1.2rem;
            border-top: 2px solid var(--border-color);
            margin-top: 1rem;
            padding-top: 1.5rem;
        }

        /* Buttons */
        .btn {
            padding: 0.875rem 1.75rem;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            font-weight: 600;
            transition: var(--transition);
            font-size: 1rem;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
            width: 100%;
        }

        .btn-primary:hover:not(:disabled) {
            background: var(--primary-hover);
            transform: translateY(-2px);
        }

        .btn-add-address {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            background: var(--primary-color);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: var(--transition);
            border: none;
        }

        .btn-add-address:hover {
            background: var(--primary-hover);
            transform: translateY(-2px);
        }

        .btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

        /* Loading */
        .loading {
            position: fixed;
            inset: 0;
            background: rgba(255,255,255,0.9);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .loading-spinner {
            width: 48px;
            height: 48px;
            border: 4px solid rgba(252, 123, 3, 0.1);
            border-top: 4px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Error Messages */
        .error-message {
            color: #dc3545;
            font-size: 0.8rem;
            margin-top: 0.25rem;
        }

        /* Notifications */
        .notification-toast {
            background: white;
            padding: 1rem;
            box-shadow: var(--shadow-md);
            border-radius: 8px;
            margin-top: 1rem;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .checkout-grid {
                grid-template-columns: 1fr 320px;
            }
        }

        @media (max-width: 768px) {
            .container {
                padding: 1rem;
                padding-top: 80px;
            }

            .checkout-grid {
                grid-template-columns: 1fr;
            }

            .checkout-item {
                grid-template-columns: 100px 1fr;
            }

            .item-image {
                width: 100px;
                height: 100px;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <%- include('../partials/user/header') %>

    <div class="container">
        <div class="checkout-grid">
            <!-- Left Column -->
            <div class="main-content">
                <!-- Cart Items -->
                <div class="card">
                    <h2>Order Items</h2>
                    <% checkoutData.items.forEach(item => { %>
                    <div class="checkout-item">
                        <img src="<%= item.productImage %>" alt="<%= item.productName %>" class="item-image">
                        <div class="item-details">
                            <h3><%= item.productName %></h3>
                            <div class="item-variant">
                                Color: <%= item.selectedColor.colorName %> | Size: <%= item.selectedSize %>
                            </div>
                            <div class="item-quantity">Quantity: <%= item.quantity %></div>
                        </div>
                        <div class="item-price">₹<%= item.itemTotal.toLocaleString('en-IN') %></div>
                    </div>
                    <% }); %>
                </div>

                <!-- Address Section -->
                <div class="card">
                    <h2>Delivery Address</h2>
                    
                    <div class="address-list">
                        <% addresses.forEach(function(address) { %>
                            <div class="address-card" onclick="selectAddress('<%= address._id %>')" data-address-id="<%= address._id %>">
                                <div class="address-name"><%= address.fullName %></div>
                                <div class="address-details">
                                    <%= address.streetAddress %>,<br>
                                    <%= address.city %>, <%= address.state %>,<br>
                                    <%= address.pincode %><br>
                                    Phone: <%= address.phoneNumber %>
                                </div>
                            </div>
                        <% }); %>
                    </div>

                    <button class="btn-add-address" onclick="showAddressForm()">
                        <i class="fas fa-plus"></i> Add New Address
                    </button>

                    <!-- Address Form -->
                    <div class="address-form-container" id="addressFormContainer">
                        <form id="addressForm" onsubmit="submitAddress(event)">
                            <div class="form-grid">
                                <div class="form-group">
                                    <label for="name">Full Name</label>
                                    <input type="text" id="name" name="name" required>
                                </div>
                        
                                <div class="form-group">
                                    <label for="phone">Phone Number</label>
                                    <input type="tel" id="phone" name="phone" required>
                                </div>
                        
                                <div class="form-group">
                                    <label for="street">Street Address</label>
                                    <input type="text" id="street" name="street" required>
                                </div>
                        
                                <div class="form-group">
                                    <label for="city">City</label>
                                    <input type="text" id="city" name="city" required>
                                </div>
                        
                                <div class="form-group">
                                    <label for="state">State</label>
                                    <input type="text" id="state" name="state" required>
                                </div>
                        
                                <div class="form-group">
                                    <label for="pincode">Pincode</label>
                                    <input type="text" id="pincode" name="pincode" required>
                                </div>
                            </div>
                            <div class="form-buttons">
                                <button type="button" class="btn" onclick="hideAddressForm()">Cancel</button>
                                <button type="submit" class="btn btn-primary">Save Address</button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Payment Methods -->
                <div class="card">
                    <h2>Payment Method</h2>

                    <!-- Wallet Payment -->
                    <div class="wallet-section">
                        <div class="wallet-balance">
                            <span>Wallet Balance:</span>
                            <span class="wallet-amount">₹<%= userWallet.balance.toLocaleString('en-IN') %></span>
                        </div>
                        <% if (userWallet.balance < checkoutData.finalAmount) { %>
                        <div class="insufficient-balance">
                            Insufficient balance. You need ₹<%= (checkoutData.finalAmount - userWallet.balance).toLocaleString('en-IN') %> more.
                        </div>
                        <% } %>
                        <div class="payment-method" data-payment-method="wallet">
                            <div class="payment-icon">
                                <i class="fas fa-wallet"></i>
                            </div>
                            <div>
                                <h3>Pay with Wallet</h3>
                                <p>Use your wallet balance</p>
                            </div>
                        </div>
                    </div>

                    <!-- Razorpay -->
                    <div class="payment-method" data-payment-method="razorpay">
                        <div class="payment-icon">
                            <i class="fas fa-credit-card"></i>
                        </div>
                        <div>
                            <h3>Razorpay</h3>
                            <p>Cards, UPI, NetBanking & more</p>
                        </div>
                    </div>

                    <!-- Cash on Delivery -->
                    <div class="payment-method" data-payment-method="cod">
                        <div class="payment-icon">
                            <i class="fas fa-money-bill-wave"></i>
                        </div>
                        <div>
                            <h3>Cash on Delivery</h3>
                            <p>Pay when you receive</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column - Order Summary -->
            <div class="order-summary card">
                <h2>Order Summary</h2>
                <div class="summary-row">
                    <span>Items Total</span>
                    <span>₹<%= checkoutData.totalAmount.toLocaleString('en-IN') %></span>
                </div>
                <% if (checkoutData.totalDiscount > 0) { %>
                <div class="summary-row">
                    <span>Discount</span>
                    <span>-₹<%= checkoutData.totalDiscount.toLocaleString('en-IN') %></span>
                </div>
                <% } %>
                <div class="summary-row">
                    <span>Delivery Fee</span>
                    <span>₹<%= checkoutData.shippingFee.toLocaleString('en-IN') %></span>
                </div>
                <div class="summary-row total-row">
                    <span>Total Amount</span>
                    <span>₹<%= checkoutData.finalAmount.toLocaleString('en-IN') %></span>
                </div>
                <button id="proceedButton" class="btn btn-primary" onclick="proceedToPayment()" disabled>
                    Select Payment Method
                </button>
            </div>
        </div>

        <!-- Loading Spinner -->
        <div class="loading" id="loading">
            <div class="loading-spinner"></div>
        </div>
    </div>

    <%- include('../partials/user/footer') %>

    <script>
        let selectedAddressId = null;
        let selectedPaymentMethod = null;
        const grandTotal = <%= checkoutData.finalAmount %>;
        const walletBalance = <%= userWallet.balance %>;

        // Initialize page
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.payment-method').forEach(method => {
                method.addEventListener('click', () => {
                    selectPayment(method.getAttribute('data-payment-method'));
                });
            });

            // Add input event listeners for real-time validation
            document.querySelectorAll('#addressForm input').forEach(input => {
                input.addEventListener('input', function() {
                    this.style.borderColor = '#ddd';
                    const errorMessage = this.parentElement.querySelector('.error-message');
                    if (errorMessage) {
                        errorMessage.remove();
                    }
                });
            });
        });

        function selectAddress(addressId) {
            selectedAddressId = addressId;
            
            document.querySelectorAll('.address-card').forEach(card => {
                card.classList.remove('selected');
            });
            
            const selectedCard = document.querySelector(`[data-address-id="${addressId}"]`);
            if (selectedCard) {
                selectedCard.classList.add('selected');
                updateProceedButton();
            }
        }

     

       

        async function submitAddress(event) {
    event.preventDefault();
    
    if (!validateForm()) {
        return;
    }

    const formData = {
        name: document.getElementById('name').value,
        phone: document.getElementById('phone').value,
        street: document.getElementById('street').value,
        city: document.getElementById('city').value,
        state: document.getElementById('state').value,
        pincode: document.getElementById('pincode').value
    };

    try {
        showLoading();
        const response = await fetch('/checkout/address', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        });
        console.log("response",response);
        

        const data = await response.json();
        console.log(data);
        
        hideLoading();

        if (response.ok) {
            // Create and add the new address card
            const addressList = document.querySelector('.address-list');
            const newAddressCard = createAddressCard(data.address);
            addressList.appendChild(newAddressCard);

            // Reset and hide the form
            document.getElementById('addressForm').reset();
            hideAddressForm();

            // Select the new address
            selectAddress(data.address._id);

            // Show success notification
            Swal.fire({
                title: 'Success!',
                text: 'Address added successfully',
                icon: 'success',
                timer: 2000,
                showConfirmButton: false
            });
        } else {
            throw new Error(data.message || 'Failed to add address');
        }
    } catch (error) {
        hideLoading();
        Swal.fire({
            title: 'Error!',
            text: error.message,
            icon: 'error'
        });
    }
}


function createAddressCard(address) {
    const div = document.createElement('div');
    div.className = 'address-card';
    div.setAttribute('onclick', `selectAddress('${address._id}')`);
    div.setAttribute('data-address-id', address._id);

    div.innerHTML = `
        <div class="address-name">${address.fullName}</div>
        <div class="address-details">
            ${address.streetAddress},<br>
            ${address.city}, ${address.state},<br>
            ${address.pincode}<br>
            Phone: ${address.phoneNumber}
        </div>
    `;

    return div;
}
function hideAddressForm() {
    document.getElementById('addressFormContainer').style.display = 'none';
    document.querySelector('.btn-add-address').style.display = 'inline-flex';
    document.getElementById('addressForm').reset();
    
    // Remove any error messages
    document.querySelectorAll('.error-message').forEach(error => error.remove());
    document.querySelectorAll('#addressForm input').forEach(input => {
        input.style.borderColor = '#ddd';
    });
}

function showAddressForm() {
    document.getElementById('addressFormContainer').style.display = 'block';
    document.querySelector('.btn-add-address').style.display = 'none';
}
        function selectPayment(method) {
            if (method === 'wallet' && walletBalance < grandTotal) {
                showNotification('Insufficient wallet balance', 'warning');
                return;
            }

            selectedPaymentMethod = method;
            
            document.querySelectorAll('.payment-method').forEach(pm => {
                pm.classList.remove('selected');
            });
            
            const selectedMethod = document.querySelector(`[data-payment-method="${method}"]`);
            if (selectedMethod) {
                selectedMethod.classList.add('selected');
                updateProceedButton();
            }
        }

        function updateProceedButton() {
            const button = document.getElementById('proceedButton');
            
            if (!selectedAddressId) {
                button.textContent = 'Select Delivery Address';
                button.disabled = true;
                return;
            }

            if (!selectedPaymentMethod) {
                button.textContent = 'Select Payment Method';
                button.disabled = true;
                return;
            }

            button.disabled = false;
            switch (selectedPaymentMethod) {
                case 'wallet':
                    button.textContent = 'Pay with Wallet';
                    break;
                case 'razorpay':
                    button.textContent = 'Pay with Razorpay';
                    break;
                case 'cod':
                    button.textContent = 'Place Order - Cash on Delivery';
                    break;
            }
        }

        function validateForm() {
            let isValid = true;
            
            // Validate Full Name
            const name = document.getElementById('name').value;
            if (!/^[a-zA-Z\s]{3,50}$/.test(name)) {
                showError('name', 'Please enter a valid name (3-50 characters, letters only)');
                isValid = false;
            }

            // Validate Phone Number
            const phone = document.getElementById('phone').value;
            if (!/^\d{10}$/.test(phone)) {
                showError('phone', 'Please enter a valid 10-digit phone number');
                isValid = false;
            }

            // Validate Street Address
            const street = document.getElementById('street').value;
            if (street.trim().length < 5) {
                showError('street', 'Please enter a valid street address');
                isValid = false;
            }

            // Validate City
            const city = document.getElementById('city').value;
            if (!/^[a-zA-Z\s]{2,50}$/.test(city)) {
                showError('city', 'Please enter a valid city name');
                isValid = false;
            }

            // Validate State
            const state = document.getElementById('state').value;
            if (!/^[a-zA-Z\s]{2,50}$/.test(state)) {
                showError('state', 'Please enter a valid state name');
                isValid = false;
            }

            // Validate Pincode
            const pincode = document.getElementById('pincode').value;
            if (!/^\d{6}$/.test(pincode)) {
                showError('pincode', 'Please enter a valid 6-digit pincode');
                isValid = false;
            }

            return isValid;
        }

        function showError(fieldId, message) {
            const field = document.getElementById(fieldId);
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error-message';
            errorDiv.textContent = message;
            
            const existingError = field.parentElement.querySelector('.error-message');
            if (existingError) {
                existingError.remove();
            }
            
            field.parentElement.appendChild(errorDiv);
            field.style.borderColor = '#dc3545';
        }

        function showLoading() {
            document.getElementById('loading').style.display = 'flex';
        }

        function hideLoading() {
            document.getElementById('loading').style.display = 'none';
        }

        function showNotification(message, type = 'info') {
            Swal.fire({
                text: message,
                icon: type,
                toast: true,
                position: 'top-end',
                timer: 3000,
                timerProgressBar: true,
                showConfirmButton: false,
                customClass: {
                    popup: 'notification-toast'
                }
            });
        }

        async function proceedToPayment() {
            try {
                if (!selectedAddressId || !selectedPaymentMethod) {
                    showNotification('Please select both delivery address and payment method', 'warning');
                    return;
                }

                showLoading();
                
                switch(selectedPaymentMethod) {
                    case 'wallet':
                        await processWalletPayment();
                        break;
                    case 'razorpay':
                        await initializeRazorpay();
                        break;
                    case 'cod':
                        await placeOrder({ paymentMethod: 'cod' });
                        break;
                    default:
                        throw new Error('Invalid payment method');
                }
            } catch (error) {
                hideLoading();
                showNotification(error.message || 'Payment failed', 'error');
            }
        }

        async function processWalletPayment() {
            try {
                await placeOrder({
                    paymentMethod: 'wallet',
                    paymentDetails: {
                        walletAmount: grandTotal
                    }
                });
            } catch (error) {
                throw new Error('Wallet payment failed: ' + error.message);
            }
        }

        async function initializeRazorpay() {
            try {
                const response = await fetch('/create-razorpay-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ amount: grandTotal })
                });

                const orderData = await response.json();
                
                if (!orderData.success) {
                    throw new Error(orderData.message || 'Failed to create order');
                }

                const options = {
                    key: '<%= razorpayKeyId %>',
                    amount: orderData.amount,
                    currency: 'INR',
                    name: '<%= storeName %>',
                    description: 'Order Payment',
                    order_id: orderData.orderId,
                    prefill: {
                        name: '<%= user.name %>',
                        email: '<%= user.email %>',
                        contact: '<%= user.phone %>'
                    },
                    handler: function(response) {
                        hideLoading();
                        verifyPayment(response);
                    },
                    modal: {
                        ondismiss: function() {
                            hideLoading();
                            showNotification('Payment cancelled', 'warning');
                        }
                    },
                    theme: {
                        color: '#fc7b03'
                    }
                };

                const rzp = new Razorpay(options);
                rzp.open();

            } catch (error) {
                throw new Error('Payment initialization failed: ' + error.message);
            }
        }

        async function verifyPayment(response) {
            try {
                showLoading();
                
                const verificationResponse = await fetch('/verify-razorpay-payment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_signature: response.razorpay_signature
                    })
                });

                const data = await verificationResponse.json();
                
                if (data.success) {
                    await placeOrder({
                        paymentMethod: 'razorpay',
                        paymentDetails: response
                    });
                } else {
                    throw new Error(data.message || 'Payment verification failed');
                }
            } catch (error) {
                throw new Error('Payment verification failed: ' + error.message);
            }
        }

        async function placeOrder(paymentInfo = {}) {
    try {
        const response = await fetch('/placeOrder', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                addressId: selectedAddressId,
                items: <%- JSON.stringify(checkoutData.items) %>,
                totalAmount: grandTotal, // This should include shipping fee
                paymentMethod: selectedPaymentMethod,
                ...paymentInfo
            })
        });

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message || 'Failed to place order');
        }

        await Swal.fire({
            title: 'Order Placed Successfully!',
            text: selectedPaymentMethod === 'cod' 
                ? 'Your order has been confirmed. You can pay at the time of delivery.'
                : 'Your payment has been processed and order is confirmed.',
            icon: 'success',
            confirmButtonColor: '#fc7b03'
        });

        window.location.href = `/orderSuccess/${data.orderId}`;

    } catch (error) {
        throw new Error('Order placement failed: ' + error.message);
    }
}
    </script>
</body>
</html>