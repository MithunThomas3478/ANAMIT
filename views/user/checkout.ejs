<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout | <%= storeName %></title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        :root {
            --primary-color: #fc7b03;
            --primary-hover: #ff9000;
            --text-color: #333;
            --text-light: #666;
            --border-color: #e0e0e0;
            --bg-color: #f5f5f5;
            --shadow-sm: 0 2px 4px rgba(0,0,0,0.05);
            --shadow-md: 0 4px 6px rgba(0,0,0,0.1);
            --transition: all 0.3s ease;
        }

        body {
            font-family: 'Inter', system-ui, -apple-system, sans-serif;
            line-height: 1.5;
            margin: 0;
            padding: 0;
            background: var(--bg-color);
            color: var(--text-color);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            padding-top: 100px;
        }

        .checkout-grid {
            display: grid;
            grid-template-columns: 1fr 380px;
            gap: 2rem;
        }

        .card {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: var(--shadow-md);
            margin-bottom: 2rem;
        }

        h2 {
            margin: 0 0 1.5rem;
            font-size: 1.5rem;
            color: var(--text-color);
        }

        /* Order Items */
        .checkout-item {
            display: grid;
            grid-template-columns: 120px 1fr auto;
            gap: 1.5rem;
            padding: 1.5rem;
            background: white;
            border-radius: 8px;
            box-shadow: var(--shadow-sm);
            margin-bottom: 1rem;
        }

        .item-image {
            width: 120px;
            height: 120px;
            object-fit: cover;
            border-radius: 8px;
        }

        .item-details {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .item-details h3 {
            margin: 0;
            font-size: 1.1rem;
        }

        .item-variant {
            color: var(--text-light);
            font-size: 0.95rem;
        }

        .original-price {
            text-decoration: line-through;
            color: var(--text-light);
            font-size: 0.9rem;
        }

        .discounted-price {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--primary-color);
        }

        .savings-badge {
            background: #e8f5e9;
            color: #2e7d32;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        /* Delivery Address */
        .address-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .address-card {
            border: 2px solid var(--border-color);
            border-radius: 12px;
            padding: 1.5rem;
            cursor: pointer;
            transition: var(--transition);
            background: white;
            position: relative;
        }

        .address-card:hover {
            border-color: var(--primary-color);
            transform: translateY(-2px);
        }

        .address-card.selected {
            border-color: var(--primary-color);
            background-color: rgba(252, 123, 3, 0.05);
        }

        .address-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .address-overlay.active {
            display: flex;
        }

        .address-form-container {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--text-color);
        }

        .form-group input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-size: 1rem;
            transition: var(--transition);
        }

        .form-group input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(252, 123, 3, 0.1);
        }

        .error-message {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .form-group input.error {
            border-color: #dc3545;
        }
        /* Payment Methods */
        .payment-methods {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .payment-method {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            cursor: pointer;
            transition: var(--transition);
        }

        .payment-method:hover {
            border-color: var(--primary-hover);
            transform: translateY(-2px);
        }

        .payment-method.selected {
            border-color: var(--primary-color);
            background: rgba(252, 123, 3, 0.05);
        }

        .payment-icon {
            width: 48px;
            height: 48px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(252, 123, 3, 0.1);
            border-radius: 8px;
            font-size: 1.5rem;
            color: var(--primary-color);
        }

        /* Coupon Section */
        .coupon-section {
            border-bottom: 2px solid var(--border-color);
            padding-bottom: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .coupon-input-group {
            display: flex;
            gap: 0.5rem;
        }

        .coupon-input {
            flex: 1;
            padding: 0.75rem;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-size: 0.9rem;
            transition: var(--transition);
        }

        .coupon-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(252, 123, 3, 0.1);
        }

        .applied-coupon {
            background: rgba(252, 123, 3, 0.05);
            border-radius: 8px;
            padding: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .coupon-info {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .coupon-code {
            font-weight: 600;
            color: var(--primary-color);
        }

        .remove-coupon {
            background: none;
            border: none;
            color: #dc3545;
            font-size: 0.9rem;
            cursor: pointer;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            transition: var(--transition);
        }

        .remove-coupon:hover {
            background: rgba(220, 53, 69, 0.1);
        }

        /* Order Summary */
        .summary-row {
            display: flex;
            justify-content: space-between;
            padding: 1rem 0;
            border-bottom: 1px solid var(--border-color);
        }

        .summary-row:last-child {
            border-bottom: none;
        }

        .discount-amount {
            color: #2e7d32;
        }

        .summary-total {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--primary-color);
            padding-top: 1rem;
            margin-top: 1rem;
            border-top: 2px solid var(--border-color);
        }

        /* Button Styles */
        .btn {
            padding: 0.75rem 1rem;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
            width: 100%;
        }

        .btn-primary:hover {
            background: var(--primary-hover);
        }

        .btn-secondary {
            background: transparent;
            border: 2px solid var(--border-color);
        }

        .btn-secondary:hover {
            border-color: var(--primary-color);
            color: var(--primary-color);
        }
   
    .available-coupons-section {
        margin-top: 1rem;
    }

    .view-coupons-btn {
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        margin-top: 0.5rem;
        background: white;
        border: 2px dashed var(--primary-color);
        color: var(--primary-color);
        transition: var(--transition);
    }

    .view-coupons-btn:hover {
        background: rgba(252, 123, 3, 0.05);
    }

    .modal {
        display: none;
        position: fixed;
        inset: 0;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .modal.active {
        opacity: 1;
    }

    .modal-content {
        position: relative;
        background: white;
        width: 90%;
        max-width: 600px;
        margin: 2rem auto;
        border-radius: 12px;
        box-shadow: var(--shadow-md);
        max-height: 90vh;
        display: flex;
        flex-direction: column;
    }

    .modal-header {
        padding: 1.5rem;
        border-bottom: 1px solid var(--border-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header h3 {
        margin: 0;
        font-size: 1.25rem;
        color: var(--text-color);
    }

    .close-modal {
        background: none;
        border: none;
        font-size: 1.25rem;
        color: var(--text-light);
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 50%;
        transition: var(--transition);
    }

    .close-modal:hover {
        background: var(--bg-color);
        color: var(--text-color);
    }

    .modal-body {
        padding: 1.5rem;
        overflow-y: auto;
    }

    .coupons-grid {
        display: grid;
        gap: 1rem;
    }

    .coupon-card {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    border: 2px solid var(--border-color);
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
}

.coupon-card:hover {
    transform: translateY(-2px);
    border-color: var(--primary-color);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}
.no-coupons-message {
    text-align: center;
    padding: 2rem;
    color: var(--text-light);
}
.coupon-loading {
    text-align: center;
    padding: 2rem;
}
.coupon-error {
    color: #dc3545;
    text-align: center;
    padding: 1rem;
}
    .coupon-card::before {
        content: '';
        position: absolute;
        left: -4px;
        top: 50%;
        width: 8px;
        height: 8px;
        background: var(--bg-color);
        border-radius: 50%;
        transform: translateY(-50%);
    }

    .coupon-card::after {
        content: '';
        position: absolute;
        right: -4px;
        top: 50%;
        width: 8px;
        height: 8px;
        background: var(--bg-color);
        border-radius: 50%;
        transform: translateY(-50%);
    }

    .coupon-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 1rem;
    }

    .coupon-code {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--primary-color);
    }

    .discount-badge {
        background: rgba(252, 123, 3, 0.1);
        color: var(--primary-color);
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: 500;
    }

    .coupon-description {
        color: var(--text-light);
        margin-bottom: 1rem;
        font-size: 0.95rem;
    }

    .coupon-meta {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
        gap: 1rem;
        font-size: 0.9rem;
    }

    .meta-item {
        color: var(--text-light);
    }

    .meta-label {
        font-weight: 500;
        color: var(--text-color);
    }

    @media (max-width: 768px) {
        .modal-content {
            width: 95%;
            margin: 1rem auto;
        }

        .coupon-header {
            flex-direction: column;
            gap: 0.5rem;
        }

        .coupon-meta {
            grid-template-columns: 1fr;
        }
    }

        /* Loading State */
        .loading {
            position: fixed;
            inset: 0;
            background: rgba(255,255,255,0.9);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .spinner {
            width: 48px;
            height: 48px;
            border: 4px solid rgba(252, 123, 3, 0.1);
            border-left-color: var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .checkout-grid {
                grid-template-columns: 1fr;
            }

            .container {
                padding: 1rem;
            }
        }

        @media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
            }

            .checkout-item {
                grid-template-columns: 1fr;
                text-align: center;
            }

            .item-image {
                width: 100%;
                max-width: 200px;
                margin: 0 auto;
            }

            .item-price {
                align-items: center;
            }
        }
    </style>
</head>
<body>
    <%- include('../partials/user/header') %>

    <div class="container">
        <div class="checkout-grid">
            <!-- Main Content -->
            <div class="main-content">
                <!-- Order Items -->
                <div class="card">
                    <h2>Order Items</h2>
                    <% checkoutData.items.forEach(item => { %>
                        <div class="checkout-item">
                            <img src="<%= item.productImage %>" alt="<%= item.productName %>" class="item-image">
                            <div class="item-details">
                                <h3><%= item.productName %></h3>
                                <div class="item-variant">
                                    Color: <%= item.selectedColor.colorName %>
                                    | Size: <%= item.selectedSize %>
                                    | Qty: <%= item.quantity %>
                                </div>
                                <% if (item.discountPercent > 0) { %>
                                    <div class="savings-badge">
                                        <i class="fas fa-tags"></i>
                                        <%= item.offerType === 'product' ? 'Product Offer' : 'Category Offer' %>: 
                                        <%= item.discountPercent %>% off
                                    </div>
                                <% } %>
                            </div>
                            <div class="item-price">
                                <% if (item.discountPercent > 0) { %>
                                    <span class="original-price">₹<%= item.price.toLocaleString('en-IN') %></span>
                                    <span class="discounted-price">₹<%= item.discountedPrice.toLocaleString('en-IN') %></span>
                                <% } else { %>
                                    <span class="final-price">₹<%= item.price.toLocaleString('en-IN') %></span>
                                <% } %>
                            </div>
                        </div>
                    <% }); %>
                </div>

                <!-- Delivery Address -->
                <div class="card">
                    <h2>Delivery Address</h2>
                    <div class="address-list">
                        <% addresses.forEach(address => { %>
                            <div class="address-card" onclick="selectAddress('<%= address._id %>')" data-address-id="<%= address._id %>">
                                <div class="address-name"><%= address.fullName %></div>
                                <div class="address-details">
                                    <%= address.streetAddress %><br>
                                    <%= address.city %>, <%= address.state %><br>
                                    <%= address.pincode %><br>
                                    Phone: <%= address.phoneNumber %>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                    <button class="btn btn-primary" onclick="showAddressForm()">
                        <i class="fas fa-plus"></i> Add New Address
                    </button>
                </div>
                
                <!-- Payment Methods -->
                <div class="card">
                    <h2>Payment Method</h2>
                    <div class="payment-methods">
                        <!-- Wallet Payment -->
                        <div class="wallet-section">
                            <div class="wallet-balance">
                                <span>Wallet Balance:</span>
                               <!-- Continuing from wallet balance -->
                               <span class="wallet-amount">₹<%= userWallet.balance.toLocaleString('en-IN') %></span>
                            </div>
                            <% if (userWallet.balance < checkoutData.finalAmount) { %>
                                <div class="insufficient-balance">
                                    Insufficient balance. You need ₹<%= (checkoutData.finalAmount - userWallet.balance).toLocaleString('en-IN') %> more.
                                </div>
                            <% } %>
                            <div class="payment-method <%= userWallet.balance < checkoutData.finalAmount ? 'disabled' : '' %>"
                                 data-payment-method="wallet"
                                 onclick="<%= userWallet.balance >= checkoutData.finalAmount ? 'selectPayment(\'wallet\')' : '' %>">
                                <div class="payment-icon">
                                    <i class="fas fa-wallet"></i>
                                </div>
                                <div class="payment-info">
                                    <h3>Pay with Wallet</h3>
                                    <p>Use your wallet balance</p>
                                </div>
                            </div>
                        </div>

                        <!-- Razorpay -->
                        <div class="payment-method" data-payment-method="razorpay" onclick="selectPayment('razorpay')">
                            <div class="payment-icon">
                                <i class="fas fa-credit-card"></i>
                            </div>
                            <div class="payment-info">
                                <h3>Razorpay</h3>
                                <p>Cards, UPI, NetBanking & more</p>
                            </div>
                        </div>

                        <!-- Cash on Delivery -->
                        <div class="payment-method" data-payment-method="cod" onclick="selectPayment('cod')">
                            <div class="payment-icon">
                                <i class="fas fa-money-bill-wave"></i>
                            </div>
                            <div class="payment-info">
                                <h3>Cash on Delivery</h3>
                                <p>Pay when you receive</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Summary -->
            <div class="card order-summary">
                <h2>Order Summary</h2>

                <!-- Coupon Section -->
                <div class="coupon-section">
                    <% if (appliedCoupon) { %>
                        <div class="applied-coupon">
                            <div class="coupon-info">
                                <span class="coupon-code"><%= appliedCoupon.code %></span>
                                <span class="coupon-discount">
                                    <%= appliedCoupon.discountType === 'percentage' ? 
                                        `${appliedCoupon.discountValue}% off` :  // Changed to discountValue
                                        `₹${appliedCoupon.discountValue} off` %>
                                </span>
                            </div>
                            <button class="remove-coupon" onclick="removeCoupon()">
                                <i class="fas fa-times"></i> Remove
                            </button>
                        </div>
                    <% } else { %>
                        <div class="coupon-input-group">
                            <input 
                                type="text" 
                                id="couponCode" 
                                placeholder="Enter coupon code"
                                class="coupon-input"
                            >
                            <button class="btn btn-primary" onclick="applyCoupon()" style="width: auto;">
                                Apply
                            </button>
                        </div>
                        <div id="couponError" class="error-message" style="display: none;"></div>
                    <% } %>
                  
                
                <div class="available-coupons-section">
                    <button class="btn btn-secondary view-coupons-btn" onclick="openCouponsModal()">
                        <i class="fas fa-ticket-alt"></i> View Available Coupons
                    </button>
                </div>
                <div id="couponsModal" class="modal">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3>Available Coupons</h3>
                            <button class="close-modal" onclick="closeCouponsModal()">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div id="availableCouponsContainer" class="coupons-grid">
                                <!-- Coupons will be dynamically inserted here -->
                            </div>
                        </div>
                    </div>
                </div>
                </div>
                 
                <!-- Subtotal -->
                <div class="summary-row">
                    <span>Subtotal</span>
                    <span>₹<%= checkoutData.subtotal.toLocaleString('en-IN') %></span>
                </div>

                <!-- Discount -->
                <% if (checkoutData.totalDiscount > 0) { %>
                    <div class="summary-row discount-row">
                        <span>Total Discount</span>
                        <span class="discount-amount">-₹<%= checkoutData.totalDiscount.toLocaleString('en-IN') %></span>
                    </div>
                <% } %>
                      <!-- Coupon Discount -->
                <% if (checkoutData.couponDiscount > 0) { %>
                    <div class="summary-row discount-row">
                        <span>Coupon Discount</span>
                        <span class="discount-amount">-₹<%= checkoutData.couponDiscount.toLocaleString('en-IN') %></span>
                    </div>
                <% } %>
                <!-- Shipping -->
                <div class="summary-row">
                    <span>Shipping Fee</span>
                    <span>₹<%= checkoutData.shippingFee.toLocaleString('en-IN') %></span>
                </div>

                <!-- Total -->
                <div class="summary-total">
                    <span>Total Amount</span>
                    <span>₹<%= checkoutData.finalAmount.toLocaleString('en-IN') %></span>
                </div>

                <!-- Checkout Button -->
                <button id="proceedButton" class="btn btn-primary" onclick="proceedToPayment()" disabled>
                    Select Address & Payment Method
                </button>
            </div>
        </div>
    </div>
    <!-- Address Form Overlay -->
    <div class="address-overlay" id="addressFormOverlay">
        <div class="address-form-container">
            <h3>Add New Address</h3>
            <form id="newAddressForm" onsubmit="handleAddressSubmit(event)">
                <div class="form-grid">
                    <div class="form-group">
                        <label for="fullName">Full Name</label>
                        <input type="text" id="fullName" name="fullName" required minlength="3">
                    </div>
                    <div class="form-group">
                        <label for="phone">Phone Number</label>
                        <input type="tel" id="phone" name="phone" required pattern="[0-9]{10}">
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="street">Street Address</label>
                    <input type="text" id="street" name="street" required>
                </div>

                <div class="form-grid">
                    <div class="form-group">
                        <label for="city">City</label>
                        <input type="text" id="city" name="city" required>
                    </div>
                    <div class="form-group">
                        <label for="state">State</label>
                        <input type="text" id="state" name="state" required>
                    </div>
                    <div class="form-group">
                        <label for="pincode">Pincode</label>
                        <input type="text" id="pincode" name="pincode" required pattern="[0-9]{6}">
                    </div>
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">Save Address</button>
                    <button type="button" class="btn btn-secondary" onclick="hideAddressForm()">Cancel</button>
                </div>
            </form>
        </div>
    </div>
    <!-- Loading Overlay -->
    <div class="loading" id="loading">
        <div class="spinner"></div>
    </div>

    <%- include('../partials/user/footer') %>

    <script>
        let selectedAddressId = null;
        let selectedPaymentMethod = null;
        const grandTotal = <%= checkoutData.finalAmount %>;
        const walletBalance = <%= userWallet.balance %>;
        let couponsLoaded = false;
        function validateInput(input) {
            let isValid = true;
            const value = input.value.trim();

            switch(input.id) {
                case 'fullName':
                    if (value.length < 3) {
                        showError(input, 'Name must be at least 3 characters long');
                        isValid = false;
                    } else if (!/^[a-zA-Z\s]*$/.test(value)) {
                        showError(input, 'Name should contain only letters and spaces');
                        isValid = false;
                    }
                    break;
                case 'phone':
                    if (!/^\d{10}$/.test(value)) {
                        showError(input, 'Phone number must be exactly 10 digits');
                        isValid = false;
                    }
                    break;
                case 'street':
                    if (value.length < 5) {
                        showError(input, 'Street address must be at least 5 characters long');
                        isValid = false;
                    }
                    break;
                case 'city':
                case 'state':
                    if (!/^[a-zA-Z\s]*$/.test(value)) {
                        showError(input, `${input.id.charAt(0).toUpperCase() + input.id.slice(1)} should contain only letters and spaces`);
                        isValid = false;
                    }
                    break;
                case 'pincode':
                    if (!/^\d{6}$/.test(value)) {
                        showError(input, 'Pincode must be exactly 6 digits');
                        isValid = false;
                    }
                    break;
            }

            if (isValid) {
                clearError(input);
            }

            return isValid;
        }

        function showError(input, message) {
            const formGroup = input.closest('.form-group');
            const existingError = formGroup.querySelector('.error-message');
            
            if (!existingError) {
                const errorDiv = document.createElement('div');
                errorDiv.className = 'error-message';
                errorDiv.textContent = message;
                formGroup.appendChild(errorDiv);
            } else {
                existingError.textContent = message;
            }
            
            input.classList.add('error');
        }

        function clearError(input) {
            const formGroup = input.closest('.form-group');
            const existingError = formGroup.querySelector('.error-message');
            if (existingError) {
                existingError.remove();
            }
            input.classList.remove('error');
        }

        // Add input event listeners
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.getElementById('newAddressForm');
            if (form) {
                form.querySelectorAll('input').forEach(input => {
                    input.addEventListener('input', function() {
                        clearError(this);
                        
                        // Real-time validation
                        switch(this.id) {
                            case 'fullName':
                                if (!/^[a-zA-Z\s]*$/.test(this.value)) {
                                    showError(this, 'Name should contain only letters and spaces');
                                }
                                break;
                            case 'pincode':
                                if (this.value && !/^\d{0,6}$/.test(this.value)) {
                                    this.value = this.value.replace(/\D/g, '').slice(0, 6);
                                }
                                break;
                            case 'phone':
                                if (this.value && !/^\d{0,10}$/.test(this.value)) {
                                    this.value = this.value.replace(/\D/g, '').slice(0, 10);
                                }
                                break;
                            case 'city':
                            case 'state':
                                if (!/^[a-zA-Z\s]*$/.test(this.value)) {
                                    showError(this, `${this.id.charAt(0).toUpperCase() + this.id.slice(1)} should contain only letters and spaces`);
                                }
                                break;
                        }
                    });
                });
            }
        });

        // Address form functions
        function showAddressForm() {
            document.getElementById('addressFormOverlay').classList.add('active');
            document.getElementById('newAddressForm').reset();
            document.querySelectorAll('.error-message').forEach(el => el.remove());
            document.querySelectorAll('.error').forEach(el => el.classList.remove('error'));
        }

        function hideAddressForm() {
            Swal.fire({
                title: 'Are you sure?',
                text: "You will lose all entered information!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#ff8800',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, cancel it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    document.getElementById('addressFormOverlay').classList.remove('active');
                    document.getElementById('newAddressForm').reset();
                }
            });
        }

        function createAddressCard(address) {
    const addressCard = document.createElement('div');
    addressCard.className = 'address-card';
    addressCard.setAttribute('data-address-id', address._id);
    addressCard.setAttribute('onclick', `selectAddress('${address._id}')`);
    
    addressCard.innerHTML = `
        <div class="address-name">${address.name || address.fullName}</div>
        <div class="address-details">
            ${address.street || address.streetAddress}<br>
            ${address.city}, ${address.state}<br>
            ${address.pincode}<br>
            Phone: ${address.phone || address.phoneNumber}
        </div>
    `;

    return addressCard;
}


function attachInputListeners() {
    const form = document.getElementById('newAddressForm');
    if (form) {
        form.querySelectorAll('input').forEach(input => {
            input.addEventListener('input', function() {
                clearError(this);
            });
        });
    }
}

        async function handleAddressSubmit(event) {
            event.preventDefault();
            
            const form = event.target;
            let isValid = true;
            
            form.querySelectorAll('input').forEach(input => {
                if (!validateInput(input)) {
                    isValid = false;
                }
            });

            if (!isValid) {
                showNotification('Please fill all fields correctly', 'error');
                return;
            }

            const formData = {
                name: form.fullName.value,
                street: form.street.value,
                city: form.city.value,
                state: form.state.value,
                pincode: form.pincode.value,
                phone: form.phone.value
            };

            try {
                showLoading();
                const response = await fetch('/checkout/address', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                if (data.success) {
                    const addressCard = createAddressCard(data.address);
            document.querySelector('.address-list').appendChild(addressCard);
            selectAddress(data.address._id);
            
            // Explicitly close the address form overlay
            document.getElementById('addressFormOverlay').classList.remove('active');
            
            // Reset the form
            form.reset();
            
            // Show success notification
            showNotification('Address added successfully', 'success');
                } else {
                    throw new Error(data.message || 'Failed to add address');
                }
            } catch (error) {
                showNotification(error.message, 'error');
            } finally {
                hideLoading();
            }
        }

        
        // Initialize page
        document.addEventListener('DOMContentLoaded', () => {
            attachInputListeners();
        });

        // Coupon Functions
        async function applyCoupon() {
            const couponCode = document.getElementById('couponCode').value.trim();
            const couponError = document.getElementById('couponError');
            
            if (!couponCode) {
                showCouponError('Please enter a coupon code');
                return;
            }

            showLoading();

            try {
                const response = await fetch('/checkout/apply-coupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ couponCode })
                });

                const data = await response.json();

                if (data.success) {
                    window.location.reload();
                } else {
                    showCouponError(data.message);
                }
            } catch (error) {
                showCouponError('Failed to apply coupon. Please try again.');
            } finally {
                hideLoading();
            }
        }

        async function removeCoupon() {
            showLoading();
            try {
                const response = await fetch('/checkout/remove-coupon', {
                    method: 'POST'
                });

                const data = await response.json();

                if (data.success) {
                    window.location.reload();
                } else {
                    showNotification(data.message, 'error');
                }
            } catch (error) {
                showNotification('Failed to remove coupon', 'error');
            } finally {
                hideLoading();
            }
        }

        function showCouponError(message) {
            const errorElement = document.getElementById('couponError');
            errorElement.textContent = message;
            errorElement.style.display = 'block';
            
            setTimeout(() => {
                errorElement.style.display = 'none';
            }, 3000);
        }
        function openCouponsModal() {
        const modal = document.getElementById('couponsModal');
        modal.style.display = 'block';
        setTimeout(() => modal.classList.add('active'), 10);
        fetchAvailableCoupons();
    }

    function closeCouponsModal() {
        const modal = document.getElementById('couponsModal');
        modal.classList.remove('active');
        setTimeout(() => modal.style.display = 'none', 300);
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
        const modal = document.getElementById('couponsModal');
        if (event.target === modal) {
            closeCouponsModal();
        }
    }

    // Format date helper
    function formatDate(dateString) {
        const options = { day: 'numeric', month: 'short', year: 'numeric' };
        return new Date(dateString).toLocaleDateString('en-IN', options);
    }

    // Fetch and render available coupons
    async function fetchAvailableCoupons() {
    if (couponsLoaded) return;
    
    const container = document.getElementById('availableCouponsContainer');
    container.innerHTML = '<div class="text-center py-4">Loading available coupons...</div>';
    
    try {
        const response = await fetch('/checkout/available-coupons');
        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message || 'Failed to fetch coupons');
        }
        
        couponsLoaded = true;
        renderCoupons(data.coupons);
        
    } catch (error) {
        console.error('Error:', error);
        container.innerHTML = `
            <div class="text-center py-4 text-danger">
                <i class="fas fa-exclamation-circle"></i>
                Failed to load coupons. Please try again.
                <button onclick="fetchAvailableCoupons()" class="btn btn-link">
                    Retry
                </button>
            </div>
        `;
    }
}
function formatCurrency(amount) {
    return new Intl.NumberFormat('en-IN', {
        style: 'currency',
        currency: 'INR',
        maximumFractionDigits: 0
    }).format(amount);
}
function renderCoupons(coupons) {
    const container = document.getElementById('availableCouponsContainer');
    
    if (!coupons || coupons.length === 0) {
        container.innerHTML = `
            <div class="text-center py-4 text-muted">
                <i class="fas fa-ticket-alt mb-2"></i>
                <p>No coupons available at the moment</p>
            </div>
        `;
        return;
    }

    container.innerHTML = coupons.map(coupon => `
        <div class="coupon-card" onclick="selectCoupon('${coupon.code}')">
            <div class="coupon-header">
                <div class="coupon-code">${coupon.code}</div>
                <div class="discount-badge">
                    ${coupon.discountType === 'percentage' 
                        ? `${coupon.discountValue}% OFF` 
                        : `₹${coupon.discountValue} OFF`}
                </div>
            </div>
            ${coupon.description ? `
                <div class="coupon-description">${coupon.description}</div>
            ` : ''}
            <div class="coupon-meta">
                <div class="meta-item">
                    <div class="meta-label">Min. Purchase:</div>
                    ${formatCurrency(coupon.minPurchaseAmount)}
                </div>
                <div class="meta-item">
                    <div class="meta-label">Max. Discount:</div>
                    ${formatCurrency(coupon.maxDiscountAmount)}
                </div>
                <div class="meta-item">
                    <div class="meta-label">Valid Till:</div>
                    ${formatDate(coupon.validUntil)}
                </div>
            </div>
        </div>
    `).join('');
}

    function selectCoupon(code) {
        document.getElementById('couponCode').value = code;
        applyCoupon();
        closeCouponsModal();
    }
        // Address Functions
        function selectAddress(addressId) {
            selectedAddressId = addressId;
            
            document.querySelectorAll('.address-card').forEach(card => {
                card.classList.remove('selected');
            });
            
            const selectedCard = document.querySelector(`[data-address-id="${addressId}"]`);
            if (selectedCard) {
                selectedCard.classList.add('selected');
                updateCheckoutButton();
            }
        }

        // Payment Functions
        function selectPayment(method) {
            if (method === 'wallet' && walletBalance < grandTotal) {
                showNotification('Insufficient wallet balance', 'warning');
                return;
            }

            selectedPaymentMethod = method;
            
            document.querySelectorAll('.payment-method').forEach(pm => {
                pm.classList.remove('selected');
            });
            
            const selectedMethod = document.querySelector(`[data-payment-method="${method}"]`);
            if (selectedMethod) {
                selectedMethod.classList.add('selected');
                updateCheckoutButton();
            }
        }

        function updateCheckoutButton() {
            const button = document.getElementById('proceedButton');
            
            if (!selectedAddressId) {
                button.textContent = 'Select Delivery Address';
                button.disabled = true;
                return;
            }

            if (!selectedPaymentMethod) {
                button.textContent = 'Select Payment Method';
                button.disabled = true;
                return;
            }

            button.disabled = false;
            switch (selectedPaymentMethod) {
                case 'wallet':
                    button.textContent = 'Pay with Wallet';
                    break;
                case 'razorpay':
                    button.textContent = 'Pay with Razorpay';
                    break;
                case 'cod':
                    button.textContent = 'Place Order (Cash on Delivery)';
                    break;
            }
        }

        // Utility Functions
        function safeRedirect(url, timeout = 500) {
            hideLoading();
            setTimeout(() => {
                window.location.href = url;
            }, timeout);
        }
        function showLoading() {
            document.getElementById('loading').style.display = 'flex';
        }

        function hideLoading() {
            document.getElementById('loading').style.display = 'none';
        }

        function showNotification(message, type = 'info') {
            Swal.fire({
                text: message,
                icon: type,
                toast: true,
                position: 'top-end',
                timer: 3000,
                showConfirmButton: false
            });
        }

        // Payment Processing
        async function proceedToPayment() {
    if (!selectedAddressId || !selectedPaymentMethod) {
        showNotification('Please select both delivery address and payment method', 'warning');
        return;
    }

    showLoading();

    try {
        switch(selectedPaymentMethod) {
            case 'wallet':
                await processWalletPayment();
                break;
            case 'razorpay':
                await initializeRazorpay();
                break;
            case 'cod':
                await placeOrder('cod');
                break;
        }
    } catch (error) {
        hideLoading();
        showNotification(error.message, 'error');
    }
}
        async function processWalletPayment() {
    try {
        await placeOrder('wallet');
    } catch (error) {
        hideLoading();
        showNotification('Wallet payment failed: ' + error.message, 'error');
    }
}

        async function initializeRazorpay() {
            try {
                const response = await fetch('/checkout/create-razorpay-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ amount: grandTotal })
                });

                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.message);
                }

                const options = {
                    key: '<%= razorpayKeyId %>',
                    amount: data.amount,
                    currency: 'INR',
                    name: '<%= storeName %>',
                    description: 'Order Payment',
                    order_id: data.orderId,
                    handler: async function(response) {
                        hideLoading();
                        await verifyPayment(response);
                    },
                    prefill: {
                        name: '<%= user.name %>',
                        email: '<%= user.email %>',
                        contact: '<%= user.phone %>'
                    },
                    theme: {
                        color: '#fc7b03'
                    }
                };

                const rzp = new Razorpay(options);
                rzp.open();

            } catch (error) {
                hideLoading();
                throw new Error('Payment initialization failed: ' + error.message);
            }
        }

        async function verifyPayment(razorpayResponse) {
    showLoading();
    try {
        const verification = await fetch('/checkout/verify-razorpay-payment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(razorpayResponse)
        });

        const data = await verification.json();
        
        if (data.success) {
            await placeOrder('razorpay', razorpayResponse);
        } else {
            hideLoading();
            throw new Error(data.message);
        }
    } catch (error) {
        hideLoading();
        showNotification('Payment verification failed: ' + error.message, 'error');
    }
}

        async function placeOrder(paymentMethod, paymentDetails = {}) {
    try {
        const response = await fetch('/checkout/placeOrder', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                addressId: selectedAddressId,
                items: <%- JSON.stringify(checkoutData.items) %>,
                paymentMethod,
                paymentDetails
            })
        });

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message);
        }

        // Hide loading spinner before redirecting
        hideLoading();
        
        // Redirect to success page
        if (data.success) {
            safeRedirect(`/checkout/orderSuccess/${data.orderId}`);
            return data;
        }

    } catch (error) {
        hideLoading();
        throw error;
    }
}
    </script>
</body>
</html>