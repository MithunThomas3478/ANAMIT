<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout | <%= storeName %></title>
    <!-- External CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <!-- External Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        :root {
            --primary-color: #fc7b03;
            --primary-hover: #ff9000;
            --text-color: #333;
            --text-light: #666;
            --border-color: #e0e0e0;
            --bg-color: #f5f5f5;
            --shadow-sm: 0 2px 4px rgba(0,0,0,0.05);
            --shadow-md: 0 4px 6px rgba(0,0,0,0.1);
            --shadow-lg: 0 10px 15px rgba(0,0,0,0.1);
            --transition: all 0.3s ease;
        }

        body {
            background: var(--bg-color);
            color: var(--text-color);
            font-family: 'Inter', system-ui, -apple-system, sans-serif;
            line-height: 1.5;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            padding-top: 100px;
        }

        .checkout-grid {
            display: grid;
            grid-template-columns: 1fr 380px;
            gap: 2rem;
        }

        .card {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: var(--shadow-md);
            margin-bottom: 2rem;
        }

        h2 {
            margin: 0 0 1.5rem;
            font-size: 1.5rem;
            color: var(--text-color);
        }

        /* Cart Items */
        .checkout-item {
            display: grid;
            grid-template-columns: 120px 1fr auto;
            gap: 1.5rem;
            padding: 1.5rem;
            background: white;
            border-radius: 8px;
            box-shadow: var(--shadow-sm);
            margin-bottom: 1rem;
        }

        .item-image {
            width: 120px;
            height: 120px;
            object-fit: cover;
            border-radius: 8px;
        }

        .item-details {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .item-details h3 {
            margin: 0;
            font-size: 1.1rem;
            color: var(--text-color);
        }

        .item-variant, .item-quantity {
            color: var(--text-light);
            font-size: 0.95rem;
        }

        .item-price {
            font-weight: 600;
            color: var(--text-color);
            font-size: 1.1rem;
        }

        /* Address Section */
        .address-card {
            border: 2px solid var(--border-color);
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            cursor: pointer;
            transition: var(--transition);
        }

        .address-card:hover {
            border-color: var(--primary-hover);
            transform: translateY(-2px);
        }

        .address-card.selected {
            border-color: var(--primary-color);
            background-color: rgba(252, 123, 3, 0.05);
        }

        .address-details p {
            margin: 0.5rem 0;
        }

        .address-details .name {
            font-weight: 600;
            color: var(--text-color);
        }

        /* Payment Methods */
        .payment-method {
            display: flex;
            align-items: center;
            gap: 1.5rem;
            padding: 1.5rem;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            cursor: pointer;
            margin-bottom: 1rem;
            transition: var(--transition);
        }

        .payment-method:hover {
            border-color: var(--primary-hover);
            transform: translateY(-2px);
        }

        .payment-method.selected {
            border-color: var(--primary-color);
            background: rgba(252, 123, 3, 0.05);
        }

        .payment-icon {
            width: 48px;
            height: 48px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(252, 123, 3, 0.1);
            border-radius: 12px;
            font-size: 1.5rem;
            color: var(--primary-color);
        }

        /* Order Summary */
        .summary-row {
            display: flex;
            justify-content: space-between;
            padding: 1rem 0;
            border-bottom: 1px solid var(--border-color);
        }

        .summary-row:last-of-type {
            border-bottom: none;
        }

        .total-row {
            font-weight: 600;
            font-size: 1.2rem;
            border-top: 2px solid var(--border-color);
            margin-top: 1rem;
            padding-top: 1.5rem;
        }

        /* Buttons */
        .btn {
            padding: 0.875rem 1.75rem;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            font-weight: 600;
            transition: var(--transition);
            font-size: 1rem;
            width: 100%;
            margin-top: 1rem;
        }

        .btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
        }

        .btn-primary:hover:not(:disabled) {
            background: var(--primary-hover);
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        /* Loading Spinner */
        .loading {
            position: fixed;
            inset: 0;
            background: rgba(255,255,255,0.9);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .loading-spinner {
            width: 48px;
            height: 48px;
            border: 4px solid rgba(252, 123, 3, 0.1);
            border-top: 4px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .checkout-grid {
                grid-template-columns: 1fr 320px;
            }
        }

        @media (max-width: 768px) {
            .container {
                padding: 1rem;
                padding-top: 80px;
            }

            .checkout-grid {
                grid-template-columns: 1fr;
            }

            .checkout-item {
                grid-template-columns: 100px 1fr;
            }

            .item-image {
                width: 100px;
                height: 100px;
            }

            .item-price {
                grid-row: 2;
                grid-column: 1 / -1;
                text-align: right;
                padding-top: 1rem;
            }
        }
    </style>
</head>
<body>
    <%- include('../partials/user/header') %>

    <div class="container">
        <div class="checkout-grid">
            <!-- Left Column -->
            <div class="main-content">
                <!-- Cart Items -->
                <div class="card">
                    <h2>Order Items</h2>
                    <% checkoutData.items.forEach(item => { %>
                    <div class="checkout-item">
                        <img src="<%= item.productImage %>" alt="<%= item.productName %>" class="item-image">
                        <div class="item-details">
                            <h3><%= item.productName %></h3>
                            <div class="item-variant">
                                Color: <%= item.selectedColor.colorName %> | Size: <%= item.selectedSize %>
                            </div>
                            <div class="item-quantity">
                                Quantity: <%= item.quantity %>
                            </div>
                        </div>
                        <div class="item-price">
                            â‚¹<%= item.itemTotal.toLocaleString('en-IN') %>
                        </div>
                    </div>
                    <% }); %>
                </div>

                <!-- Address Section -->
                <div class="card address-section">
                    <h2>Delivery Address</h2>
                    <div class="saved-addresses">
                        <% if (addresses && addresses.length > 0) { %>
                            <% addresses.forEach(address => { %>
                            <div class="address-card" onclick="selectAddress('<%= address._id %>')" data-address-id="<%= address._id %>">
                                <div class="address-details">
                                    <p class="name"><%= address.fullName %></p>
                                    <p><%= address.streetAddress %></p>
                                    <p><%= address.city %>, <%= address.state %> <%= address.pincode %></p>
                                    <p>Phone: <%= address.phoneNumber %></p>
                                </div>
                            </div>
                            <% }); %>
                        <% } else { %>
                            <p>No saved addresses found.</p>
                        <% } %>
                    </div>
                    <button class="btn btn-primary" onclick="location.href='/userAddress';">
                        <i class="fas fa-plus"></i> Add New Address
                    </button>
                </div>

                <!-- Payment Methods -->
                <div class="card payment-section">
                    <h2>Payment Method</h2>
                    <div class="payment-methods">
                        <div class="payment-method" data-payment-method="razorpay">
                            <div class="payment-icon">
                                <i class="fas fa-credit-card"></i>
                            </div>
                            <div>
                                <h3>Razorpay</h3>
                                <p>Cards, UPI, NetBanking & more</p>
                            </div>
                        </div>

                        <div class="payment-method" data-payment-method="cod">
                            <div class="payment-icon">
                                <i class="fas fa-money-bill-wave"></i>
                            </div>
                            <div>
                                <h3>Cash on Delivery</h3>
                                <p>Pay when you receive</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column - Order Summary -->
            <div class="order-summary card">
                <h2>Order Summary</h2>
                <div class="summary-row">
                    <span>Items Total</span>
                    <span>â‚¹<%= checkoutData.totalAmount.toLocaleString('en-IN') %></span>
                </div>
                <% if (checkoutData.totalDiscount > 0) { %>
                <div class="summary-row">
                    <span>Discount</span>
                    <span>-â‚¹<%= checkoutData.totalDiscount.toLocaleString('en-IN') %></span>
                </div>
                <% } %>
                <div class="summary-row">
                    <span>Delivery Fee</span>
                    <span>â‚¹<%= checkoutData.shippingFee.toLocaleString('en-IN') %></span>
                </div>
                <div class="summary-row total-row">
                    <span>Total Amount</span>
                    <span>â‚¹<%= checkoutData.finalAmount.toLocaleString('en-IN') %></span>
                </div>
                <button id="proceedButton" class="btn btn-primary" onclick="proceedToPayment()">
                    Select Payment Method
                </button>
            </div>
        </div>

        <!-- Loading Spinner -->
        <div class="loading" id="loading">
            <div class="loading-spinner"></div>
        </div>
    </div>

    <%- include('../partials/user/footer') %>

    <script>
        // Global variables
        let selectedAddressId = null;
        let selectedPaymentMethod = null;
        const grandTotal = <%= checkoutData.finalAmount %>;

        // Initialize page
        document.addEventListener('DOMContentLoaded', () => {
            // Add event listeners to address cards
            document.querySelectorAll('.address-card').forEach(card => {
                card.addEventListener('click', () => {
                    selectAddress(card.getAttribute('data-address-id'));
                });
            });

            // Add event listeners to payment methods
            document.querySelectorAll('.payment-method').forEach(method => {
                method.addEventListener('click', () => {
                    selectPayment(method.getAttribute('data-payment-method'));
                });
            });
        });

        // Select address
        function selectAddress(addressId) {
            selectedAddressId = addressId;
            
            document.querySelectorAll('.address-card').forEach(card => {
                card.classList.remove('selected');
            });
            
            const selectedCard = document.querySelector(`[data-address-id="${addressId}"]`);
            if (selectedCard) {
                selectedCard.classList.add('selected');
                updateProceedButton();
            }
        }

        // Select payment method
        function selectPayment(method) {
            selectedPaymentMethod = method;
            
            document.querySelectorAll('.payment-method').forEach(pm => {
                pm.classList.remove('selected');
            });
            
            const selectedMethod = document.querySelector(`[data-payment-method="${method}"]`);
            if (selectedMethod) {
                selectedMethod.classList.add('selected');
                updateProceedButton();
            }
        }

        // Update proceed button
        function updateProceedButton() {
            const button = document.getElementById('proceedButton');
            
            if (!selectedAddressId) {
                button.textContent = 'Select Delivery Address';
                button.disabled = true;
                return;
            }

            button.disabled = false;
            switch (selectedPaymentMethod) {
                case 'razorpay':
                    button.textContent = 'Pay with Razorpay';
                    button.style.backgroundColor = '#0066FF';
                    break;
                case 'cod':
                    button.textContent = 'Place Order - Cash on Delivery';
                    button.style.backgroundColor = '#fc7b03';
                    break;
                default:
                    button.textContent = 'Select Payment Method';
                    button.style.backgroundColor = '#fc7b03';
            }
        }

        // Show/Hide loading spinner
        function showLoading() {
            document.getElementById('loading').style.display = 'flex';
        }

        function hideLoading() {
            document.getElementById('loading').style.display = 'none';
        }

        // Show notification using SweetAlert2
        function showNotification(message, type = 'info') {
            Swal.fire({
                text: message,
                icon: type,
                toast: true,
                position: 'top-end',
                timer: 3000,
                timerProgressBar: true,
                showConfirmButton: false,
                background: type === 'error' ? '#fff3f3' : '#fff',
                color: '#333'
            });
        }

        // Validate order before proceeding
        function validateOrder() {
            if (!selectedAddressId) {
                showNotification('Please select a delivery address', 'warning');
                document.querySelector('.address-section').scrollIntoView({ behavior: 'smooth' });
                return false;
            }
            
            if (!selectedPaymentMethod) {
                showNotification('Please select a payment method', 'warning');
                document.querySelector('.payment-section').scrollIntoView({ behavior: 'smooth' });
                return false;
            }

            return true;
        }

        // Initialize Razorpay payment
        async function initializeRazorpay() {
            try {
                showLoading();
                
                const response = await fetch('/create-razorpay-order', {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        amount: grandTotal 
                    })
                });

                const orderData = await response.json();
                
                if (!orderData.success) {
                    throw new Error(orderData.message || 'Failed to create order');
                }

                const options = {
                    key: '<%= razorpayKeyId %>', // Your Razorpay Key ID
                    amount: orderData.amount,
                    currency: 'INR',
                    name: '<%= storeName %>',
                    description: 'Order Payment',
                    order_id: orderData.orderId,
                    prefill: {
                        name: '<%= user.name %>',
                        email: '<%= user.email %>',
                        contact: '<%= user.phone %>'
                    },
                    handler: function(response) {
                        hideLoading();
                        verifyPayment(response);
                    },
                    modal: {
                        ondismiss: function() {
                            hideLoading();
                            showNotification('Payment cancelled by user', 'warning');
                        }
                    },
                    theme: {
                        color: '#fc7b03'
                    }
                };

                const rzp = new Razorpay(options);
                rzp.on('payment.failed', function (response) {
                    hideLoading();
                    showNotification('Payment failed: ' + response.error.description, 'error');
                });
                
                rzp.open();

            } catch (error) {
                hideLoading();
                showNotification(error.message || 'Payment initialization failed', 'error');
            }
        }

        // Verify Razorpay payment
        async function verifyPayment(response) {
            try {
                showLoading();
                
                const verificationResponse = await fetch('/verify-razorpay-payment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_signature: response.razorpay_signature
                    })
                });

                const data = await verificationResponse.json();
                
                if (data.success) {
                    await placeOrder({
                        paymentMethod: 'razorpay',
                        paymentDetails: response
                    });
                } else {
                    throw new Error(data.message || 'Payment verification failed');
                }
            } catch (error) {
                hideLoading();
                showNotification(error.message, 'error');
            }
        }

        // Place order
        async function placeOrder(paymentInfo = {}) {
    try {
        showLoading();
        
        const orderData = {
            addressId: selectedAddressId,
            items: <%- JSON.stringify(checkoutData.items) %>,
            totalAmount: grandTotal,
            paymentMethod: selectedPaymentMethod,
            ...paymentInfo
        };

        const response = await fetch('/placeOrder', {  // Updated path
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json',
                // Add CSRF token if you're using it
            },
            body: JSON.stringify(orderData)
        });

        const data = await response.json();
        if (!data.success) {
            throw new Error(data.message || 'Failed to place order');
        }

        // Show success message and redirect
        await Swal.fire({
            title: 'Order Placed Successfully!',
            text: selectedPaymentMethod === 'cod' 
                ? 'Your order has been confirmed. You can pay at the time of delivery.'
                : 'Your payment has been processed and order is confirmed.',
            icon: 'success',
            confirmButtonColor: '#28a745'
        });

        window.location.href = `/orderSuccess/${data.orderId}`;

    } catch (error) {
        hideLoading();
        throw error;
    }
}

        // Main payment handler
        async function proceedToPayment() {
    try {
        if (!validateOrder()) return;

        showLoading();
        
        if (selectedPaymentMethod === 'razorpay') {
            await initializeRazorpay();
        } else if (selectedPaymentMethod === 'cod') {
            await placeOrder({ paymentMethod: 'cod' });
        } else {
            throw new Error('Invalid payment method');
        }
    } catch (error) {
        hideLoading();
        showNotification(error.message || 'Payment failed', 'error');
    }
}
    </script>
</body>
</html>