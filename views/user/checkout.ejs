<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        :root {
            --primary-color: #fc7b03;
            --primary-hover: #ff9000;
            --text-color: #333;
            --text-light: #666;
            --border-color: #e0e0e0;
            --bg-color: #f5f5f5;
            --shadow-sm: 0 2px 4px rgba(0,0,0,0.05);
            --shadow-md: 0 4px 6px rgba(0,0,0,0.1);
            --shadow-lg: 0 10px 15px rgba(0,0,0,0.1);
            --transition: all 0.3s ease;
        }

        body {
            background: var(--bg-color);
            color: var(--text-color);
            font-family: 'Inter', system-ui, sans-serif;
            line-height: 1.5;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            padding-top: 100px;
        }

        .checkout-grid {
            display: grid;
            grid-template-columns: 1fr 380px;
            gap: 2rem;
        }

        .card {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: var(--shadow-md);
            margin-bottom: 2rem;
        }

        /* Cart Items Styling */
        .checkout-item {
            display: grid;
            grid-template-columns: 120px 1fr auto;
            gap: 1.5rem;
            padding: 1.5rem;
            background: white;
            border-radius: 8px;
            box-shadow: var(--shadow-sm);
            margin-bottom: 1rem;
        }

        .item-image {
            width: 120px;
            height: 120px;
            object-fit: cover;
            border-radius: 8px;
        }

        .item-details h3 {
            margin: 0 0 0.75rem;
            font-size: 1.1rem;
        }

        /* Address Section */
        .address-card {
            border: 2px solid var(--border-color);
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            cursor: pointer;
            transition: var(--transition);
        }

        .address-card.selected {
            border-color: var(--primary-color);
            background-color: rgba(252, 123, 3, 0.05);
        }

        .address-card:hover {
            border-color: var(--primary-hover);
            transform: translateY(-2px);
        }

        .address-details .name {
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        /* Payment Section */
        .payment-method {
            display: flex;
            align-items: center;
            gap: 1.5rem;
            padding: 1.5rem;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            cursor: pointer;
            margin-bottom: 1rem;
            transition: var(--transition);
        }

        .payment-method.selected {
            border-color: var(--primary-color);
            background: rgba(252, 123, 3, 0.05);
        }

        .payment-icon {
            width: 48px;
            height: 48px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(252, 123, 3, 0.1);
            border-radius: 12px;
            font-size: 1.5rem;
            color: var(--primary-color);
        }
        @keyframes slideInRight {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

.animated {
    animation-duration: 0.3s;
    animation-fill-mode: both;
}
        /* Order Summary */
        .summary-row {
            display: flex;
            justify-content: space-between;
            padding: 1rem 0;
            border-bottom: 1px solid var(--border-color);
        }

        .total-row {
            font-weight: 600;
            font-size: 1.2rem;
            border-top: 2px solid var(--border-color);
            margin-top: 1rem;
            padding-top: 1.5rem;
        }

        /* Buttons */
        .btn {
            padding: 0.875rem 1.75rem;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            font-weight: 600;
            transition: var(--transition);
            font-size: 1rem;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background: var(--primary-hover);
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        .btn-outline {
            background: transparent;
            border: 2px solid var(--primary-color);
            color: var(--primary-color);
        }

        /* Form Styling */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }

        .form-group input {
            width: 100%;
            padding: 0.875rem;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            font-size: 1rem;
        }

        .form-group input:focus {
            border-color: var(--primary-color);
            outline: none;
            box-shadow: 0 0 0 2px rgba(252, 123, 3, 0.1);
        }

        /* Loading Spinner */
        .loading {
            position: fixed;
            inset: 0;
            background: rgba(255,255,255,0.9);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .loading-spinner {
            width: 48px;
            height: 48px;
            border: 4px solid rgba(252, 123, 3, 0.1);
            border-top: 4px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (max-width: 1024px) {
            .checkout-grid {
                grid-template-columns: 1fr 320px;
            }
        }

        @media (max-width: 768px) {
            .checkout-grid {
                grid-template-columns: 1fr;
            }

            .checkout-item {
                grid-template-columns: 100px 1fr;
            }
        }
    </style>
</head>
<body>
    <%- include('../partials/user/header')%>

    <div class="container">
        <div class="checkout-grid">
            <!-- Left Column -->
            <div class="main-content">
                <!-- Cart Items -->
                <div class="checkout-items">
                    <% checkoutData.items.forEach(item => { %>
                        <div class="checkout-item">
                            <img src="<%= item.product.variants.find(v => v.colorName === item.colorName).productImage[0] %>" 
                                alt="<%= item.product.productName %>" 
                                class="item-image">
                            <div class="item-details">
                                <h3><%= item.product.productName %></h3>
                                <div class="item-variant">
                                    Color: <%= item.colorName %> | Size: <%= item.size %>
                                </div>
                                <div class="item-quantity">
                                    Quantity: <%= item.quantity %>
                                </div>
                            </div>
                            <div class="item-price">
                                â‚¹<%= item.total.toLocaleString('en-IN') %>
                            </div>
                        </div>
                    <% }); %>
                </div>

                <!-- Address Section -->
                <div class="card address-section">
                    <h2>Delivery Address</h2>
                    <div class="saved-addresses" id="savedAddresses">
                        <% if (addresses && addresses.length > 0) { %>
                            <% addresses.forEach(address => { %>
                                <div class="address-card" onclick="selectAddress('<%= address._id %>')" data-address-id="<%= address._id %>">
                                    <div class="address-details">
                                        <p class="name"><%= address.fullName %></p>
                                        <p><%= address.streetAddress %></p>
                                        <p><%= address.city %>, <%= address.state %> <%= address.pincode %></p>
                                        <p>Phone: <%= address.phoneNumber %></p>
                                    </div>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <p>No saved addresses found.</p>
                        <% } %>
                    </div>

                    <button class="btn btn-primary" onclick="location.href='userAddress';">
                      <i class="fas fa-plus"></i> Add New Address / Edit Address
                  </button>
                  
                </div>

                <!-- Payment Methods -->
                
                  <div class="card payment-section">
                    <h2>Payment Method</h2>
                    <div class="payment-methods">
                        <!-- <div class="payment-method" data-payment-method="razorpay">
                            <div class="payment-icon">
                                <i class="fas fa-credit-card"></i>
                            </div>
                            <div>
                                <h3>Razorpay</h3>
                                <p>Cards, UPI, NetBanking & more</p>
                            </div>
                        </div> -->
                        <div class="payment-method" data-payment-method="cod">
                            <div class="payment-icon">
                                <i class="fas fa-money-bill-wave"></i>
                            </div>
                            <div>
                                <h3>Cash on Delivery</h3>
                                <p>Pay when you receive</p>
                            </div>
                        </div>
                    </div>
                  </div>
            </div>

            <!-- Right Column -->
            <div class="order-summary card">
                <h2>Order Summary</h2>
                <div class="summary-row">
                    <span>Items Total</span>
                    <span>â‚¹<%= (checkoutData.totalPrice || 0).toLocaleString('en-IN') %></span>
                </div>
                <div class="summary-row">
                    <span>Delivery</span>
                    <span>â‚¹<%= (checkoutData.shipping || 0).toLocaleString('en-IN') %></span>
                </div>
                <div class="summary-row total-row">
                    <span>Total Amount</span>
                    <span id="totalAmount">â‚¹<%= (checkoutData.grandTotal || 0).toLocaleString('en-IN') %></span>
                </div>
                <button id="proceedButton" class="btn btn-primary" style="width: 100%; margin-top: 1rem;" onclick="proceedToPayment()">
                  Select Payment Method
              </button>
            </div>
        </div>

        <!-- Loading Spinner -->
        <div class="loading" id="loading">
            <div class="loading-spinner"></div>
        </div>
    </div>

    <%- include('../partials/user/footer')%>

    <script>
      // Global variables with proper initialization and validation
      let selectedAddressId = null;
      let selectedPaymentMethod = null;
      let grandTotal = <%= checkoutData?.grandTotal || 0 %>;
      const DEBUG = true; // Enable logging for debugging
  
      // Debug logger
      function log(message, type = 'info') {
          if (DEBUG) {
              const prefix = `[${type.toString().toUpperCase()}]`;
              if (typeof message === 'object') {
                  console.log(prefix, JSON.stringify(message, null, 2));
              } else {
                  console.log(prefix, message);
              }
          }
      }
  
      // Initialize on page load
      document.addEventListener('DOMContentLoaded', function() {
          log('Initializing checkout page');
          initializeCheckout();
      });
  
      function initializeCheckout() {
          try {
              // Add event listeners to address cards
              document.querySelectorAll('.address-card').forEach(card => {
                  card.addEventListener('click', function() {
                      const addressId = this.getAttribute('data-address-id');
                      selectAddress(addressId);
                  });
              });
  
              // Add event listeners to payment methods
              document.querySelectorAll('.payment-method').forEach(method => {
                  method.addEventListener('click', function() {
                      const paymentType = this.getAttribute('data-payment-method');
                      selectPayment(paymentType);
                  });
              });
  
              // Set default payment method to COD
              const codPaymentMethod = document.querySelector('[data-payment-method="cod"]');
              if (codPaymentMethod) {
                  codPaymentMethod.click();
              }
  
              log('Checkout initialized successfully', 'success');
          } catch (error) {
              log(`Initialization error: ${error.message}`, 'error');
              showNotification('Failed to initialize checkout', 'error');
          }
      }
  
      function selectAddress(addressId) {
          try {
              if (!addressId) {
                  throw new Error('Invalid address ID');
              }
  
              log(`Selecting address: ${addressId}`);
              selectedAddressId = addressId;
  
              // Update UI
              document.querySelectorAll('.address-card').forEach(card => {
                  card.classList.remove('selected');
              });
  
              const selectedCard = document.querySelector(`[data-address-id="${addressId}"]`);
              if (selectedCard) {
                  selectedCard.classList.add('selected');
                  selectedCard.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                  log(`Address selected successfully: ${addressId}`, 'success');
                  updateProceedButton();
              } else {
                  throw new Error('Selected address card not found');
              }
          } catch (error) {
              log(`Address selection error: ${error.message}`, 'error');
              showNotification('Failed to select address', 'error');
          }
      }
  
      function selectPayment(method) {
          try {
              if (!method) {
                  throw new Error('Invalid payment method');
              }
  
              log(`Selecting payment method: ${method}`);
              selectedPaymentMethod = method;
  
              // Update UI
              document.querySelectorAll('.payment-method').forEach(pm => {
                  pm.classList.remove('selected');
              });
  
              const selectedMethod = document.querySelector(`[data-payment-method="${method}"]`);
              if (selectedMethod) {
                  selectedMethod.classList.add('selected');
                  updateProceedButton();
                  log(`Payment method selected successfully: ${method}`, 'success');
              } else {
                  throw new Error('Selected payment method element not found');
              }
          } catch (error) {
              log(`Payment selection error: ${error.message}`, 'error');
              showNotification('Failed to select payment method', 'error');
          }
      }
  
      function updateProceedButton() {
          const proceedButton = document.getElementById('proceedButton');
          if (selectedPaymentMethod === 'cod') {
              proceedButton.textContent = 'Place Order - Cash on Delivery';
              proceedButton.style.backgroundColor = '#28a745';
          } else {
              proceedButton.textContent = 'Select Payment Method';
              proceedButton.style.backgroundColor = '#fc7b03';
          }
      }
  
      function validateOrder() {
          try {
              if (!selectedAddressId) {
                  showNotification('Please select a delivery address', 'warning');
                  document.querySelector('.address-section').scrollIntoView({ behavior: 'smooth' });
                  return false;
              }
              if (!selectedPaymentMethod) {
                  showNotification('Please select a payment method', 'warning');
                  document.querySelector('.payment-section').scrollIntoView({ behavior: 'smooth' });
                  return false;
              }
              return true;
          } catch (error) {
              log(`Validation error: ${error.message}`, 'error');
              return false;
          }
      }
  
      async function proceedToPayment() {
          try {
              if (!validateOrder()) return;
  
              log('Processing order...', 'info');
              showLoading();
  
              // Calculate total including shipping
              const itemsTotal = <%= checkoutData.totalPrice || 0 %>;
              const shippingFee = <%= checkoutData.shipping || 0 %>;
              const finalTotal = itemsTotal + shippingFee;
  
              const orderData = {
                  addressId: selectedAddressId,
                  paymentMethod: selectedPaymentMethod,
                  items: <%- JSON.stringify(checkoutData.items) %>,
                  totalAmount: finalTotal
              };
  
              log({
                  message: 'Sending order data',
                  itemsTotal,
                  shippingFee,
                  finalTotal,
                  selectedAddress: selectedAddressId,
                  paymentMethod: selectedPaymentMethod,
                  itemCount: orderData.items.length
              }, 'info');

              await placeOrder(orderData);
          } catch (error) {
              log(error.message, 'error');
              hideLoading();
              showNotification(error.message, 'error');
          }
      }
  
      async function placeOrder(orderData) {
          try {
              const response = await fetch(`${window.location.origin}/placeOrder`, {
                  method: 'POST',
                  headers: { 
                      'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(orderData)
              });
  
              const data = await response.json();
              
              if (!response.ok) {
                  throw new Error(data.message || 'Failed to place order');
              }
  
              if (data.success) {
                  log('Order placed successfully', 'success');
                  await Swal.fire({
                      title: 'Order Placed Successfully!',
                      text: 'Your order has been confirmed. You can pay at the time of delivery.',
                      icon: 'success',
                      confirmButtonColor: '#28a745'
                  });
  
                  window.location.href = `/orderSuccess/${data.orderId}`;
              }
          } catch (error) {
              throw error;
          } finally {
              hideLoading();
          }
      }
  
      function showLoading() {
          document.getElementById('loading').style.display = 'flex';
      }
  
      function hideLoading() {
          document.getElementById('loading').style.display = 'none';
      }
  
      function showNotification(message, type = 'info') {
          Swal.fire({
              text: message,
              icon: type,
              toast: true,
              position: 'top-end',
              timer: 3000,
              timerProgressBar: true,
              showConfirmButton: false,
              background: type === 'error' ? '#fff3f3' : '#fff',
              color: '#333',
              customClass: {
                  popup: 'animated slideInRight'
              }
          });
      }
  </script>
</body>
</html>