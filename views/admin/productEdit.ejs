<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
    
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .main-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .card {
            border: none;
            box-shadow: 0 0 20px rgba(0,0,0,0.08);
            border-radius: 12px;
        }

        .card-header {
            background-color: white;
            border-bottom: 1px solid #e9ecef;
            padding: 1.5rem;
        }

        .form-label {
            font-weight: 500;
            color: #344767;
        }

        .variant-section {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .image-upload-zone {
            border: 2px dashed #dee2e6;
            border-radius: 8px;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .image-upload-zone:hover {
            border-color: #6c757d;
            background-color: #f8f9fa;
        }

        .preview-image-container {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            margin-top: 1rem;
        }

        .preview-image-item {
            position: relative;
            width: 100px;
            height: 100px;
        }

        .preview-image-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 8px;
        }

        .preview-image-item img.existing-image {
            border: 2px solid #4f46e5;
        }

        .remove-image {
            position: absolute;
            top: -8px;
            right: -8px;
            background-color: #dc3545;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 12px;
        }

        .error-feedback {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .size-variant {
            background-color: white;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .btn-add-variant {
            background-color: #eef2ff;
            color: #4f46e5;
            border: none;
            transition: all 0.3s ease;
        }

        .btn-add-variant:hover {
            background-color: #4f46e5;
            color: white;
        }

        .cropper-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0,0,0,0.5);
            z-index: 1050;
            padding: 2rem;
        }

        .cropper-content {
            background: white;
            border-radius: 12px;
            max-width: 800px;
            margin: 0 auto;
            height: 80vh;
            display: flex;
            flex-direction: column;
        }

        .cropper-area {
            flex: 1;
            overflow: hidden;
            position: relative;
        }

        .drag-active {
            border-color: #4f46e5 !important;
            background-color: #eef2ff !important;
        }

        .removed-image {
            opacity: 0.5;
            border: 2px solid #dc3545;
        }

        .size-variant .row {
            align-items: flex-end;
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
        }
    </style>
</head>
<body>
    <%- include('../partials/admin/adminHeader') %>

    <div class="loading-overlay">
        <div class="spinner-border text-primary loading-spinner" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <div class="main-container">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h2 class="h4 mb-0">Edit Product</h2>
                <button type="button" class="btn btn-outline-secondary" onclick="window.location.href='/admin/product'">
                    <i class="bi bi-arrow-left me-2"></i>Back to Products
                </button>
            </div>
            <div class="card-body">
                <form id="editProductForm" method="post" enctype="multipart/form-data">
                    <input type="hidden" id="productId" name="productId" value="<%= product._id %>">
                    
                    <!-- Basic Information -->
                    <div class="mb-4">
                        <h5 class="mb-3">Basic Information</h5>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="productName" class="form-label">Product Name*</label>
                                <input type="text" class="form-control" id="productName" name="productName" 
                                       value="<%= product.productName %>" required>
                                <div class="error-feedback" id="productName-error"></div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="category" class="form-label">Category*</label>
                                <select class="form-select" id="category" name="category" required>
                                    <option value="">Select Category</option>
                                </select>
                                <div class="error-feedback" id="category-error"></div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="subcategory" class="form-label">Subcategory*</label>
                                <select class="form-select" id="subcategory" name="subcategory" required>
                                    <option value="">Select Subcategory</option>
                                </select>
                                <div class="error-feedback" id="subcategory-error"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Description -->
                    <div class="mb-4">
                        <h5 class="mb-3">Product Description</h5>
                        <div class="mb-3">
                            <label for="description" class="form-label">Full Description*</label>
                            <textarea class="form-control" id="description" name="description" rows="4" required><%= product.description %></textarea>
                            <div class="error-feedback" id="description-error"></div>
                        </div>
                        <div class="mb-3">
                            <label for="shortDescription" class="form-label">Short Description</label>
                            <textarea class="form-control" id="shortDescription" name="shortDescription" rows="2"><%= product.shortDescription %></textarea>
                            <div class="error-feedback" id="shortDescription-error"></div>
                        </div>
                    </div>

                    <!-- Product Variants -->
                    <div class="mb-4">
                        <h5 class="mb-3">Product Variants</h5>
                        <div id="variantsContainer">
                            <!-- Variants will be populated by JavaScript -->
                        </div>
                        <button type="button" class="btn btn-add-variant" id="addVariantBtn">
                            <i class="bi bi-plus-circle me-2"></i>Add Color Variant
                        </button>
                    </div>

                    <!-- Submit Button -->
                    <div class="text-end mt-4">
                        <button type="submit" class="btn btn-primary" id="submitBtn">
                            Update Product
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Cropper Modal -->
    <div id="cropperModal" class="cropper-modal">
        <div class="cropper-content">
            <div class="p-3 border-bottom">
                <h5 class="mb-0">Crop Image</h5>
            </div>
            <div class="cropper-area">
                <img id="cropperImage" style="max-width: 100%;">
            </div>
            <div class="p-3 border-top d-flex justify-content-end gap-2">
                <button type="button" class="btn btn-secondary" id="cancelCrop">Cancel</button>
                <button type="button" class="btn btn-primary" id="applyCrop">Apply</button>
            </div>
        </div>
    </div>

    <%- include('../partials/admin/adminFooter') %>

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

    <!-- Initialize Data -->
    <script>
        window.categoriesData = <%- JSON.stringify(categories) %>;
        window.productData = <%- JSON.stringify(product) %>;
        window.deletedImages = [];
    </script>

    <!-- Main Script -->
    <script>
    // Global Variables
    let currentVariantIndex = 0;
    let cropper = null;
    const variantImages = new Map();
    const existingImages = new Map();

    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
        initializeCategoryHandling();
        initializeVariantHandling();
        initializeFormValidation();
        populateExistingData();
    });

    // Category Handling
    function initializeCategoryHandling() {
        const categorySelect = document.getElementById('category');
        const subcategorySelect = document.getElementById('subcategory');

        // Add all main categories
        window.categoriesData.forEach(category => {
            const option = new Option(category.name, category._id);
            categorySelect.add(option);
        });

        // Set initial category value
        categorySelect.value = window.productData.category;

        // Handle category change
        categorySelect.addEventListener('change', function() {
            updateSubcategories(this.value);
        });

        // Set initial subcategory options and value
        updateSubcategories(window.productData.category);
        setTimeout(() => {
            subcategorySelect.value = window.productData.subcategory;
        }, 100);
    }

    function updateSubcategories(categoryId) {
        const subcategorySelect = document.getElementById('subcategory');
        subcategorySelect.innerHTML = '<option value="">Select Subcategory</option>';
        subcategorySelect.disabled = true;

        if (!categoryId) return;

        const selectedCategory = window.categoriesData.find(cat => cat._id === categoryId);
        
        if (selectedCategory?.subcategories?.length) {
            subcategorySelect.disabled = false;
            selectedCategory.subcategories.forEach(sub => {
                subcategorySelect.add(new Option(sub.name, sub._id));
            });
        }
    }

    // Variant Handling
    function createVariantHTML(index, existingVariant = null) {
        return `
            <div class="variant-section" data-variant-index="${index}">
                <div class="row mb-3">
                    <div class="col-md-5">
                        <label class="form-label">Color Value*</label>
                        <input type="color" class="form-control" name="variants[${index}][colorValue]" 
                               value="${existingVariant?.colorValue || '#000000'}" required>
                    </div>
                    <div class="col-md-5">
                        <label class="form-label">Color Name*</label>
                        <input type="text" class="form-control" name="variants[${index}][colorName]" 
                               value="${existingVariant?.colorName || ''}" required>
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="button" class="btn btn-outline-danger remove-variant">Remove</button>
                    </div>
                </div>

                <!-- Size Variants -->
                <div class="size-variants mb-3">
                    <h6 class="mb-3">Size Variants</h6>
                    <div class="size-variant mb-3">
                        ${createSizeVariantHTML(index, 0, existingVariant?.sizes?.[0])}
                    </div>
                    <button type="button" class="btn btn-outline-primary btn-sm add-size">
                        Add Size Variant
                    </button>
                </div>

                <!-- Image Upload -->
                <div class="image-upload-section">
                    <h6 class="mb-3">Variant Images</h6>
                    <div class="image-upload-zone">
                        <i class="bi bi-cloud-upload mb-2" style="font-size: 2rem;"></i>
                        <p class="mb-0">Drop images here or click to upload</p>
                        <input type="file" class="variant-image-input" multiple 
                            accept="image/jpeg,image/png,image/gif,image/jpg" style="display: none;">
                    </div>
                    <div class="preview-image-container"></div>
                </div>
            </div>
        `;
    }

    function createSizeVariantHTML(variantIndex, sizeIndex, existingSize = null) {
        return `
            <div class="row">
                <div class="col-md-2">
                    <label class="form-label">Size*</label>
                    <select class="form-select" name="variants[${variantIndex}][sizes][${sizeIndex}][size]" required>
                        <option value="">Select</option>
                        <option value="XS" ${existingSize?.size === 'XS' ? 'selected' : ''}>XS</option>
                        <option value="S" ${existingSize?.size === 'S' ? 'selected' : ''}>S</option>
                        <option value="M" ${existingSize?.size === 'M' ? 'selected' : ''}>M</option>
                        <option value="L" ${existingSize?.size === 'L' ? 'selected' : ''}>L</option>
                        <option value="XL" ${existingSize?.size === 'XL' ? 'selected' : ''}>XL</option>
                        <option value="XXL" ${existingSize?.size === 'XXL' ? 'selected' : ''}>XXL</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Stock*</label>
                    <input type="number" class="form-control" 
                           name="variants[${variantIndex}][sizes][${sizeIndex}][stock]" 
                           value="${existingSize?.stock || ''}"
                           min="0" required>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Price*</label>
                    <input type="number" class="form-control" 
                           name="variants[${variantIndex}][sizes][${sizeIndex}][price]" 
                           value="${existingSize?.price || ''}"
                           min="0" step="0.01" required>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Status*</label>
                    <select class="form-select" name="variants[${variantIndex}][sizes][${sizeIndex}][status]" required>
                        <option value="available" ${existingSize?.status === 'available' ? 'selected' : ''}>Available</option>
                        <option value="out of stock" ${existingSize?.status === 'out of stock' ? 'selected' : ''}>Out of Stock</option>
                        <option value="discontinued" ${existingSize?.status === 'discontinued' ? 'selected' : ''}>Discontinued</option>
                    </select>
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button type="button" class="btn btn-outline-danger btn-sm remove-size">Remove</button>
                </div>
            </div>
        `;
    }

    function initializeVariantHandling() {
        document.getElementById('addVariantBtn').addEventListener('click', () => addNewVariant());
    }

    function addNewVariant(existingVariant = null) {
        const variantHtml = createVariantHTML(currentVariantIndex, existingVariant);
        document.getElementById('variantsContainer').insertAdjacentHTML('beforeend', variantHtml);
        initializeImageUpload(currentVariantIndex);
        
        if (existingVariant) {
            // Populate size variants
            const variantSection = document.querySelector(`[data-variant-index="${currentVariantIndex}"]`);
            existingVariant.sizes.forEach((size, index) => {
                if (index > 0) {
                    handleAddSize({ target: variantSection.querySelector('.add-size') });
                }
                // Populate size data
                const sizeRows = variantSection.querySelectorAll('.size-variant');
                if (sizeRows[index]) {
                    const row = sizeRows[index];
                    row.querySelector('[name$="[size]"]').value = size.size;
                    row.querySelector('[name$="[stock]"]').value = size.stock;
                    row.querySelector('[name$="[price]"]').value = size.price;
                    row.querySelector('[name$="[status]"]').value = size.status;
                }
            });
        }

        updateRemoveButtons();
        currentVariantIndex++;
    }

    function populateExistingData() {
        // Set form fields
        const categorySelect = document.getElementById('category');
        const subcategorySelect = document.getElementById('subcategory');
        
        categorySelect.value = window.productData.category;
        categorySelect.dispatchEvent(new Event('change'));
        
        setTimeout(() => {
            subcategorySelect.value = window.productData.subcategory;
        }, 100);

        // Initialize deletedImages array if not exists
        window.deletedImages = window.deletedImages || [];

        // Populate variants with images
        window.productData.variants.forEach((variant, index) => {
            addNewVariant(variant);
            // Store existing images in the map
            existingImages.set(index, variant.images || []);
            updateImagePreview(index);
        });
    }

    // Image Handling
    function initializeImageUpload(variantIndex) {
        const variantSection = document.querySelector(`[data-variant-index="${variantIndex}"]`);
        if (!variantSection) return;

        const uploadZone = variantSection.querySelector('.image-upload-zone');
        const fileInput = variantSection.querySelector('.variant-image-input');
        
        if (!variantImages.has(variantIndex)) {
            variantImages.set(variantIndex, []);
        }

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            uploadZone.addEventListener(eventName, preventDefault);
        });

        ['dragenter', 'dragover'].forEach(eventName => {
            uploadZone.addEventListener(eventName, () => {
                uploadZone.classList.add('drag-active');
            });
        });

        ['dragleave', 'drop'].forEach(eventName => {
            uploadZone.addEventListener(eventName, () => {
                uploadZone.classList.remove('drag-active');
            });
        });

        uploadZone.addEventListener('drop', function(e) {
            const files = Array.from(e.dataTransfer.files);
            handleFiles(files, variantIndex);
        });

        uploadZone.addEventListener('click', () => fileInput.click());
        fileInput.addEventListener('change', function() {
            handleFiles(Array.from(this.files), variantIndex);
        });
    }

    function handleFiles(files, variantIndex) {
    if (!files || files.length === 0) {
        return;
    }

    Array.from(files).forEach(file => {
        console.log('Processing file:', {
            name: file.name,
            type: file.type,
            size: file.size
        });

        if (validateImageFile(file)) {
            processImage(file, variantIndex);
        }
    });
}

    function validateImageFile(file) {
    const maxSize = 5 * 1024 * 1024; // 5MB
    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/jpg'];

    console.log('Validating file:', {
        name: file.name,
        type: file.type,
        size: file.size
    });

    if (!file || !file.type) {
        Swal.fire({
            icon: 'error',
            title: 'Invalid File',
            text: 'Please select a valid image file'
        });
        return false;
    }

    const fileType = file.type.toLowerCase();
    if (!allowedTypes.includes(fileType)) {
        Swal.fire({
            icon: 'error',
            title: 'Invalid File Type',
            text: `File type "${file.type}" is not supported. Please select a JPEG, PNG, or GIF image`
        });
        return false;
    }

    if (file.size > maxSize) {
        Swal.fire({
            icon: 'error',
            title: 'File Too Large',
            text: `File size (${(file.size / 1024 / 1024).toFixed(2)}MB) exceeds maximum size of 5MB`
        });
        return false;
    }

    return true;
}

function processImage(file, variantIndex) {
    try {
        const reader = new FileReader();
        
        reader.onerror = function(error) {
            console.error('Error reading file:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to read the image file. Please try again.'
            });
        };

        reader.onload = function(e) {
            try {
                if (!e.target.result.startsWith('data:image/')) {
                    throw new Error('Invalid image data');
                }
                currentVariantIndex = variantIndex;
                showCropper(e.target.result);
            } catch (error) {
                console.error('Error in image processing:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to process the image. Please try a different image.'
                });
            }
        };

        reader.readAsDataURL(file);
    } catch (error) {
        console.error('Error initiating file read:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to read the file. Please try again.'
        });
    }
}

    function showCropper(imageSrc) {
        const cropperModal = document.getElementById('cropperModal');
        const cropperImage = document.getElementById('cropperImage');

        cropperImage.src = imageSrc;
        cropperModal.style.display = 'flex';

        if (cropper) cropper.destroy();

        cropper = new Cropper(cropperImage, {
            aspectRatio: 1,
            viewMode: 2,
            dragMode: 'move',
            autoCropArea: 1,
            responsive: true,
            restore: true,
            guides: true,
            center: true,
            highlight: false,
            cropBoxMovable: true,
            cropBoxResizable: true,
            toggleDragModeOnDblclick: false
        });
    }

    function updateImagePreview(variantIndex) {
        const variantSection = document.querySelector(`[data-variant-index="${variantIndex}"]`);
        const previewContainer = variantSection.querySelector('.preview-image-container');
        const newImages = variantImages.get(variantIndex) || [];
        const existingImgs = existingImages.get(variantIndex) || [];

        previewContainer.innerHTML = '';

        // Add existing images
        existingImgs.forEach((imageUrl, index) => {
            if (!window.deletedImages.includes(imageUrl._id)) {
                const imgElement = document.createElement('div');
                imgElement.className = 'preview-image-item';
                imgElement.innerHTML = `
                    <img src="${imageUrl.url}" alt="Existing variant ${index + 1}" class="existing-image">
                    <div class="remove-image" data-type="existing" data-variant-index="${variantIndex}" 
                         data-image-id="${imageUrl._id}" data-index="${index}">&times;</div>
                `;
                previewContainer.appendChild(imgElement);
            }
        });

        // Add new images
        newImages.forEach((image, index) => {
            const imgElement = document.createElement('div');
            imgElement.className = 'preview-image-item';
            imgElement.innerHTML = `
                <img src="${image}" alt="New variant ${index + 1}">
                <div class="remove-image" data-type="new" data-variant-index="${variantIndex}" 
                     data-index="${index}">&times;</div>
            `;
            previewContainer.appendChild(imgElement);
        });

        // Add remove image handlers
        previewContainer.querySelectorAll('.remove-image').forEach(button => {
            button.addEventListener('click', function() {
                const type = this.dataset.type;
                const index = parseInt(this.dataset.index);
                const variantIndex = parseInt(this.dataset.variantIndex);

                if (type === 'existing') {
                    const imageId = this.dataset.imageId;
                    window.deletedImages.push(imageId);
                    this.closest('.preview-image-item').classList.add('removed-image');
                } else {
                    const images = variantImages.get(variantIndex) || [];
                    images.splice(index, 1);
                    variantImages.set(variantIndex, images);
                }
                updateImagePreview(variantIndex);
            });
        });
    }

    // Form Validation and Submission
    function initializeFormValidation() {
        const form = document.getElementById('editProductForm');

        document.getElementById('variantsContainer').addEventListener('click', function(e) {
            if (e.target.classList.contains('remove-variant')) {
                handleRemoveVariant(e);
            } else if (e.target.classList.contains('add-size')) {
                handleAddSize(e);
            } else if (e.target.classList.contains('remove-size')) {
                handleRemoveSize(e);
            }
        });

        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            if (!validateForm()) return;

            try {
                const formData = await prepareFormData();
                await submitForm(formData);
            } catch (error) {
                handleError(error);
            }
        });
    }

    // In productEdit.ejs, update the prepareFormData function
    async function prepareFormData() {
    const formData = new FormData();
    const basicFields = ['productId', 'productName', 'description', 'shortDescription', 'category', 'subcategory'];
    
    // Add basic fields
    basicFields.forEach(field => {
        const element = document.getElementById(field);
        if (element && element.value.trim()) {
            formData.append(field, element.value.trim());
        }
    });

    // Process variants
    const variants = [];
    const variantSections = document.querySelectorAll('.variant-section');
    
    for (let i = 0; i < variantSections.length; i++) {
        const section = variantSections[i];
        const variantIndex = section.dataset.variantIndex;
        
        const variant = {
            colorValue: section.querySelector('[name$="[colorValue]"]').value,
            colorName: section.querySelector('[name$="[colorName]"]').value,
            sizes: []
        };

        // Process sizes
        const sizeRows = section.querySelectorAll('.size-variant .row');
        sizeRows.forEach(row => {
            variant.sizes.push({
                size: row.querySelector('[name$="[size]"]').value,
                stock: row.querySelector('[name$="[stock]"]').value,
                price: row.querySelector('[name$="[price]"]').value,
                status: row.querySelector('[name$="[status]"]').value
            });
        });

        variants.push(variant);

        // Add new images - FIXED this part
        const newImages = variantImages.get(parseInt(variantIndex)) || [];
        newImages.forEach((imageData, imageIndex) => {
            const blob = dataURLtoBlob(imageData);
            // Changed the field name to match the server's expectation
            formData.append(`variants[${i}][images][${imageIndex}]`, blob, `image-${i}-${imageIndex}.jpg`);
        });
    }

    // Add variants data as JSON string
    formData.append('variants', JSON.stringify(variants));
    
    // Add deleted images array
    if (window.deletedImages && window.deletedImages.length > 0) {
        formData.append('deletedImages', JSON.stringify(window.deletedImages));
    }

    // Log the formData contents for debugging
    for (let pair of formData.entries()) {
        console.log(pair[0], pair[1]);
    }

    return formData;
}

    async function submitForm(formData) {
        showLoading(true);
        
        try {
            const response = await fetch(`/admin/editProduct/${window.productData._id}`, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Product updated successfully',
                    timer: 1500
                });
                window.location.href = '/admin/product';
            } else {
                throw new Error(result.message || 'Failed to update product');
            }
        } catch (error) {
            handleError(error);
        } finally {
            showLoading(false);
        }
    }

    function validateForm() {
        clearErrors();
        let isValid = true;

        const requiredFields = {
            productName: 'Product name is required',category: 'Category is required',
            subcategory: 'Subcategory is required',
            description: 'Description is required'
        };

        for (const [fieldId, message] of Object.entries(requiredFields)) {
            const field = document.getElementById(fieldId);
            if (!field.value.trim()) {
                showError(fieldId, message);
                isValid = false;
            }
        }

        // Variants validation
        const variants = document.querySelectorAll('.variant-section');
        if (variants.length === 0) {
            showError('variants', 'At least one variant is required');
            isValid = false;
        }

        variants.forEach((variant, index) => {
            if (!validateVariant(variant, index)) {
                isValid = false;
            }
        });

        return isValid;
    }

    function validateVariant(variant, index) {
        let isValid = true;

        const colorValue = variant.querySelector('[name$="[colorValue]"]').value;
        const colorName = variant.querySelector('[name$="[colorName]"]').value;

        if (!colorValue || !colorName) {
            showError(`variant-${index}`, 'Color information is required');
            isValid = false;
        }

        // Sizes validation
        const sizes = variant.querySelectorAll('.size-variant .row');
        if (sizes.length === 0) {
            showError(`variant-${index}`, 'At least one size variant is required');
            isValid = false;
        }

        // Images validation
        const existingImgs = existingImages.get(index) || [];
        const newImages = variantImages.get(index) || [];
        const nonDeletedExistingImages = existingImgs.filter(img => !window.deletedImages.includes(img._id));

        if (nonDeletedExistingImages.length === 0 && newImages.length === 0) {
            showError(`variant-${index}`, 'At least one image is required');
            isValid = false;
        }

        return isValid;
    }

    function showError(fieldId, message) {
        const errorElement = document.getElementById(`${fieldId}-error`) || 
            document.querySelector(`[data-variant-index="${fieldId.split('-')[1]}"] .error-feedback`);
        if (errorElement) {
            errorElement.textContent = message;
        }
    }

    function clearErrors() {
        document.querySelectorAll('.error-feedback').forEach(error => {
            error.textContent = '';
        });
    }

    function preventDefault(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    function dataURLtoBlob(dataURL) {
        const arr = dataURL.split(',');
        const mime = arr[0].match(/:(.*?);/)[1];
        const bstr = atob(arr[1]);
        let n = bstr.length;
        const u8arr = new Uint8Array(n);
        while (n--) {
            u8arr[n] = bstr.charCodeAt(n);
        }
        return new Blob([u8arr], { type: mime });
    }

    function showLoading(show = true) {
        const loadingOverlay = document.querySelector('.loading-overlay');
        if (show) {
            loadingOverlay.style.display = 'flex';
        } else {
            loadingOverlay.style.display = 'none';
        }
    }

    function handleError(error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'An unexpected error occurred'
        });
    }

    function updateRemoveButtons() {
        const variants = document.querySelectorAll('.variant-section');
        variants.forEach(variant => {
            const removeBtn = variant.querySelector('.remove-variant');
            removeBtn.style.display = variants.length === 1 ? 'none' : 'block';
        });
    }

    function handleRemoveVariant(e) {
        const variantSection = e.target.closest('.variant-section');
        const variantIndex = parseInt(variantSection.dataset.variantIndex);
        
        // Add existing images to deleted list before removing variant
        const existingImgs = existingImages.get(variantIndex) || [];
        existingImgs.forEach(img => {
            if (img._id) {
                window.deletedImages.push(img._id);
            }
        });
        
        variantImages.delete(variantIndex);
        existingImages.delete(variantIndex);
        variantSection.remove();
        updateRemoveButtons();
    }

    function handleAddSize(e) {
        const variantSection = e.target.closest('.variant-section');
        const variantIndex = variantSection.dataset.variantIndex;
        const sizeContainer = variantSection.querySelector('.size-variants');
        const sizeCount = sizeContainer.querySelectorAll('.size-variant').length;
        
        const newSizeHtml = createSizeVariantHTML(variantIndex, sizeCount);
        const newSizeDiv = document.createElement('div');
        newSizeDiv.className = 'size-variant mb-3';
        newSizeDiv.innerHTML = newSizeHtml;
        
        e.target.insertAdjacentElement('beforebegin', newSizeDiv);
    }

    function handleRemoveSize(e) {
        const sizeVariant = e.target.closest('.size-variant');
        const variantSection = e.target.closest('.variant-section');
        const sizeVariants = variantSection.querySelectorAll('.size-variant');
        
        if (sizeVariants.length > 1) {
            sizeVariant.remove();
        }
    }

    // Cropper related functions
    document.getElementById('applyCrop').addEventListener('click', function() {
        if (!cropper) return;

        const croppedCanvas = cropper.getCroppedCanvas({
            width: 800,
            height: 800
        });

        const croppedImage = croppedCanvas.toDataURL('image/jpeg', 0.9);
        const images = variantImages.get(currentVariantIndex) || [];
        images.push(croppedImage);
        variantImages.set(currentVariantIndex, images);

        updateImagePreview(currentVariantIndex);
        closeCropper();
    });

    document.getElementById('cancelCrop').addEventListener('click', closeCropper);

    function closeCropper() {
        const cropperModal = document.getElementById('cropperModal');
        cropperModal.style.display = 'none';
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
    }
    </script>
</body>
</html>