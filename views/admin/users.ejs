<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Management</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">
  <style>
    body {
      font-family: 'Poppins', sans-serif;
      background-color: #f3f4f6;
      margin: 0;
      padding: 0;
    }
    .main-content {
      padding: 2rem;
      transition: margin-left 0.3s ease, width 0.3s ease;
      width: calc(100% - var(--sidebar-width, 250px));
      min-height: 100vh;
      box-sizing: border-box;
    }
    .dashboard-title {
      font-size: 2rem;
      font-weight: 700;
      color: #6d28d9;
      margin-bottom: 1.5rem;
    }
    .category-table {
      background-color: #ffffff;
      border-radius: 0.5rem;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      overflow: hidden;
    }
    table {
      width: 100%;
      border-collapse: collapse;
    }
    th, td {
      padding: 1rem;
      text-align: left;
      border-bottom: 1px solid #e5e7eb;
    }
    th {
      background-color: #f9fafb;
      font-weight: 600;
      color: #374151;
    }
    tr:last-child td {
      border-bottom: none;
    }
    .text-end {
      text-align: right;
    }
    .switch {
      position: relative;
      display: inline-block;
      width: 60px;
      height: 34px;
    }
    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: .4s;
    }
    .slider:before {
      position: absolute;
      content: "";
      height: 26px;
      width: 26px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      transition: .4s;
    }
    input:checked + .slider {
      background-color: #6d28d9;
    }
    input:checked + .slider:before {
      transform: translateX(26px);
    }
    .slider.round {
      border-radius: 34px;
    }
    .slider.round:before {
      border-radius: 50%;
    }
    .pagination {
      display: flex;
      justify-content: center;
      list-style: none;
      padding: 0;
      margin-top: 1rem;
    }
    .page-item {
      margin: 0 0.25rem;
    }
    .page-link {
      color: #6d28d9;
      padding: 0.5rem 0.75rem;
      text-decoration: none;
      border: 1px solid #d1d5db;
      border-radius: 0.25rem;
      transition: background-color 0.3s ease;
    }
    .page-link:hover {
      background-color: #f3f4f6;
    }
    .page-item.active .page-link {
      background-color: #6d28d9;
      color: white;
      border-color: #6d28d9;
    }
    .page-item.disabled .page-link {
      color: #9ca3af;
      pointer-events: none;
      background-color: #fff;
      border-color: #d1d5db;
    }
  </style>
</head>
<body>
  <%- include('../partials/admin/adminHeader')%>
  <main class="main-content">
    <h1 class="dashboard-title">User Management</h1>
    <div class="category-table">
      <table>
        <thead>
          <tr>
            <th>S.No</th>
            <th>Name</th>
            <th>Email</th>
            <th>Status</th>
            <th class="text-end">Actions</th>
          </tr>
        </thead>
        <tbody id="category-data">
          <% users.forEach((user, index) => { %>
            <tr>
              <td><%= index + 1 %></td>
              <td><%= user.name %></td>
              <td><%= user.email %></td>
              <td class="user-status"><%= user.isBlocked ? "Blocked" : "Active" %></td>
              <td class="text-end">
                <label class="switch">
                  <input type="checkbox" 
                         class="toggle-block" 
                         data-user-id="<%= user._id.toString() %>" 
                         <%= user.isBlocked ? "checked" : "" %> 
                  />
                  <span class="slider round"></span>
              </label>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>

    <nav aria-label="Page navigation">
      <ul class="pagination">
        <% if (currentPage > 1) { %>
          <li class="page-item">
            <a class="page-link" href="?page=<%= currentPage - 1 %>">Previous</a>
          </li>
        <% } else { %>
          <li class="page-item disabled">
            <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
          </li>
        <% } %>

        <% for (let i = 1; i <= totalPages; i++) { %>
          <li class="page-item <%= i === currentPage ? 'active' : '' %>">
            <a class="page-link" href="?page=<%= i %>"><%= i %></a>
          </li>
        <% } %>

        <% if (currentPage < totalPages) { %>
          <li class="page-item">
            <a class="page-link" href="?page=<%= currentPage + 1 %>">Next</a>
          </li>
        <% } else { %>
          <li class="page-item disabled">
            <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Next</a>
          </li>
        <% } %>
      </ul>
    </nav>
  </main>

  <%- include("../../views/partials/admin/adminFooter")%>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
  
  <script>
  
  document.addEventListener("DOMContentLoaded", function () {
    const toggles = document.querySelectorAll(".toggle-block");

    toggles.forEach((toggle) => {
        toggle.addEventListener("change", async function () {
            const userId = this.dataset.userId;
            const isChecked = this.checked;
            const url = `/admin/users/toggle-block/${userId}`;

            const statusCell = this.closest('tr').querySelector('.user-status');
            const userName = this.closest('tr').querySelector('td:nth-child(2)').textContent;

            try {
                // Show confirmation dialog first
                const confirmResult = await Swal.fire({
                    title: 'Are you sure?',
                    text: `Do you want to ${isChecked ? 'block' : 'unblock'} ${userName}?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#6d28d9',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, continue'
                });

                if (!confirmResult.isConfirmed) {
                    // Revert the toggle if user cancels
                    this.checked = !isChecked;
                    return;
                }

                // Show loading state
                Swal.fire({
                    title: 'Processing...',
                    text: `Updating status for ${userName}`,
                    icon: 'info',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                const response = await fetch(url, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"  // Add this line
                    },
                    body: JSON.stringify({ status: isChecked })
                });

                // Check if response is JSON
                const contentType = response.headers.get("content-type");
                if (!contentType || !contentType.includes("application/json")) {
                    throw new Error("Received non-JSON response from server");
                }

                const data = await response.json();

                if (response.ok) {
                    statusCell.textContent = isChecked ? "Blocked" : "Active";
                    
                    await Swal.fire({
                        title: 'Success!',
                        text: `User has been ${isChecked ? 'blocked' : 'unblocked'}`,
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    });
                } else {
                    throw new Error(data.message || 'Failed to update user status');
                }
            } catch (error) {
                console.error('Error:', error);
                // Revert the toggle state
                this.checked = !isChecked;
                statusCell.textContent = !isChecked ? "Blocked" : "Active";

                Swal.fire({
                    title: 'Error!',
                    text: error.message || 'Failed to update user status',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        });
    });
});
  </script>
</body>
</html>