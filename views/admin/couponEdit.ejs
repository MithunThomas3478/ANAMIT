<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - Admin Dashboard</title>

    <!-- CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">

    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f3f4f6;
        }
        .main-content {
            padding: 2rem;
        }
        .card {
            border: none;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
        }
        .card-header {
            background-color: #4f46e5;
            color: white;
            font-weight: 600;
            padding: 1rem;
        }
        .form-label {
            font-weight: 500;
            color: #374151;
        }
        .required-field::after {
            content: "*";
            color: #ef4444;
            margin-left: 4px;
        }
        .select2-container .select2-selection--multiple {
            min-height: 100px;
        }
        .product-option {
            padding: 8px;
            border-bottom: 1px solid #eee;
        }
        .offer-badge {
            background-color: #10b981;
            color: white;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 0.75rem;
            margin-left: 4px;
        }
        .variant-info {
            font-size: 0.875rem;
            color: #6b7280;
            margin-left: 8px;
        }
        .price-range {
            font-weight: 500;
            color: #374151;
        }
        .category-group {
            font-weight: 600;
            color: #4f46e5;
            padding: 8px;
            background-color: #f8fafc;
        }
        .submit-btn {
            background-color: #4f46e5;
            border: none;
            padding: 0.75rem 1.5rem;
            font-weight: 500;
        }
        .submit-btn:hover {
            background-color: #4338ca;
        }
        .cancel-btn {
            background-color: #9ca3af;
            border: none;
            padding: 0.75rem 1.5rem;
            font-weight: 500;
        }
        .cancel-btn:hover {
            background-color: #6b7280;
        }
        .form-control:focus, .form-select:focus {
            border-color: #4f46e5;
            box-shadow: 0 0 0 0.25rem rgba(79, 70, 229, 0.25);
        }
        .select2-container--bootstrap-5 .select2-selection {
            border-color: #dee2e6;
        }
        .select2-container--bootstrap-5 .select2-selection:focus {
            border-color: #4f46e5;
            box-shadow: 0 0 0 0.25rem rgba(79, 70, 229, 0.25);
        }
        .form-check-input:checked {
            background-color: #4f46e5;
            border-color: #4f46e5;
        }
    </style>
</head>
<body>
    <%- include('../partials/admin/adminHeader') %>

    <main class="main-content">
        <div class="container">
            

            <div class="row justify-content-center">
                <div class="col-lg-8">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Edit Coupon</h5>
                        </div>
                        <div class="card-body">
                            <form id="editCouponForm" action="/admin/coupons/edit/<%= coupon._id %>" method="POST" novalidate>
                                <!-- Basic Information -->
                                <div class="mb-4">
                                    <h5 class="mb-3">Basic Information</h5>
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="code" class="form-label required-field">Coupon Code</label>
                                            <input type="text" 
                                                class="form-control <%= locals.errors?.code ? 'is-invalid' : '' %>"
                                                id="code" 
                                                name="code" 
                                                required 
                                                pattern="[A-Za-z0-9]+" 
                                                maxlength="15"
                                                value="<%= coupon.code %>">
                                            <small class="text-muted">Only letters and numbers, max 15 characters</small>
                                            <% if (locals.errors?.code) { %>
                                                <div class="invalid-feedback"><%= errors.code.message %></div>
                                            <% } %>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="description" class="form-label">Description</label>
                                            <input type="text" 
                                                class="form-control"
                                                id="description" 
                                                name="description"
                                                maxlength="200"
                                                value="<%= coupon.description || '' %>">
                                            <small class="text-muted">Max 200 characters</small>
                                        </div>
                                    </div>
                                </div>

                                <!-- Discount Details -->
                                <div class="mb-4">
                                    <h5 class="mb-3">Discount Details</h5>
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="discountType" class="form-label required-field">Discount Type</label>
                                            <select class="form-select <%= locals.errors?.discountType ? 'is-invalid' : '' %>"
                                                id="discountType" 
                                                name="discountType" 
                                                required>
                                                <option value="percentage" 
                                                    <%= coupon.discountType === 'percentage' ? 'selected' : '' %>>
                                                    Percentage Off
                                                </option>
                                                <option value="fixed"
                                                    <%= coupon.discountType === 'fixed' ? 'selected' : '' %>>
                                                    Fixed Amount Off
                                                </option>
                                            </select>
                                            <% if (locals.errors?.discountType) { %>
                                                <div class="invalid-feedback"><%= errors.discountType.message %></div>
                                            <% } %>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="discountValue" class="form-label required-field">Discount Value</label>
                                            <div class="input-group">
                                                <input type="number" 
                                                    class="form-control <%= locals.errors?.discountValue ? 'is-invalid' : '' %>"
                                                    id="discountValue" 
                                                    name="discountValue" 
                                                    required 
                                                    min="0" 
                                                    step="0.01"
                                                    value="<%= coupon.discountValue %>">
                                                <span class="input-group-text" id="discountSymbol">
                                                    <%= coupon.discountType === 'fixed' ? 'â‚¹' : '%' %>
                                                </span>
                                            </div>
                                            <% if (locals.errors?.discountValue) { %>
                                                <div class="invalid-feedback"><%= errors.discountValue.message %></div>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>

                                <!-- Purchase Limits -->
                                <div class="mb-4">
                                    <h5 class="mb-3">Purchase Limits</h5>
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="minPurchaseAmount" class="form-label">Minimum Purchase Amount</label>
                                            <div class="input-group">
                                                <span class="input-group-text">â‚¹</span>
                                                <input type="number" 
                                                    class="form-control"
                                                    id="minPurchaseAmount" 
                                                    name="minPurchaseAmount" 
                                                    min="0" 
                                                    step="0.01"
                                                    value="<%= coupon.minPurchaseAmount %>">
                                            </div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="maxDiscountAmount" class="form-label">Maximum Discount Amount</label>
                                            <div class="input-group">
                                                <span class="input-group-text">â‚¹</span>
                                                <input type="number" 
                                                    class="form-control"
                                                    id="maxDiscountAmount" 
                                                    name="maxDiscountAmount" 
                                                    min="0" 
                                                    step="0.01"
                                                    value="<%= coupon.maxDiscountAmount || '' %>">
                                            </div>
                                            <small class="text-muted">Leave empty for no limit</small>
                                        </div>
                                    </div>
                                </div>

                                <!-- Validity Period -->
                                <div class="mb-4">
                                    <h5 class="mb-3">Validity Period</h5>
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="validFrom" class="form-label required-field">Valid From</label>
                                            <input type="datetime-local" 
                                                class="form-control <%= locals.errors?.validFrom ? 'is-invalid' : '' %>"
                                                id="validFrom" 
                                                name="validFrom" 
                                                required
                                                value="<%= new Date(coupon.validFrom).toISOString().slice(0, 16) %>">
                                            <% if (locals.errors?.validFrom) { %>
                                                <div class="invalid-feedback"><%= errors.validFrom.message %></div>
                                            <% } %>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="validUntil" class="form-label required-field">Valid Until</label>
                                            <input type="datetime-local" 
                                                class="form-control <%= locals.errors?.validUntil ? 'is-invalid' : '' %>"
                                                id="validUntil" 
                                                name="validUntil" 
                                                required
                                                value="<%= new Date(coupon.validUntil).toISOString().slice(0, 16) %>">
                                            <% if (locals.errors?.validUntil) { %>
                                                <div class="invalid-feedback"><%= errors.validUntil.message %></div>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>

                                <!-- Usage Limits -->
                                <div class="mb-4">
                                    <h5 class="mb-3">Usage Limits</h5>
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="usageLimit" class="form-label">Total Usage Limit</label>
                                            <input type="number" 
                                                class="form-control"
                                                id="usageLimit" 
                                                name="usageLimit" 
                                                min="1"
                                                value="<%= coupon.usageLimit || '' %>">
                                            <small class="text-muted">
                                                Leave empty for unlimited uses. Current usage: <%= coupon.usageCount %>
                                            </small>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="perUserLimit" class="form-label">Per User Limit</label>
                                            <input type="number" 
                                                class="form-control"
                                                id="perUserLimit" 
                                                name="perUserLimit" 
                                                min="1"
                                                value="<%= coupon.perUserLimit %>">
                                        </div>
                                    </div>
                                </div>

                                <!-- Product Selection -->
                                <div class="mb-4">
                                    <h5 class="mb-3">Product Selection</h5>
                                    <div class="row">
                                        <div class="col-12 mb-3">
                                            <label for="applicableProducts" class="form-label required-field">
                                                Select Products
                                            </label>
                                            <select class="form-select select2-multiple <%= locals.errors?.applicableProducts ? 'is-invalid' : '' %>"
                                                id="applicableProducts" 
                                                name="applicableProducts[]" 
                                                multiple 
                                                required>
                                                <% if (groupedProducts && Object.keys(groupedProducts).length > 0) { %>
                                                    <% Object.keys(groupedProducts).sort().forEach(function(category) { %>
                                                        <optgroup label="<%= category %>" class="category-group">
                                                            <% groupedProducts[category].forEach(function(product) { %>
                                                                <% if (product.isListed) { %>
                                                                    <option value="<%= product._id %>"
                                                                        <%= coupon.applicableProducts.includes(product._id) ? 'selected' : '' %>>
                                                                        <%= product.productName %>
                                                                        (<%= product.variants.map(v => v.colorName).join(', ') %>)
                                                                        - â‚¹<%= product.priceRange.min.toFixed(2) %> to 
                                                                        â‚¹<%= product.priceRange.max.toFixed(2) %>
                                                                        <% if (product.productOffer > 0) { %>
                                                                            <span class="offer-badge">
                                                                                <%= product.productOffer %>% OFF
                                                                            </span>
                                                                        <% } %>
                                                                    </option>
                                                                <% } %>
                                                            <% }); %>
                                                        </optgroup>
                                                    <% }); %>
                                                <% } %>
                                            </select>
                                            <% if (locals.errors?.applicableProducts) { %>
                                                <div class="invalid-feedback">
                                                    <%= errors.applicableProducts.message %>
                                                </div>
                                            <% } %>
                                            <small class="text-muted">Products are grouped by category. Multiple selection allowed.</small>
                                        </div>
                                    </div>
                                </div>

                                <!-- Status -->
                                <div class="mb-4">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" 
                                            type="checkbox" 
                                            id="isActive" 
                                            name="isActive"
                                            <%= coupon.isActive ? 'checked' : '' %>>
                                        <label class="form-check-label" for="isActive">
                                            Active
                                        </label>
                                    </div>
                                </div>

                                <!-- Form Buttons -->
                                <div class="d-flex justify-content-end gap-2">
                                    <a href="/admin/coupons" class="btn btn-secondary cancel-btn">Cancel</a>
                                    <button type="submit" class="btn btn-primary submit-btn">Update Coupon</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        $(document).ready(function() {
            // Initialize Select2
            initializeSelect2();
            
            // Initialize datetime inputs
            initializeDateTimeInputs();
            
            // Handle discount type change
            $('#discountType').on('change', handleDiscountTypeChange);

            // Handle form submission
            $('#editCouponForm').on('submit', handleFormSubmit);
        });

        // Initialize Select2
        function initializeSelect2() {
            $('.select2-multiple').select2({
                theme: 'bootstrap-5',
                width: '100%',
                placeholder: 'Select products',
                allowClear: true,
                templateResult: formatProductOption,
                templateSelection: formatProductSelection
            });
        }

        // Format product options
        function formatProductOption(product) {
            if (!product.id) return product.text;
            
            const $container = $(
                '<div class="product-option">' +
                    '<div class="d-flex justify-content-between align-items-center">' +
                        '<div class="product-info">' +
                            '<div class="product-name"></div>' +
                            '<div class="variant-info"></div>' +
                        '</div>' +
                        '<div class="price-info"></div>' +
                    '</div>' +
                '</div>'
            );

            const $element = $(product.element);
            const text = $element.text();
            const [name, variants, prices] = text.split(/[()]/);

            $container.find('.product-name').text(name.trim());
            
            if (variants) {
                $container.find('.variant-info').text(`(${variants.trim()})`);
            }

            const priceMatch = text.match(/â‚¹[\d.]+ to â‚¹[\d.]+/);
            if (priceMatch) {
                $container.find('.price-info').text(priceMatch[0]);
            }

            if ($element.text().includes('OFF')) {
                const offerMatch = text.match(/(\d+)% OFF/);
                if (offerMatch) {
                    $container.find('.product-name').append(
                        `<span class="offer-badge ms-2">${offerMatch[0]}</span>`
                    );
                }
            }

            return $container;
        }

        // Format selected product display
        function formatProductSelection(product) {
            if (!product.id) return product.text;
            return $(product.element).text().split('(')[0].trim();
        }

        // Initialize datetime inputs
        function initializeDateTimeInputs() {
            const validFrom = document.getElementById('validFrom');
            const validUntil = document.getElementById('validUntil');
            
            validFrom.addEventListener('change', function() {
                validUntil.min = this.value;
                if (validUntil.value && validUntil.value < this.value) {
                    validUntil.value = this.value;
                }
                validateDateRange();
            });

            validUntil.addEventListener('change', validateDateRange);
        }

        // Handle discount type change
        function handleDiscountTypeChange() {
            const discountType = document.getElementById('discountType').value;
            const discountSymbol = document.getElementById('discountSymbol');
            const discountValue = document.getElementById('discountValue');
            const maxDiscountInput = document.getElementById('maxDiscountAmount');

            if (discountType === 'percentage') {
                discountSymbol.textContent = '%';
                discountValue.max = '100';
                maxDiscountInput.parentElement.parentElement.classList.remove('d-none');
            } else {
                discountSymbol.textContent = 'â‚¹';
                discountValue.removeAttribute('max');
                maxDiscountInput.parentElement.parentElement.classList.add('d-none');
            }
        }

        // Validate date range
        function validateDateRange() {
            const validFrom = new Date(document.getElementById('validFrom').value);
            const validUntil = new Date(document.getElementById('validUntil').value);
            
            if (validUntil <= validFrom) {
                document.getElementById('validUntil').setCustomValidity('End date must be after start date');
                return false;
            }
            
            document.getElementById('validUntil').setCustomValidity('');
            return true;
        }

        async function handleFormSubmit(e) {
    e.preventDefault();

    if (!validateForm()) {
        showValidationErrors();
        return;
    }

    const submitBtn = $(this).find('button[type="submit"]');
    const originalBtnText = submitBtn.html();
    
    try {
        submitBtn.html('<span class="spinner-border spinner-border-sm me-2"></span>Updating...').prop('disabled', true);

        const formData = new FormData(this);
        const couponId = '<%= coupon._id %>';
        
        const jsonData = {
            applicableProducts: [],
            isActive: false
        };

        formData.forEach((value, key) => {
            if (key === 'applicableProducts[]') {
                jsonData.applicableProducts.push(value);
            } else if (key === 'isActive') {
                jsonData.isActive = true;
            } else {
                jsonData[key] = value;
            }
        });

        const response = await fetch(`/admin/coupons/edit/${couponId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonData)
        });

        const result = await response.json();

        if (!response.ok) {
            throw new Error(result.message || 'Server returned an error');
        }

        if (result.success) {
            await Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: result.message || 'Coupon updated successfully',
                showConfirmButton: false,
                timer: 1500
            });
            window.location.href = '/admin/coupons';
        } else {
            // Handle validation errors from server
            if (result.errors) {
                const errorMessages = Object.values(result.errors)
                    .map(err => err.message)
                    .join('\n');
                    
                await Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: errorMessages || 'Please check your input',
                    confirmButtonColor: '#4f46e5'
                });
                
                // Highlight invalid fields
                Object.keys(result.errors).forEach(fieldName => {
                    const field = $(`[name="${fieldName}"]`);
                    field.addClass('is-invalid');
                    field.next('.invalid-feedback').text(result.errors[fieldName].message);
                });
            } else {
                throw new Error(result.message || 'Failed to update coupon');
            }
        }
    } catch (error) {
        console.error('Error:', error);
        await Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: error.message || 'An unexpected error occurred',
            confirmButtonColor: '#4f46e5'
        });
    } finally {
        submitBtn.html(originalBtnText).prop('disabled', false);
    }
}

        // Validate form
        function validateForm() {
    const form = document.getElementById('editCouponForm');
    const fields = form.querySelectorAll('input[required], select[required]');
    let isValid = true;

    // Clear previous validation states
    $('.is-invalid').removeClass('is-invalid');
    $('.invalid-feedback').empty();

    // Validate required fields
    fields.forEach(field => {
        if (!field.value.trim()) {
            isValid = false;
            $(field).addClass('is-invalid');
            $(field).next('.invalid-feedback').text('This field is required');
        }
    });

    // Validate product selection
    const selectedProducts = $('#applicableProducts').val();
    if (!selectedProducts || selectedProducts.length === 0) {
        isValid = false;
        $('#applicableProducts').next('.select2-container').addClass('is-invalid');
        $('#applicableProducts').parent().find('.invalid-feedback').text('Please select at least one product');
    }

    // Validate date range
    if (!validateDateRange()) {
        isValid = false;
    }

    // Validate discount value
    const discountType = $('#discountType').val();
    const discountValue = parseFloat($('#discountValue').val());
    
    if (isNaN(discountValue) || discountValue <= 0) {
        isValid = false;
        $('#discountValue').addClass('is-invalid');
        $('#discountValue').next('.invalid-feedback').text('Please enter a valid discount value');
    } else if (discountType === 'percentage' && discountValue > 100) {
        isValid = false;
        $('#discountValue').addClass('is-invalid');
        $('#discountValue').next('.invalid-feedback').text('Percentage cannot exceed 100%');
    }

    return isValid;
}

        function showValidationErrors() {
            Swal.fire({
                icon: 'error',
                title: 'Validation Error',
                text: 'Please fill in all required fields correctly.',
                confirmButtonColor: '#4f46e5'
            });
        }

        // Show flash messages if they exist
        <% if (locals.success) { %>
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: '<%= success %>',
                showConfirmButton: false,
                timer: 2000
            });
        <% } %>

        <% if (locals.error) { %>
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: '<%= error %>',
                confirmButtonColor: '#4f46e5'
            });
        <% } %>
    </script>
</body>
</html>