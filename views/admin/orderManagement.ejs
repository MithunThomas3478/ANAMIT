<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ANAMIT - Order Management</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #4f46e5;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --border-radius: 0.5rem;
            --sidebar-width: 250px;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f3f4f6;
        }

        .main-content {
            margin-left: var(--sidebar-width);
            padding: 2rem;
            transition: margin-left 0.3s ease;
        }

        .dashboard-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 1.5rem;
        }

        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: var(--border-radius);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .stat-label {
            color: #6b7280;
            font-size: 0.875rem;
            margin-bottom: 0.5rem;
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--primary-color);
        }

        .filters-container {
            background: white;
            padding: 1.5rem;
            border-radius: var(--border-radius);
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .table-container {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            overflow: hidden;
        }

        .table-header {
            background: var(--primary-color);
            color: white;
        }

        .table-header th {
            font-weight: 500;
            padding: 1rem;
        }

        .order-row {
            transition: background-color 0.2s ease;
        }

        .order-row:hover {
            background-color: #f8fafc;
        }

        .order-cell {
            padding: 1rem;
            vertical-align: middle;
        }

        .status-badge {
            padding: 0.5rem 1rem;
            border-radius: 2rem;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .status-pending { background: var(--warning-color); color: white; }
        .status-processing { background: var(--primary-color); color: white; }
        .status-delivered { background: var(--success-color); color: white; }
        .status-cancelled { background: var(--danger-color); color: white; }

        .action-btn {
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            transition: transform 0.2s ease;
        }

        .action-btn:hover {
            transform: translateY(-1px);
        }

        .search-box {
            position: relative;
        }

        .search-box i {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6b7280;
        }

        .search-input {
            padding-left: 2.5rem;
            border-radius: 0.375rem;
            border: 1px solid #e5e7eb;
        }

        .filter-select {
            border-radius: 0.375rem;
            border: 1px solid #e5e7eb;
            padding: 0.5rem;
            width: 100%;
        }

        .date-filter {
            border-radius: 0.375rem;
            border: 1px solid #e5e7eb;
            padding: 0.5rem;
        }

        .pagination {
            margin-top: 1.5rem;
            justify-content: center;
        }

        .page-link {
            color: var(--primary-color);
            border-color: var(--primary-color);
            margin: 0 0.25rem;
        }

        .page-item.active .page-link {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding: 1rem;
            }

            .stats-container {
                grid-template-columns: 1fr;
            }

            .table-responsive {
                overflow-x: auto;
            }
        }

        .modal-header {
            background: var(--primary-color);
            color: white;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .select2-container {
            width: 100% !important;
        }
    </style>
</head>
<body>
    <%- include('../partials/admin/adminHeader') %>

    <main class="main-content">
        <h1 class="dashboard-title">Order Management</h1>

        

        <!-- Orders Table -->
        <div class="table-container">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-header">
                        <tr>
                            <th>Order ID</th>
                            <th>Customer</th>
                            <th>Date</th>
                            <th>Total Amount</th>
                            <th>Status</th>
                            <th>Payment</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% orders.forEach(order => { %>
                            <tr class="order-row" data-order-id="<%= order._id %>">
                                <td class="order-cell">#<%= order.orderNumber %></td>
                                <td class="order-cell">
                                    <%= order.shippingAddress.fullName %><br>
                                    <small class="text-muted"><%= order.user.email %></small>
                                </td>
                                <td class="order-cell">
                                    <%= new Date(order.createdAt).toLocaleDateString() %><br>
                                    <small class="text-muted">
                                        <%= new Date(order.createdAt).toLocaleTimeString() %>
                                    </small>
                                </td>
                                <td class="order-cell">â‚¹<%= order.totalAmount.toFixed(2) %></td>
                                <td class="order-cell">
                                    <select class="form-select form-select-sm status-select"
                                            onchange="updateOrderStatus('<%= order._id %>', this.value)"
                                            <%= ['delivered', 'cancelled'].includes(order.orderStatus) ? 'disabled' : '' %>>
                                        <option value="pending" <%= order.orderStatus === 'pending' ? 'selected' : '' %>>
                                            Pending
                                        </option>
                                        <option value="confirmed" <%= order.orderStatus === 'confirmed' ? 'selected' : '' %>>
                                            Confirmed
                                        </option>
                                        <option value="processing" <%= order.orderStatus === 'processing' ? 'selected' : '' %>>
                                            Processing
                                        </option>
                                        <option value="shipped" <%= order.orderStatus === 'shipped' ? 'selected' : '' %>>
                                            Shipped
                                        </option>
                                        <option value="delivered" <%= order.orderStatus === 'delivered' ? 'selected' : '' %>>
                                            Delivered
                                        </option>
                                        
                                    </select>
                                </td>
                                <td class="order-cell">
                                    <span class="badge <%= order.paymentStatus === 'completed' ? 'bg-success' : 'bg-warning' %>">
                                        <%= order.paymentStatus %>
                                    </span>
                                    <br>
                                    <small><%= order.paymentMethod.toUpperCase() %></small>
                                </td>
                                <td class="order-cell text-end">
                                    <div class="btn-group">
                                        <a href="/admin/order/view/<%= order._id %>" 
                                           class="btn btn-sm btn-info me-2">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a href="/admin/order/<%= order._id %>/invoice" 
                                           class="btn btn-sm btn-secondary" target="_blank">
                                            <i class="fas fa-file-invoice"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <% if (totalPages > 1) { %>
                <nav aria-label="Orders pagination" class="p-3">
                    <ul class="pagination mb-0">
                        <% if (currentPage > 1) { %>
                            <li class="page-item">
                                <a class="page-link" href="?page=<%= currentPage - 1 %>&status=<%= status %>&date=<%= date %>">
                                    <i class="fas fa-chevron-left"></i>
                                </a>
                            </li>
                        <% } %>

                        <% for(let i = 1; i <= totalPages; i++) { %>
                            <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                                <a class="page-link" href="?page=<%= i %>&status=<%= status %>&date=<%= date %>">
                                    <%= i %>
                                </a>
                            </li>
                        <% } %>

                        <% if (currentPage < totalPages) { %>
                            <li class="page-item">
                                <a class="page-link" href="?page=<%= currentPage + 1 %>&status=<%= status %>&date=<%= date %>">
                                    <i class="fas fa-chevron-right"></i>
                                </a>
                            </li>
                        <% } %>
                    </ul>
                </nav>
            <% } %>
        </div>
    </main>

    <%- include('../partials/admin/adminFooter') %>

    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        // Socket.IO Connection
        const socket = io();

        // Listen for order updates
        socket.on('orderStatusUpdate', function(data) {
            const orderRow = document.querySelector(`tr[data-order-id="${data.orderId}"]`);
            if (orderRow) {
                // Update order status select
                const statusSelect = orderRow.querySelector('.status-select');
                if (statusSelect) {
                    statusSelect.value = data.status;
                    updateSelectStyle(statusSelect);
                }

                // Update payment status badge
                if (data.paymentStatus) {
                    const paymentBadge = orderRow.querySelector('.badge');
                    if (paymentBadge) {
                        paymentBadge.textContent = data.paymentStatus;
                        paymentBadge.className = `badge ${data.paymentStatus === 'completed' ? 'bg-success' : 'bg-warning'}`;
                    }
                }
            }
        });

        // Filter and Search Functions
        let searchTimeout;
        const searchOrder = document.getElementById('searchOrder');
        const statusFilter = document.getElementById('statusFilter');
        const paymentFilter = document.getElementById('paymentFilter');
        const startDate = document.getElementById('startDate');
        const endDate = document.getElementById('endDate');

        function applyFilters() {
            const searchQuery = searchOrder.value;
            const status = statusFilter.value;
            const payment = paymentFilter.value;
            const start = startDate.value;
            const end = endDate.value;

            let url = '/admin/orders?';
            const params = new URLSearchParams();

            if (searchQuery) params.append('search', searchQuery);
            if (status !== 'all') params.append('status', status);
            if (payment !== 'all') params.append('payment', payment);
            if (start) params.append('startDate', start);
            if (end) params.append('endDate', end);

            window.location.href = url + params.toString();
        }

        // Add event listeners for filters
        searchOrder.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(applyFilters, 500);
        });

        statusFilter.addEventListener('change', applyFilters);
        paymentFilter.addEventListener('change', applyFilters);
        startDate.addEventListener('change', applyFilters);
        endDate.addEventListener('change', applyFilters);

        function resetFilters() {
            searchOrder.value = '';
            statusFilter.value = 'all';
            paymentFilter.value = 'all';
            startDate.value = '';
            endDate.value = '';
            applyFilters();
        }

        // Update Order Status
        async function updateOrderStatus(orderId, newStatus) {
            try {
                const response = await fetch(`/admin/order/${orderId}/update-status`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status: newStatus })
                });

                const result = await response.json();

                if (response.ok) {
                    Swal.fire({
                        title: 'Success!',
                        text: result.message,
                        icon: 'success',
                        timer: 1500,
                        showConfirmButton: false
                    });

                    // Update the select style after successful status change
                    const statusSelect = document.querySelector(`tr[data-order-id="${orderId}"] .status-select`);
                    if (statusSelect) {
                        updateSelectStyle(statusSelect);
                    }

                    // If status is set to delivered or cancelled, disable the select
                    if (newStatus === 'delivered' || newStatus === 'cancelled') {
                        statusSelect.disabled = true;
                    }
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                Swal.fire({
                    title: 'Error!',
                    text: error.message || 'Failed to update order status',
                    icon: 'error'
                });
            }
        }

        // Style functions for status select
        function updateSelectStyle(select) {
            const status = select.value;
            let backgroundColor;
            
            switch(status) {
                case 'delivered':
                    backgroundColor = '#10b981';
                    break;
                case 'processing':
                    backgroundColor = '#f59e0b';
                    break;
                case 'shipped':
                    backgroundColor = '#3b82f6';
                    break;
                case 'cancelled':
                    backgroundColor = '#ef4444';
                    break;
                case 'confirmed':
                    backgroundColor = '#4f46e5';
                    break;
                default:
                    backgroundColor = '#6b7280';
            }
            
            select.style.backgroundColor = backgroundColor;
            select.style.color = 'white';
            select.style.border = 'none';
        }

        // Export functions
        function exportOrders(format) {
            const filters = {
                search: searchOrder.value,
                status: statusFilter.value,
                payment: paymentFilter.value,
                startDate: startDate.value,
                endDate: endDate.value
            };

            const queryString = new URLSearchParams(filters).toString();
            window.open(`/admin/orders/export/${format}?${queryString}`, '_blank');
        }

        // Initialize all select styles on page load
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.status-select').forEach(updateSelectStyle);
        });

        // Handle date validation
        endDate.addEventListener('change', function() {
            if (startDate.value && this.value) {
                if (new Date(this.value) < new Date(startDate.value)) {
                    Swal.fire({
                        title: 'Invalid Date Range',
                        text: 'End date cannot be earlier than start date',
                        icon: 'error'
                    });
                    this.value = '';
                }
            }
        });

        startDate.addEventListener('change', function() {
            if (endDate.value && this.value) {
                if (new Date(endDate.value) < new Date(this.value)) {
                    Swal.fire({
                        title: 'Invalid Date Range',
                        text: 'Start date cannot be later than end date',
                        icon: 'error'
                    });
                    this.value = '';
                }
            }
        });
    </script>
</body>
</html>