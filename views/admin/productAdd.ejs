<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
    
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .main-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .card {
            border: none;
            box-shadow: 0 0 20px rgba(0,0,0,0.08);
            border-radius: 12px;
        }

        .card-header {
            background-color: white;
            border-bottom: 1px solid #e9ecef;
            padding: 1.5rem;
        }

        .form-label {
            font-weight: 500;
            color: #344767;
        }

        .variant-section {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .image-upload-zone {
            border: 2px dashed #dee2e6;
            border-radius: 8px;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .image-upload-zone:hover {
            border-color: #6c757d;
            background-color: #f8f9fa;
        }

        .preview-image-container {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            margin-top: 1rem;
        }

        .preview-image-item {
            position: relative;
            width: 100px;
            height: 100px;
        }

        .preview-image-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 8px;
        }

        .remove-image {
            position: absolute;
            top: -8px;
            right: -8px;
            background-color: #dc3545;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 12px;
        }

        .error-feedback {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .size-variant {
            background-color: white;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .btn-add-variant {
            background-color: #eef2ff;
            color: #4f46e5;
            border: none;
            transition: all 0.3s ease;
        }

        .btn-add-variant:hover {
            background-color: #4f46e5;
            color: white;
        }

        .cropper-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0,0,0,0.5);
            z-index: 1050;
            padding: 2rem;
        }

        .cropper-content {
            background: white;
            border-radius: 12px;
            max-width: 800px;
            margin: 0 auto;
            height: 80vh;
            display: flex;
            flex-direction: column;
        }

        .cropper-area {
            flex: 1;
            overflow: hidden;
            position: relative;
        }
    </style>
</head>
<body>
    <!-- Header Template Include -->
    <%- include('../partials/admin/adminHeader') %>

    <div class="main-container">
        <div class="card">
            <div class="card-header">
                <h2 class="h4 mb-0">Add New Product</h2>
            </div>
            <div class="card-body">
                <form id="addProductForm" method="post" enctype="multipart/form-data">
                    <!-- Basic Information -->
                    <div class="mb-4">
                        <h5 class="mb-3">Basic Information</h5>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="productName" class="form-label">Product Name*</label>
                                <input type="text" class="form-control" id="productName" name="productName" required>
                                <div class="error-feedback" id="productName-error"></div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="category" class="form-label">Category*</label>
                                <select class="form-select" id="category" name="category" required>
                                    <option value="">Select Category</option>
                                </select>
                                <div class="error-feedback" id="category-error"></div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="subcategory" class="form-label">Subcategory*</label>
                                <select class="form-select" id="subcategory" name="subcategory" required disabled>
                                    <option value="">Select Subcategory</option>
                                </select>
                                <div class="error-feedback" id="subcategory-error"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Description -->
                    <div class="mb-4">
                        <h5 class="mb-3">Product Description</h5>
                        <div class="mb-3">
                            <label for="description" class="form-label">Full Description*</label>
                            <textarea class="form-control" id="description" name="description" rows="4" required></textarea>
                            <div class="error-feedback" id="description-error"></div>
                        </div>
                        <div class="mb-3">
                            <label for="shortDescription" class="form-label">Short Description</label>
                            <textarea class="form-control" id="shortDescription" name="shortDescription" rows="2"></textarea>
                            <div class="error-feedback" id="shortDescription-error"></div>
                        </div>
                    </div>

                    <!-- Product Variants -->
                    <div class="mb-4">
                        <h5 class="mb-3">Product Variants</h5>
                        <div id="variantsContainer">
                            <!-- Variants will be added here -->
                        </div>
                        <button type="button" class="btn btn-add-variant" id="addVariantBtn">
                            <i class="bi bi-plus-circle me-2"></i>Add Color Variant
                        </button>
                    </div>

                    <!-- Submit Button -->
                    <div class="text-end mt-4">
                        <button type="submit" class="btn btn-primary" id="submitBtn">
                            Publish Product
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Cropper Modal -->
    <div id="cropperModal" class="cropper-modal">
        <div class="cropper-content">
            <div class="p-3 border-bottom">
                <h5 class="mb-0">Crop Image</h5>
            </div>
            <div class="cropper-area">
                <img id="cropperImage" style="max-width: 100%;">
            </div>
            <div class="p-3 border-top d-flex justify-content-end gap-2">
                <button type="button" class="btn btn-secondary" id="cancelCrop">Cancel</button>
                <button type="button" class="btn btn-primary" id="applyCrop">Apply</button>
            </div>
        </div>
    </div>

    <!-- Footer Template Include -->
    <%- include('../partials/admin/adminFooter') %>

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

    <!-- Initialize Categories Data -->
    <script>
        window.categoriesData = <%- JSON.stringify(categories) %>;
    </script>

    <!-- Main Script -->
    <script>
        // Global Variables
        let currentVariantIndex = 0;
        let cropper = null;
        const variantImages = new Map();

        // Initialize when document is ready
        document.addEventListener('DOMContentLoaded', function() {
            initializeCategoryHandling();
            initializeVariantHandling();
            initializeFormValidation();
            populateInitialVariant();
        });

        // Category Handling
        function initializeCategoryHandling() {
            const categorySelect = document.getElementById('category');
            const subcategorySelect = document.getElementById('subcategory');

            // Populate categories
            window.categoriesData.forEach(category => {
                const option = new Option(category.name, category._id);
                categorySelect.add(option);
            });

            // Handle category change
            categorySelect.addEventListener('change', function() {
                // Reset subcategory select
                subcategorySelect.innerHTML = '<option value="">Select Subcategory</option>';
                subcategorySelect.disabled = true;

                const selectedCategory = window.categoriesData.find(c => c._id === this.value);
                
                if (selectedCategory?.subcategories?.length) {
                    subcategorySelect.disabled = false;
                    selectedCategory.subcategories.forEach(sub => {
                        subcategorySelect.add(new Option(sub.name, sub._id));
                    });
                }
            });
        }

        // Variant Handling
        function initializeVariantHandling() {
            document.getElementById('addVariantBtn').addEventListener('click', addNewVariant);
        }

        function populateInitialVariant() {
            addNewVariant();
        }

        function addNewVariant() {
            const variantHtml = createVariantHTML(currentVariantIndex);
            document.getElementById('variantsContainer').insertAdjacentHTML('beforeend', variantHtml);
            initializeImageUpload(currentVariantIndex);
            updateRemoveButtons();
            currentVariantIndex++;
        }

        function createVariantHTML(index) {
            return `
                <div class="variant-section" data-variant-index="${index}">
                    <div class="row mb-3">
                        <div class="col-md-5">
                            <label class="form-label">Color Value*</label>
                            <input type="color" class="form-control" name="variants[${index}][colorValue]" required>
                        </div>
                        <div class="col-md-5">
                            <label class="form-label">Color Name*</label>
                            <input type="text" class="form-control" name="variants[${index}][colorName]" required>
                        </div>
                        <div class="col-md-2 d-flex align-items-end">
                            <button type="button" class="btn btn-outline-danger remove-variant">Remove</button>
                        </div>
                    </div>

                    <!-- Size Variants -->
                    <div class="size-variants mb-3">
                        <h6 class="mb-3">Size Variants</h6>
                        <div class="size-variant mb-3">
                            ${createSizeVariantHTML(index, 0)}
                        </div>
                        <button type="button" class="btn btn-outline-primary btn-sm add-size">
                            Add Size Variant
                        </button>
                    </div>

                    <!-- Image Upload -->
                    <div class="image-upload-section">
                        <h6 class="mb-3">Variant Images</h6>
                        <div class="image-upload-zone">
                            <i class="bi bi-cloud-upload mb-2" style="font-size: 2rem;"></i>
                            <p class="mb-0">Drop images here or click to upload</p>
                            <input type="file" class="variant-image-input" multiple accept="image/*" style="display: none;">
                        </div>
                        <div class="preview-image-container"></div>
                    </div>
                </div>
            `;
        }

        function createSizeVariantHTML(variantIndex, sizeIndex) {
            return `
                <div class="row">
                    <div class="col-md-2">
                        <label class="form-label">Size*</label>
                        <select class="form-select" name="variants[${variantIndex}][sizes][${sizeIndex}][size]" required>
                            <option value="">Select</option>
                            <option value="XS">XS</option>
                            <option value="S">S</option>
                            <option value="M">M</option>
                            <option value="L">L</option>
                            <option value="XL">XL</option>
                            <option value="XXL">XXL</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Stock*</label>
                        <input type="number" class="form-control" 
                               name="variants[${variantIndex}][sizes][${sizeIndex}][stock]" 
                               min="0" required>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Price*</label>
                        <input type="number" class="form-control" 
                               name="variants[${variantIndex}][sizes][${sizeIndex}][price]" 
                               min="0" step="0.01" required>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Status*</label>
                        <select class="form-select" name="variants[${variantIndex}][sizes][${sizeIndex}][status]" required>
                            <option value="available">Available</option><option value="out of stock">Out of Stock</option>
                            <option value="discontinued">Discontinued</option>
                        </select>
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="button" class="btn btn-outline-danger btn-sm remove-size">Remove</button>
                    </div>
                </div>
            `;
        }

        // Image Handling
        function initializeImageUpload(variantIndex) {
            const variantSection = document.querySelector(`[data-variant-index="${variantIndex}"]`);
            if (!variantSection) return;

            const uploadZone = variantSection.querySelector('.image-upload-zone');
            const fileInput = variantSection.querySelector('.variant-image-input');
            const previewContainer = variantSection.querySelector('.preview-image-container');

            if (!variantImages.has(variantIndex)) {
                variantImages.set(variantIndex, []);
            }

            // Drag and drop handlers
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                uploadZone.addEventListener(eventName, preventDefault);
            });

            ['dragenter', 'dragover'].forEach(eventName => {
                uploadZone.addEventListener(eventName, () => {
                    uploadZone.classList.add('drag-active');
                });
            });

            ['dragleave', 'drop'].forEach(eventName => {
                uploadZone.addEventListener(eventName, () => {
                    uploadZone.classList.remove('drag-active');
                });
            });

            // Handle dropped files
            uploadZone.addEventListener('drop', function(e) {
                const files = Array.from(e.dataTransfer.files);
                handleFiles(files, variantIndex);
            });

            // Handle clicked upload
            uploadZone.addEventListener('click', () => fileInput.click());
            fileInput.addEventListener('change', function() {
                handleFiles(Array.from(this.files), variantIndex);
            });
        }

        function handleFiles(files, variantIndex) {
            files.forEach(file => {
                if (file.type.startsWith('image/')) {
                    processImage(file, variantIndex);
                }
            });
        }

        function processImage(file, variantIndex) {
            if (!validateImageFile(file)) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                currentVariantIndex = variantIndex;
                showCropper(e.target.result);
            };
            reader.readAsDataURL(file);
        }

        function showCropper(imageSrc) {
            const cropperModal = document.getElementById('cropperModal');
            const cropperImage = document.getElementById('cropperImage');

            cropperImage.src = imageSrc;
            cropperModal.style.display = 'flex';

            if (cropper) cropper.destroy();

            cropper = new Cropper(cropperImage, {
                aspectRatio: 1,
                viewMode: 2,
                dragMode: 'move',
                autoCropArea: 1,
                responsive: true,
                restore: true,
                guides: true,
                center: true,
                highlight: false,
                cropBoxMovable: true,
                cropBoxResizable: true,
                toggleDragModeOnDblclick: false
            });
        }

        // Form Validation and Submission
        function initializeFormValidation() {
            const form = document.getElementById('addProductForm');

            // Event delegation for size and variant management
            document.getElementById('variantsContainer').addEventListener('click', function(e) {
                if (e.target.classList.contains('remove-variant')) {
                    handleRemoveVariant(e);
                } else if (e.target.classList.contains('add-size')) {
                    handleAddSize(e);
                } else if (e.target.classList.contains('remove-size')) {
                    handleRemoveSize(e);
                }
            });

            // Form submission
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                if (!validateForm()) return;

                try {
                    const formData = await prepareFormData();
                    await submitForm(formData);
                } catch (error) {
                    handleError(error);
                }
            });
        }

        async function prepareFormData() {
    const formData = new FormData();
    const basicFields = ['productName', 'description', 'shortDescription', 'category', 'subcategory'];
    
    // Add basic fields
    basicFields.forEach(field => {
        const value = document.getElementById(field).value;
        if (value) {
            formData.append(field, value);
        }
    });

    // Process variants
    const variants = [];
    const variantSections = document.querySelectorAll('.variant-section');
    
    for (let i = 0; i < variantSections.length; i++) {
        const section = variantSections[i];
        const variantIndex = section.dataset.variantIndex;
        
        const variant = {
            colorValue: section.querySelector('[name$="[colorValue]"]').value,
            colorName: section.querySelector('[name$="[colorName]"]').value,
            sizes: []
        };

        // Process sizes
        const sizeRows = section.querySelectorAll('.size-variant .row');
        sizeRows.forEach(row => {
            variant.sizes.push({
                size: row.querySelector('[name$="[size]"]').value,
                stock: row.querySelector('[name$="[stock]"]').value,
                price: row.querySelector('[name$="[price]"]').value,
                status: row.querySelector('[name$="[status]"]').value
            });
        });

        variants.push(variant);

        // Add images
        const variantImagesArray = variantImages.get(parseInt(variantIndex)) || [];
        if (variantImagesArray.length === 0) {
            throw new Error(`Please add at least one image for variant ${i + 1}`);
        }

        variantImagesArray.forEach((imageData, imageIndex) => {
            // Convert base64 to blob
            const blob = dataURLtoBlob(imageData);
            // Use the correct field name format
            formData.append(`variants[${i}][images][${imageIndex}]`, blob, `image-${i}-${imageIndex}.jpg`);
        });
    }

    // Add variants data as JSON string
    formData.append('variants', JSON.stringify(variants));

    // Log the formData contents for debugging
    for (let pair of formData.entries()) {
        console.log(pair[0], pair[1]);
    }

    return formData;
}

        async function submitForm(formData) {
    showLoading(true);
    
    try {
        const response = await fetch('/admin/addProduct', {
            method: 'POST',
            body: formData
        });

        const result = await response.json();

        if (result.success) {
            await Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Product added successfully',
                timer: 1500
            });
            window.location.href = '/admin/product';
        } else {
            throw new Error(result.message || 'Failed to add product');
        }
    } catch (error) {
        handleError(error);
    } finally {
        showLoading(false);
    }
}
        // Utility Functions
        function validateForm() {
            clearErrors();
            let isValid = true;

            // Basic fields validation
            const requiredFields = {
                productName: 'Product name is required',
                category: 'Category is required',
                subcategory: 'Subcategory is required',
                description: 'Description is required'
            };

            for (const [fieldId, message] of Object.entries(requiredFields)) {
                const field = document.getElementById(fieldId);
                if (!field.value.trim()) {
                    showError(fieldId, message);
                    isValid = false;
                }
            }

            // Variants validation
            const variants = document.querySelectorAll('.variant-section');
            if (variants.length === 0) {
                showError('variants', 'At least one variant is required');
                isValid = false;
            }

            variants.forEach((variant, index) => {
                if (!validateVariant(variant, index)) {
                    isValid = false;
                }
            });

            return isValid;
        }

        function validateVariant(variant, index) {
            let isValid = true;

            // Color validation
            const colorValue = variant.querySelector('[name$="[colorValue]"]').value;
            const colorName = variant.querySelector('[name$="[colorName]"]').value;

            if (!colorValue || !colorName) {
                showError(`variant-${index}`, 'Color information is required');
                isValid = false;
            }

            // Sizes validation
            const sizes = variant.querySelectorAll('.size-variant .row');
            if (sizes.length === 0) {
                showError(`variant-${index}`, 'At least one size variant is required');
                isValid = false;
            }

            // Images validation
            const variantImagesArray = variantImages.get(index) || [];
            if (variantImagesArray.length === 0) {
                showError(`variant-${index}`, 'At least one image is required');
                isValid = false;
            }

            return isValid;
        }

        function showError(fieldId, message) {
            const errorElement = document.getElementById(`${fieldId}-error`);
            if (errorElement) {
                errorElement.textContent = message;
            }
        }

        function clearErrors() {
            document.querySelectorAll('.error-feedback').forEach(error => {
                error.textContent = '';
            });
        }

        function preventDefault(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        function validateImageFile(file) {
            const maxSize = 5 * 1024 * 1024; // 5MB
            if (file.size > maxSize) {
                Swal.fire({
                    icon: 'error',
                    title: 'File Too Large',
                    text: 'Please select an image less than 5MB'
                });
                return false;
            }
            return true;
        }

        function dataURLtoBlob(dataURL) {
            const arr = dataURL.split(',');
            const mime = arr[0].match(/:(.*?);/)[1];
            const bstr = atob(arr[1]);
            let n = bstr.length;
            const u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            return new Blob([u8arr], { type: mime });
        }

        function showLoading(show = true) {
            const submitBtn = document.getElementById('submitBtn');
            if (show) {
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Publishing...';
            } else {
                submitBtn.disabled = false;
                submitBtn.innerHTML = 'Publish Product';
            }
        }

        function handleError(error) {
    console.error('Error:', error);
    Swal.fire({
        icon: 'error',
        title: 'Error',
        text: Array.isArray(error.errors) 
            ? error.errors.join('\n') 
            : (error.message || 'An unexpected error occurred')
    });
}
        function updateRemoveButtons() {
            const variants = document.querySelectorAll('.variant-section');
            variants.forEach(variant => {
                const removeBtn = variant.querySelector('.remove-variant');
                removeBtn.style.display = variants.length === 1 ? 'none' : 'block';
            });
        }

        function handleRemoveVariant(e) {
            const variantSection = e.target.closest('.variant-section');
            const variantIndex = parseInt(variantSection.dataset.variantIndex);
            variantImages.delete(variantIndex);
            variantSection.remove();
            updateRemoveButtons();
        }

        function handleAddSize(e) {
            const variantSection = e.target.closest('.variant-section');
            const variantIndex = variantSection.dataset.variantIndex;
            const sizeContainer = variantSection.querySelector('.size-variants');
            const sizeCount = sizeContainer.querySelectorAll('.size-variant').length;
            
            const newSizeHtml = createSizeVariantHTML(variantIndex, sizeCount);
            const newSizeDiv = document.createElement('div');
            newSizeDiv.className = 'size-variant mb-3';
            newSizeDiv.innerHTML = newSizeHtml;
            
            e.target.insertAdjacentElement('beforebegin', newSizeDiv);
        }

        function handleRemoveSize(e) {
            const sizeVariant = e.target.closest('.size-variant');
            const variantSection = e.target.closest('.variant-section');
            const sizeVariants = variantSection.querySelectorAll('.size-variant');
            
            if (sizeVariants.length > 1) {
                sizeVariant.remove();
            }
        }

        // Initialize the page
        document.getElementById('applyCrop').addEventListener('click', function() {
            if (!cropper) return;

            const croppedCanvas = cropper.getCroppedCanvas({
                width: 800,
                height: 800
            });

            const croppedImage = croppedCanvas.toDataURL('image/jpeg', 0.9);
            const images = variantImages.get(currentVariantIndex) || [];
            images.push(croppedImage);
            variantImages.set(currentVariantIndex, images);

            updateImagePreview(currentVariantIndex);
            closeCropper();
        });

        document.getElementById('cancelCrop').addEventListener('click', closeCropper);

        function closeCropper() {
            const cropperModal = document.getElementById('cropperModal');
            cropperModal.style.display = 'none';
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
        }

        function updateImagePreview(variantIndex) {
            const variantSection = document.querySelector(`[data-variant-index="${variantIndex}"]`);
            const previewContainer = variantSection.querySelector('.preview-image-container');
            const images = variantImages.get(variantIndex) || [];

            previewContainer.innerHTML = images.map((image, index) => `
                <div class="preview-image-item">
                    <img src="${image}" alt="Product variant ${index + 1}">
                    <div class="remove-image" data-index="${index}">&times;</div>
                </div>
            `).join('');

            // Add remove image handlers
            previewContainer.querySelectorAll('.remove-image').forEach(button => {
                button.addEventListener('click', function() {
                    const imageIndex = parseInt(this.dataset.index);
                    images.splice(imageIndex, 1);
                    variantImages.set(variantIndex, images);
                    updateImagePreview(variantIndex);
                });
            });
        }
    </script>
</body>
</html>