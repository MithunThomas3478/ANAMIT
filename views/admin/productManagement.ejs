<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f3f4f6;
        }

        .main-content {
            padding: 2rem;
        }

        .add-product-btn:hover {
            background-color: #5b21b6 !important;
        }

        .edit-btn:hover {
            background-color: #7c3aed !important;
        }

        .list-btn:hover {
            background-color: #059669 !important;
        }

        .unlist-btn:hover {
            background-color: #d97706 !important;
        }

        .delete-btn:hover {
            background-color: #dc2626 !important;
        }

        .product-img {
            transition: transform 0.3s ease;
        }

        .product-img:hover {
            transform: scale(1.1);
        }

        .table tr:hover {
            background-color: #f9fafb;
        }

        .page-link:focus {
            box-shadow: 0 0 0 0.25rem rgba(109, 40, 217, 0.25);
        }

        /* Custom SweetAlert Styles */
        .swal2-popup {
            font-family: 'Poppins', sans-serif;
        }

        .swal2-title {
            color: #1F2937 !important;
            font-size: 1.5rem !important;
            font-weight: 600 !important;
        }

        .swal2-html-container {
            color: #4B5563 !important;
            font-size: 1rem !important;
        }

        .swal2-confirm {
            background-color: #ef4444 !important;
            padding: 0.75rem 1.5rem !important;
        }

        .swal2-cancel {
            background-color: #6B7280 !important;
            padding: 0.75rem 1.5rem !important;
        }
    </style>
</head>
<body>
    <%- include('../partials/admin/adminHeader')%>
    <main class="main-content">
        <div class="container">
            <h1 class="mb-4">Product Management</h1>
            
            <div class="d-flex justify-content-end mb-4">
                <a href="/admin/addproduct" class="add-product-btn" style="background-color: #6d28d9; color: white; padding: 0.5rem 1rem; border-radius: 0.5rem; text-decoration: none; font-weight: 500; transition: background-color 0.3s ease;">
                    ➕ ADD NEW PRODUCT
                </a>
            </div>

            <div class="table-responsive bg-white rounded" style="box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                <table class="table mb-0">
                    <thead style="background-color: #4f46e5; color: white;">
                        <tr>
                            <th style="padding: 1rem;">Image</th>
                            <th style="padding: 1rem;">Product Name</th>
                            <th style="padding: 1rem;">Category</th>
                            <th style="padding: 1rem;">Price</th>
                            <th style="padding: 1rem;">Quantity</th>
                            <th style="padding: 1rem;">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% products.slice(startIndex, endIndex).forEach(product => { %>
                            <tr>
                                <td style="padding: 1rem;">
                                    <% if (product.variants && product.variants.length > 0 && product.variants[0].productImage.length > 0) { %>
                                        <img src="<%= product.variants[0].productImage[0] %>" alt="<%= product.productName %>" class="product-img" style="width: 50px; height: 50px; object-fit: cover; border-radius: 0.25rem;">
                                    <% } else { %>
                                        <p>No image available</p>
                                    <% } %>
                                </td>
                                <td style="padding: 1rem;"><%= product.productName %></td>
                                <td style="padding: 1rem;"><%= product.category ? product.category.name : 'No Category' %></td>
                                <td style="padding: 1rem;">₹<%= (product.variants && product.variants[0] && product.variants[0].price) ? product.variants[0].price.toFixed(2) : '0.00' %></td>
                                <td style="padding: 1rem;"><%= product.variants ? product.variants.reduce((sum, variant) => sum + variant.stock, 0) : 0 %></td>
                                <td style="padding: 1rem;">
                                    <div class="d-flex gap-2">
                                        <button class="edit-btn" data-id="<%= product._id %>" onclick="window.location.href='/admin/editProduct?id=<%= product._id %>'" style="background-color: #8b5cf6; color: white; border: none; padding: 0.5rem; border-radius: 0.25rem; cursor: pointer;">
                                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"/>
                                            </svg>
                                        </button>
                                        
                                        <button class="<%= product.isBlocked ? 'unlist-btn' : 'list-btn' %>" 
                                                data-id="<%= product._id %>" 
                                                style="background-color: <%= product.isBlocked ? '#f59e0b' : '#10b981' %>; color: white; border: none; padding: 0.5rem; border-radius: 0.25rem; cursor: pointer;">
                                            <%= product.isBlocked ? 'Unlist' : 'List' %>
                                        </button>

                                        <button class="delete-btn" 
                                                data-id="<%= product._id %>" 
                                                data-name="<%= product.productName %>"
                                                style="background-color: #ef4444; color: white; border: none; padding: 0.5rem; border-radius: 0.25rem; cursor: pointer;">
                                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                <path d="M3 6h18M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2"/>
                                                <line x1="10" y1="11" x2="10" y2="17"/>
                                                <line x1="14" y1="11" x2="14" y2="17"/>
                                            </svg>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>

                <!-- Pagination -->
                <div class="d-flex justify-content-between align-items-center p-3 border-top" style="background-color: #f9fafb;">
                    <div class="text-muted">
                        Showing <%= startIndex + 1 %> to <%= Math.min(endIndex, products.length) %> of <%= products.length %> products
                    </div>
                    <nav aria-label="Product navigation">
                        <ul class="pagination mb-0">
                            <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                                <a class="page-link" href="?page=<%= currentPage - 1 %>" style="color: #6d28d9; border-color: #6d28d9;">Previous</a>
                            </li>
                            
                            <% for(let i = 1; i <= totalPages; i++) { %>
                                <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                    <a class="page-link" href="?page=<%= i %>" style="color: #6d28d9; border-color: #6d28d9; <%= currentPage === i ? 'background-color: #6d28d9; color: white;' : '' %>"><%= i %></a>
                                </li>
                            <% } %>
                            
                            <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                                <a class="page-link" href="?page=<%= currentPage + 1 %>" style="color: #6d28d9; border-color: #6d28d9;">Next</a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </main>

    <%- include('../partials/admin/adminFooter')%>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // List/Unlist functionality
            document.querySelectorAll('.list-btn, .unlist-btn').forEach(button => {
                button.addEventListener('click', async function() {
                    const productId = this.dataset.id;
                    const currentStatus = this.classList.contains('list-btn') ? 'list' : 'unlist';
                    
                    try {
                        const result = await Swal.fire({
                            title: `Confirm ${currentStatus}?`,
                            text: `Are you sure you want to ${currentStatus} this product?`,
                            icon: 'question',
                            showCancelButton: true,
                            confirmButtonColor: currentStatus === 'list' ? '#10b981' : '#f59e0b',
                            cancelButtonColor: '#6B7280',
                            confirmButtonText: `Yes, ${currentStatus} it!`,
                            cancelButtonText: 'Cancel'
                        });

                        if (result.isConfirmed) {
                            const response = await fetch(`/admin/product/toggle/${productId}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });

                            const data = await response.json();
                            
                            if (data.success) {
                                await Swal.fire({
                                    title: 'Success!',
                                    text: `Product has been ${currentStatus}ed successfully.`,
                                    icon: 'success',
                                    timer: 1500,
                                    showConfirmButton: false
                                });
                                location.reload();
                            } else {
                                throw new Error(data.message || `Failed to ${currentStatus} product`);
                            }
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        Swal.fire({
                            title: 'Error!',
                            text: error.message || `Failed to ${currentStatus} product`,
                            icon: 'error'
                        });
                    }
                });
            });

            // Delete functionality
            document.querySelectorAll('.delete-btn').forEach(button => {
                button.addEventListener('click', async function() {
                    const productId = this.dataset.id;
                    const productName = this.dataset.name;
                    
                    try {
                        const result = await Swal.fire({
                            title: 'Are you sure?',
                            html: `You are about to delete <strong>${productName}</strong>.<br>This action cannot be undone!`,
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#ef4444',
                            cancelButtonColor: '#6B7280',
                            confirmButtonText: 'Yes, delete it!',
                            cancelButtonText: 'Cancel',
                            reverseButtons: true,
                            focusCancel: true
                        });

                        if (result.isConfirmed) {
                            // Show loading state
                            Swal.fire({
                                title: 'Deleting...',
                                html: 'Please wait while we delete the product.',
                                allowOutsideClick: false,
                                allowEscapeKey: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });

                            const response = await fetch(`/admin/product/delete/${productId}`, {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });

                            const data = await response.json();

                            if (data.success) {
                                await Swal.fire({
                                    icon: 'success',
                                    title: 'Deleted!',
                                    text: `${productName} has been deleted successfully.`,
                                    showConfirmButton: false,
                                    timer: 1500
                                });
                                location.reload();
                            } else {
                                throw new Error(data.message || 'Failed to delete product');
                            }
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: error.message || 'Failed to delete product',
                        });
                    }
                });
            });

            // Error handling function
            function handleError(error, action) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Operation Failed',
                    text: `Failed to ${action} product: ${error.message}`,
                });
            }
        });
    </script>
</body>
</html>